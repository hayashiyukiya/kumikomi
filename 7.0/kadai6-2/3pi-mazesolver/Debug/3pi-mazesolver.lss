
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000026c2  00002756  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ec  0080015e  0080015e  000027b4  2**0
                  ALLOC
  3 .stab         00006f54  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000123ea  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001242c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  0001246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001413  00000000  00000000  0001255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000076e  00000000  00000000  0001396f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000ecc  00000000  00000000  000140dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000214  00000000  00000000  00014fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000501  00000000  00000000  000151c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006fb  00000000  00000000  000156c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00015dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__dtors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_end>:
      aa:	47 0c       	add	r4, r7

000000ac <__dtors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e2 ec       	ldi	r30, 0xC2	; 194
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 35       	cpi	r26, 0x5E	; 94
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	ae e5       	ldi	r26, 0x5E	; 94
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	aa 34       	cpi	r26, 0x4A	; 74
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 40 02 	call	0x480	; 0x480 <main>
      e2:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__do_global_dtors>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	88 e6       	ldi	r24, 0x68	; 104
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      fe:	62 e0       	ldi	r22, 0x02	; 2
     100:	8a e6       	ldi	r24, 0x6A	; 106
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	8b e6       	ldi	r24, 0x6B	; 107
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	8c e6       	ldi	r24, 0x6C	; 108
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	8d e6       	ldi	r24, 0x6D	; 109
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	8e e6       	ldi	r24, 0x6E	; 110
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 66 09 	call	0x12cc	; 0x12cc <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     130:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <clear>

00000134 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2a 97       	sbiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	8c 01       	movw	r16, r24
     158:	7c 01       	movw	r14, r24
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	e8 0e       	add	r14, r24
     15e:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     164:	95 e6       	ldi	r25, 0x65	; 101
     166:	c9 2e       	mov	r12, r25
     168:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	e4 e1       	ldi	r30, 0x14	; 20
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	de 01       	movw	r26, r28
     170:	11 96       	adiw	r26, 0x01	; 1
     172:	8b 2d       	mov	r24, r11
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     17c:	f8 01       	movw	r30, r16
     17e:	81 91       	ld	r24, Z+
     180:	91 91       	ld	r25, Z+
     182:	8f 01       	movw	r16, r30
     184:	b6 01       	movw	r22, r12
     186:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ec 0f       	add	r30, r28
     190:	fd 1f       	adc	r31, r29
     192:	e6 0f       	add	r30, r22
     194:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     196:	80 81       	ld	r24, Z
     198:	0e 94 69 09 	call	0x12d2	; 0x12d2 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     19c:	0e 15       	cp	r16, r14
     19e:	1f 05       	cpc	r17, r15
     1a0:	21 f7       	brne	.-56     	; 0x16a <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	08 95       	ret

000001c2 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1c2:	2f 92       	push	r2
     1c4:	3f 92       	push	r3
     1c6:	4f 92       	push	r4
     1c8:	5f 92       	push	r5
     1ca:	6f 92       	push	r6
     1cc:	7f 92       	push	r7
     1ce:	8f 92       	push	r8
     1d0:	9f 92       	push	r9
     1d2:	af 92       	push	r10
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1fc:	a1 2c       	mov	r10, r1
     1fe:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/25 + integral/12000 + derivative*3/2;
     200:	60 ee       	ldi	r22, 0xE0	; 224
     202:	46 2e       	mov	r4, r22
     204:	6e e2       	ldi	r22, 0x2E	; 46
     206:	56 2e       	mov	r5, r22
     208:	61 2c       	mov	r6, r1
     20a:	71 2c       	mov	r7, r1
     20c:	79 e1       	ldi	r23, 0x19	; 25
     20e:	27 2e       	mov	r2, r23
     210:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     212:	e2 e3       	ldi	r30, 0x32	; 50
     214:	8e 2e       	mov	r8, r30
     216:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 0d 0c 	call	0x181a	; 0x181a <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     222:	8c 01       	movw	r16, r24
     224:	00 5d       	subi	r16, 0xD0	; 208
     226:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     228:	c8 01       	movw	r24, r16
     22a:	01 2e       	mov	r0, r17
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	c8 0e       	add	r12, r24
     234:	d9 1e       	adc	r13, r25
     236:	ea 1e       	adc	r14, r26
     238:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/25 + integral/12000 + derivative*3/2;
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	a3 01       	movw	r20, r6
     240:	92 01       	movw	r18, r4
     242:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     246:	f8 01       	movw	r30, r16
     248:	ea 19       	sub	r30, r10
     24a:	fb 09       	sbc	r31, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/25 + integral/12000 + derivative*3/2;
     24c:	cf 01       	movw	r24, r30
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	8e 0f       	add	r24, r30
     254:	9f 1f       	adc	r25, r31
     256:	97 fd       	sbrc	r25, 7
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	95 95       	asr	r25
     25c:	87 95       	ror	r24
     25e:	28 0f       	add	r18, r24
     260:	39 1f       	adc	r19, r25
     262:	c8 01       	movw	r24, r16
     264:	b1 01       	movw	r22, r2
     266:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__divmodhi4>
     26a:	c9 01       	movw	r24, r18
     26c:	86 0f       	add	r24, r22
     26e:	97 1f       	adc	r25, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 50; // the maximum speed
		if(power_difference > max)
     270:	83 33       	cpi	r24, 0x33	; 51
     272:	91 05       	cpc	r25, r1
     274:	6c f4       	brge	.+26     	; 0x290 <follow_segment+0xce>
			power_difference = max;
		if(power_difference < -max)
     276:	8e 3c       	cpi	r24, 0xCE	; 206
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	92 07       	cpc	r25, r18
     27c:	1c f0       	brlt	.+6      	; 0x284 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     27e:	97 fd       	sbrc	r25, 7
     280:	03 c0       	rjmp	.+6      	; 0x288 <follow_segment+0xc6>
     282:	08 c0       	rjmp	.+16     	; 0x294 <follow_segment+0xd2>
		// to a negative value.
		const int max = 50; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     284:	8e ec       	ldi	r24, 0xCE	; 206
     286:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     288:	62 e3       	ldi	r22, 0x32	; 50
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	c2 96       	adiw	r24, 0x32	; 50
     28e:	07 c0       	rjmp	.+14     	; 0x29e <follow_segment+0xdc>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 50; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     290:	82 e3       	ldi	r24, 0x32	; 50
     292:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     294:	b4 01       	movw	r22, r8
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	82 e3       	ldi	r24, 0x32	; 50
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	50 f4       	brcc	.+20     	; 0x2c0 <follow_segment+0xfe>
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	9e 81       	ldd	r25, Y+6	; 0x06
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <follow_segment+0xfe>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	60 f0       	brcs	.+24     	; 0x2d8 <follow_segment+0x116>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	38 f4       	brcc	.+14     	; 0x2d8 <follow_segment+0x116>
     2ca:	89 85       	ldd	r24, Y+9	; 0x09
     2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	10 f4       	brcc	.+4      	; 0x2d8 <follow_segment+0x116>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2d4:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2d6:	a0 cf       	rjmp	.-192    	; 0x218 <follow_segment+0x56>
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	08 95       	ret

0000030a <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	2a 97       	sbiw	r28, 0x0a	; 10
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     322:	80 ed       	ldi	r24, 0xD0	; 208
     324:	97 e0       	ldi	r25, 0x07	; 7
     326:	0e 94 43 0c 	call	0x1886	; 0x1886 <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     32a:	0e 94 75 00 	call	0xea	; 0xea <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     32e:	82 ea       	ldi	r24, 0xA2	; 162
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <print_from_program_space>
	lcd_goto_xy(0,1);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     33e:	89 e9       	ldi	r24, 0x99	; 153
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <print_from_program_space>
	play_from_program_space(welcome);
     346:	83 e8       	ldi	r24, 0x83	; 131
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 a6 08 	call	0x114c	; 0x114c <play_from_program_space>
	delay_ms(1000);
     34e:	88 ee       	ldi	r24, 0xE8	; 232
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>

	clear();
     356:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>
	print_from_program_space(demo_name_line1);
     35a:	84 e9       	ldi	r24, 0x94	; 148
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <print_from_program_space>
	lcd_goto_xy(0,1);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     36a:	8d e8       	ldi	r24, 0x8D	; 141
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <print_from_program_space>
	delay_ms(1000);
     372:	88 ee       	ldi	r24, 0xE8	; 232
     374:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     376:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <button_is_pressed>
     380:	81 11       	cpse	r24, r1
     382:	1a c0       	rjmp	.+52     	; 0x3b8 <initialize+0xae>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     384:	0e 94 6b 05 	call	0xad6	; 0xad6 <read_battery_millivolts_3pi>
     388:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     38a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>
		print_long(bat);
     38e:	b8 01       	movw	r22, r16
     390:	11 0f       	add	r17, r17
     392:	88 0b       	sbc	r24, r24
     394:	99 0b       	sbc	r25, r25
     396:	0e 94 4e 0a 	call	0x149c	; 0x149c <print_long>
		print("mV");
     39a:	8b e3       	ldi	r24, 0x3B	; 59
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>
		lcd_goto_xy(0,1);
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
		print("Press B");
     3aa:	8e e3       	ldi	r24, 0x3E	; 62
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>

		delay_ms(100);
     3b2:	84 e6       	ldi	r24, 0x64	; 100
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	df cf       	rjmp	.-66     	; 0x376 <initialize+0x6c>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	0e 94 56 0b 	call	0x16ac	; 0x16ac <wait_for_button_release>
	delay_ms(1000);
     3be:	88 ee       	ldi	r24, 0xE8	; 232
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
     3c6:	0c ee       	ldi	r16, 0xEC	; 236
     3c8:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3ca:	08 32       	cpi	r16, 0x28	; 40
     3cc:	11 05       	cpc	r17, r1
     3ce:	28 f0       	brcs	.+10     	; 0x3da <initialize+0xd0>
			set_motors(40,-40);
     3d0:	68 ed       	ldi	r22, 0xD8	; 216
     3d2:	7f ef       	ldi	r23, 0xFF	; 255
     3d4:	88 e2       	ldi	r24, 0x28	; 40
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <initialize+0xd8>
		else
			set_motors(-40,40);
     3da:	68 e2       	ldi	r22, 0x28	; 40
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	88 ed       	ldi	r24, 0xD8	; 216
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 07 0c 	call	0x180e	; 0x180e <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     3ec:	84 e1       	ldi	r24, 0x14	; 20
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     3f8:	0c 33       	cpi	r16, 0x3C	; 60
     3fa:	11 05       	cpc	r17, r1
     3fc:	31 f7       	brne	.-52     	; 0x3ca <initialize+0xc0>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     40a:	80 e1       	ldi	r24, 0x10	; 16
     40c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <button_is_pressed>
     410:	81 11       	cpse	r24, r1
     412:	1a c0       	rjmp	.+52     	; 0x448 <initialize+0x13e>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 0d 0c 	call	0x181a	; 0x181a <read_line>
     41e:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     420:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>
		print_long(position);
     424:	b8 01       	movw	r22, r16
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 4e 0a 	call	0x149c	; 0x149c <print_long>
		lcd_goto_xy(0,1);
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
		display_readings(sensors);
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	0e 94 9a 00 	call	0x134	; 0x134 <display_readings>

		delay_ms(100);
     43e:	84 e6       	ldi	r24, 0x64	; 100
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
     446:	e1 cf       	rjmp	.-62     	; 0x40a <initialize+0x100>
	}
	wait_for_button_release(BUTTON_B);
     448:	80 e1       	ldi	r24, 0x10	; 16
     44a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <wait_for_button_release>

	clear();
     44e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>

	print("Go!");		
     452:	86 e4       	ldi	r24, 0x46	; 70
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     45a:	86 e7       	ldi	r24, 0x76	; 118
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 a6 08 	call	0x114c	; 0x114c <play_from_program_space>
	while(is_playing());
     462:	0e 94 85 08 	call	0x110a	; 0x110a <is_playing>
     466:	81 11       	cpse	r24, r1
     468:	fc cf       	rjmp	.-8      	; 0x462 <initialize+0x158>
}
     46a:	2a 96       	adiw	r28, 0x0a	; 10
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     480:	0e 94 85 01 	call	0x30a	; 0x30a <initialize>

	// Call our maze solving routine.
	maze_solve();
     484:	0e 94 b7 02 	call	0x56e	; 0x56e <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     488:	ff cf       	rjmp	.-2      	; 0x488 <main+0x8>

0000048a <display_path>:
void display_path()
{
	// Set the last character of the path to a 0 so that the print()
	// function can find the end of the string.  This is how strings
	// are normally terminated in C.
	path[path_length] = 0;
     48a:	e0 91 c4 01 	lds	r30, 0x01C4
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	eb 53       	subi	r30, 0x3B	; 59
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	10 82       	st	Z, r1

	clear();
     496:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>
	print(path);
     49a:	85 ec       	ldi	r24, 0xC5	; 197
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>

	if(path_length > 8)
     4a2:	80 91 c4 01 	lds	r24, 0x01C4
     4a6:	89 30       	cpi	r24, 0x09	; 9
     4a8:	40 f0       	brcs	.+16     	; 0x4ba <display_path+0x30>
	{
		lcd_goto_xy(0,1);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
		print(path+8);
     4b2:	8d ec       	ldi	r24, 0xCD	; 205
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <print>
     4ba:	08 95       	ret

000004bc <select_turn>:
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right)
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
     4bc:	81 11       	cpse	r24, r1
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <select_turn+0x10>
		return 'L';
	else if(found_straight)
     4c0:	61 11       	cpse	r22, r1
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <select_turn+0x14>
		return 'S';
	else if(found_right)
     4c4:	41 11       	cpse	r20, r1
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <select_turn+0x18>
		return 'R';
	else
		return 'B';
     4c8:	82 e4       	ldi	r24, 0x42	; 66
     4ca:	08 95       	ret
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
		return 'L';
     4cc:	8c e4       	ldi	r24, 0x4C	; 76
     4ce:	08 95       	ret
	else if(found_straight)
		return 'S';
     4d0:	83 e5       	ldi	r24, 0x53	; 83
     4d2:	08 95       	ret
	else if(found_right)
		return 'R';
     4d4:	82 e5       	ldi	r24, 0x52	; 82
	else
		return 'B';
}
     4d6:	08 95       	ret

000004d8 <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplify_path()
{
	// only simplify the path if the second-to-last turn was a 'B'
	if(path_length < 3 || path[path_length-2] != 'B')
     4d8:	40 91 c4 01 	lds	r20, 0x01C4
     4dc:	43 30       	cpi	r20, 0x03	; 3
     4de:	08 f4       	brcc	.+2      	; 0x4e2 <simplify_path+0xa>
     4e0:	45 c0       	rjmp	.+138    	; 0x56c <simplify_path+0x94>
     4e2:	24 2f       	mov	r18, r20
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	2b 53       	subi	r18, 0x3B	; 59
     4e8:	3e 4f       	sbci	r19, 0xFE	; 254
     4ea:	f9 01       	movw	r30, r18
     4ec:	32 97       	sbiw	r30, 0x02	; 2
     4ee:	80 81       	ld	r24, Z
     4f0:	82 34       	cpi	r24, 0x42	; 66
     4f2:	e1 f5       	brne	.+120    	; 0x56c <simplify_path+0x94>
     4f4:	f9 01       	movw	r30, r18
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
     4fe:	52 91       	ld	r21, -Z
     500:	5c 34       	cpi	r21, 0x4C	; 76
     502:	51 f0       	breq	.+20     	; 0x518 <simplify_path+0x40>
     504:	52 35       	cpi	r21, 0x52	; 82
     506:	29 f0       	breq	.+10     	; 0x512 <simplify_path+0x3a>
     508:	52 34       	cpi	r21, 0x42	; 66
     50a:	41 f4       	brne	.+16     	; 0x51c <simplify_path+0x44>
			break;
		case 'L':
			total_angle += 270;
			break;
		case 'B':
			total_angle += 180;
     50c:	8c 54       	subi	r24, 0x4C	; 76
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     510:	05 c0       	rjmp	.+10     	; 0x51c <simplify_path+0x44>
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
		{
		case 'R':
			total_angle += 90;
     512:	86 5a       	subi	r24, 0xA6	; 166
     514:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     516:	02 c0       	rjmp	.+4      	; 0x51c <simplify_path+0x44>
		case 'L':
			total_angle += 270;
     518:	82 5f       	subi	r24, 0xF2	; 242
     51a:	9e 4f       	sbci	r25, 0xFE	; 254
	if(path_length < 3 || path[path_length-2] != 'B')
		return;

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	64 30       	cpi	r22, 0x04	; 4
     522:	71 05       	cpc	r23, r1
     524:	61 f7       	brne	.-40     	; 0x4fe <simplify_path+0x26>
			break;
		}
	}

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;
     526:	68 e6       	ldi	r22, 0x68	; 104
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__divmodhi4>

	// Replace all of those turns with a single one.
	switch(total_angle)
     52e:	8a 35       	cpi	r24, 0x5A	; 90
     530:	91 05       	cpc	r25, r1
     532:	89 f0       	breq	.+34     	; 0x556 <simplify_path+0x7e>
     534:	34 f4       	brge	.+12     	; 0x542 <simplify_path+0x6a>
     536:	89 2b       	or	r24, r25
     538:	b1 f4       	brne	.+44     	; 0x566 <simplify_path+0x8e>
	{
	case 0:
		path[path_length - 3] = 'S';
     53a:	f9 01       	movw	r30, r18
     53c:	33 97       	sbiw	r30, 0x03	; 3
     53e:	83 e5       	ldi	r24, 0x53	; 83
     540:	11 c0       	rjmp	.+34     	; 0x564 <simplify_path+0x8c>

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;

	// Replace all of those turns with a single one.
	switch(total_angle)
     542:	84 3b       	cpi	r24, 0xB4	; 180
     544:	91 05       	cpc	r25, r1
     546:	59 f0       	breq	.+22     	; 0x55e <simplify_path+0x86>
     548:	8e 30       	cpi	r24, 0x0E	; 14
     54a:	91 40       	sbci	r25, 0x01	; 1
     54c:	61 f4       	brne	.+24     	; 0x566 <simplify_path+0x8e>
		break;
	case 180:
		path[path_length - 3] = 'B';
		break;
	case 270:
		path[path_length - 3] = 'L';
     54e:	f9 01       	movw	r30, r18
     550:	33 97       	sbiw	r30, 0x03	; 3
     552:	8c e4       	ldi	r24, 0x4C	; 76
     554:	07 c0       	rjmp	.+14     	; 0x564 <simplify_path+0x8c>
	{
	case 0:
		path[path_length - 3] = 'S';
		break;
	case 90:
		path[path_length - 3] = 'R';
     556:	f9 01       	movw	r30, r18
     558:	33 97       	sbiw	r30, 0x03	; 3
     55a:	82 e5       	ldi	r24, 0x52	; 82
     55c:	03 c0       	rjmp	.+6      	; 0x564 <simplify_path+0x8c>
		break;
	case 180:
		path[path_length - 3] = 'B';
     55e:	f9 01       	movw	r30, r18
     560:	33 97       	sbiw	r30, 0x03	; 3
     562:	82 e4       	ldi	r24, 0x42	; 66
		break;
	case 270:
		path[path_length - 3] = 'L';
     564:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	path_length -= 2;
     566:	42 50       	subi	r20, 0x02	; 2
     568:	40 93 c4 01 	sts	0x01C4, r20
     56c:	08 95       	ret

0000056e <maze_solve>:
}

// This function is called once, from main.c.
void maze_solve()
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	2b 97       	sbiw	r28, 0x0b	; 11
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	e3 5d       	subi	r30, 0xD3	; 211
     58a:	fd 4f       	sbci	r31, 0xFD	; 253
	int i,j;
	
	for (i = 0; i < 5; i++)     //place no syokika
	{
		for(j = 0; j < 5; j++){
			place[i][j] = 0;
     58c:	10 82       	st	Z, r1
     58e:	11 82       	std	Z+1, r1	; 0x01
     590:	12 82       	std	Z+2, r1	; 0x02
     592:	13 82       	std	Z+3, r1	; 0x03
     594:	14 82       	std	Z+4, r1	; 0x04
     596:	05 96       	adiw	r24, 0x05	; 5
{
	unsigned char flag = 0;
	
	int i,j;
	
	for (i = 0; i < 5; i++)     //place no syokika
     598:	89 31       	cpi	r24, 0x19	; 25
     59a:	91 05       	cpc	r25, r1
     59c:	a1 f7       	brne	.-24     	; 0x586 <maze_solve+0x18>
				flag = 1;
			}
			break;
		case 9:
			place_y++;
			if((place[place_x][place_y] & 2) != 2){
     59e:	05 e0       	ldi	r16, 0x05	; 5
			break;
		case 'B':
			direction += 18;
			break;		
		}
		direction = direction % 36;
     5a0:	94 e2       	ldi	r25, 0x24	; 36
     5a2:	f9 2e       	mov	r15, r25
	
	// Loop until we have solved the maze.
	while(1)
	{
		
		clear();
     5a4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>
		print("(");
     5a8:	8a e4       	ldi	r24, 0x4A	; 74
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>
		print_long(place_x);
     5b0:	60 91 c2 01 	lds	r22, 0x01C2
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 4e 0a 	call	0x149c	; 0x149c <print_long>
		print(",");
     5be:	8c e4       	ldi	r24, 0x4C	; 76
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>
		print_long(place_y);
     5c6:	60 91 c1 01 	lds	r22, 0x01C1
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 4e 0a 	call	0x149c	; 0x149c <print_long>
		print(")");
     5d4:	8e e4       	ldi	r24, 0x4E	; 78
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>
		lcd_goto_xy(0,1);
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
		print_long(direction);
     5e4:	60 91 c3 01 	lds	r22, 0x01C3
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 4e 0a 	call	0x149c	; 0x149c <print_long>
		
		// FIRST MAIN LOOP BODY  
		follow_segment();
     5f2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		switch(direction)
     5f6:	80 91 c3 01 	lds	r24, 0x01C3
     5fa:	89 30       	cpi	r24, 0x09	; 9
     5fc:	e1 f0       	breq	.+56     	; 0x636 <maze_solve+0xc8>
     5fe:	18 f4       	brcc	.+6      	; 0x606 <maze_solve+0x98>
     600:	88 23       	and	r24, r24
     602:	31 f0       	breq	.+12     	; 0x610 <maze_solve+0xa2>
     604:	51 c0       	rjmp	.+162    	; 0x6a8 <maze_solve+0x13a>
     606:	82 31       	cpi	r24, 0x12	; 18
     608:	49 f1       	breq	.+82     	; 0x65c <maze_solve+0xee>
     60a:	8b 31       	cpi	r24, 0x1B	; 27
     60c:	d1 f1       	breq	.+116    	; 0x682 <maze_solve+0x114>
     60e:	4c c0       	rjmp	.+152    	; 0x6a8 <maze_solve+0x13a>
		{
		case 0:
			place_x++;
     610:	e0 91 c2 01 	lds	r30, 0x01C2
     614:	ef 5f       	subi	r30, 0xFF	; 255
     616:	e0 93 c2 01 	sts	0x01C2, r30
			if((place[place_x][place_y] & 1) != 1){
     61a:	80 91 c1 01 	lds	r24, 0x01C1
     61e:	0e 9f       	mul	r16, r30
     620:	f0 01       	movw	r30, r0
     622:	11 24       	eor	r1, r1
     624:	e8 0f       	add	r30, r24
     626:	f1 1d       	adc	r31, r1
     628:	e3 5d       	subi	r30, 0xD3	; 211
     62a:	fd 4f       	sbci	r31, 0xFD	; 253
     62c:	80 81       	ld	r24, Z
     62e:	80 fd       	sbrc	r24, 0
     630:	3d c0       	rjmp	.+122    	; 0x6ac <maze_solve+0x13e>
				place[place_x][place_y] += 1;
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	38 c0       	rjmp	.+112    	; 0x6a6 <maze_solve+0x138>
			}else{
				flag = 1;
			}
			break;
		case 9:
			place_y++;
     636:	80 91 c1 01 	lds	r24, 0x01C1
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	80 93 c1 01 	sts	0x01C1, r24
			if((place[place_x][place_y] & 2) != 2){
     640:	e0 91 c2 01 	lds	r30, 0x01C2
     644:	0e 9f       	mul	r16, r30
     646:	f0 01       	movw	r30, r0
     648:	11 24       	eor	r1, r1
     64a:	e8 0f       	add	r30, r24
     64c:	f1 1d       	adc	r31, r1
     64e:	e3 5d       	subi	r30, 0xD3	; 211
     650:	fd 4f       	sbci	r31, 0xFD	; 253
     652:	80 81       	ld	r24, Z
     654:	81 fd       	sbrc	r24, 1
     656:	2c c0       	rjmp	.+88     	; 0x6b0 <maze_solve+0x142>
				place[place_x][place_y] += 2;
     658:	8e 5f       	subi	r24, 0xFE	; 254
     65a:	25 c0       	rjmp	.+74     	; 0x6a6 <maze_solve+0x138>
			}else{
				flag = 2;
			}
			break;
		case 18:
			place_x--;
     65c:	e0 91 c2 01 	lds	r30, 0x01C2
     660:	e1 50       	subi	r30, 0x01	; 1
     662:	e0 93 c2 01 	sts	0x01C2, r30
			if((place[place_x][place_y] & 4) != 4){
     666:	80 91 c1 01 	lds	r24, 0x01C1
     66a:	0e 9f       	mul	r16, r30
     66c:	f0 01       	movw	r30, r0
     66e:	11 24       	eor	r1, r1
     670:	e8 0f       	add	r30, r24
     672:	f1 1d       	adc	r31, r1
     674:	e3 5d       	subi	r30, 0xD3	; 211
     676:	fd 4f       	sbci	r31, 0xFD	; 253
     678:	80 81       	ld	r24, Z
     67a:	82 fd       	sbrc	r24, 2
     67c:	1b c0       	rjmp	.+54     	; 0x6b4 <maze_solve+0x146>
				place[place_x][place_y] += 4;
     67e:	8c 5f       	subi	r24, 0xFC	; 252
     680:	12 c0       	rjmp	.+36     	; 0x6a6 <maze_solve+0x138>
			}else{
				flag = 4;
			}
			break;
		case 27:
			place_y--;
     682:	80 91 c1 01 	lds	r24, 0x01C1
     686:	81 50       	subi	r24, 0x01	; 1
     688:	80 93 c1 01 	sts	0x01C1, r24
			if((place[place_x][place_y] & 8) != 8){
     68c:	e0 91 c2 01 	lds	r30, 0x01C2
     690:	0e 9f       	mul	r16, r30
     692:	f0 01       	movw	r30, r0
     694:	11 24       	eor	r1, r1
     696:	e8 0f       	add	r30, r24
     698:	f1 1d       	adc	r31, r1
     69a:	e3 5d       	subi	r30, 0xD3	; 211
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	80 81       	ld	r24, Z
     6a0:	83 fd       	sbrc	r24, 3
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <maze_solve+0x14a>
				place[place_x][place_y] += 8;
     6a4:	88 5f       	subi	r24, 0xF8	; 248
     6a6:	80 83       	st	Z, r24
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	07 c0       	rjmp	.+14     	; 0x6ba <maze_solve+0x14c>
		case 0:
			place_x++;
			if((place[place_x][place_y] & 1) != 1){
				place[place_x][place_y] += 1;
			}else{
				flag = 1;
     6ac:	11 e0       	ldi	r17, 0x01	; 1
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <maze_solve+0x14c>
		case 9:
			place_y++;
			if((place[place_x][place_y] & 2) != 2){
				place[place_x][place_y] += 2;
			}else{
				flag = 2;
     6b0:	12 e0       	ldi	r17, 0x02	; 2
     6b2:	03 c0       	rjmp	.+6      	; 0x6ba <maze_solve+0x14c>
		case 18:
			place_x--;
			if((place[place_x][place_y] & 4) != 4){
				place[place_x][place_y] += 4;
			}else{
				flag = 4;
     6b4:	14 e0       	ldi	r17, 0x04	; 4
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <maze_solve+0x14c>
		case 27:
			place_y--;
			if((place[place_x][place_y] & 8) != 8){
				place[place_x][place_y] += 8;
			}else{
				flag = 8;
     6b8:	18 e0       	ldi	r17, 0x08	; 8

		// Drive straight a bit.  This helps us in case we entered the
		// intersection at an angle.
		// Note that we are slowing down - this prevents the robot
		// from tipping forward too much.
		set_motors(50,50);
     6ba:	62 e3       	ldi	r22, 0x32	; 50
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	82 e3       	ldi	r24, 0x32	; 50
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		delay_ms(50);
     6c6:	82 e3       	ldi	r24, 0x32	; 50
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
		unsigned char found_straight=0;
		unsigned char found_right=0;

		// Now read the sensors and check the intersection type.
		unsigned int sensors[5];
		read_line(sensors,IR_EMITTERS_ON);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 0d 0c 	call	0x181a	; 0x181a <read_line>

		// Check for left and right exits.
		if(sensors[0] > 100)
     6d8:	ee 24       	eor	r14, r14
     6da:	e3 94       	inc	r14
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	85 36       	cpi	r24, 0x65	; 101
     6e2:	91 05       	cpc	r25, r1
     6e4:	08 f4       	brcc	.+2      	; 0x6e8 <maze_solve+0x17a>
     6e6:	e1 2c       	mov	r14, r1
			found_left = 1;
		if(sensors[4] > 100)
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	89 85       	ldd	r24, Y+9	; 0x09
     6ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ee:	85 36       	cpi	r24, 0x65	; 101
     6f0:	91 05       	cpc	r25, r1
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <maze_solve+0x188>
     6f4:	40 e0       	ldi	r20, 0x00	; 0
			found_right = 1;

		// Drive straight a bit more - this is enough to line up our
		// wheels with the intersection.
		set_motors(40,40);
     6f6:	68 e2       	ldi	r22, 0x28	; 40
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	88 e2       	ldi	r24, 0x28	; 40
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	4b 87       	std	Y+11, r20	; 0x0b
     700:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		delay_ms(100);
     704:	84 e6       	ldi	r24, 0x64	; 100
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>

		// Check for a straight exit.
		read_line(sensors,IR_EMITTERS_ON);
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 0d 0c 	call	0x181a	; 0x181a <read_line>
		if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200)
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	9c 81       	ldd	r25, Y+4	; 0x04
     71a:	4b 85       	ldd	r20, Y+11	; 0x0b
     71c:	89 3c       	cpi	r24, 0xC9	; 201
     71e:	91 05       	cpc	r25, r1
     720:	60 f4       	brcc	.+24     	; 0x73a <maze_solve+0x1cc>
     722:	8d 81       	ldd	r24, Y+5	; 0x05
     724:	9e 81       	ldd	r25, Y+6	; 0x06
     726:	89 3c       	cpi	r24, 0xC9	; 201
     728:	91 05       	cpc	r25, r1
     72a:	a8 f4       	brcc	.+42     	; 0x756 <maze_solve+0x1e8>
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	98 85       	ldd	r25, Y+8	; 0x08
     730:	89 3c       	cpi	r24, 0xC9	; 201
     732:	91 05       	cpc	r25, r1
     734:	80 f4       	brcc	.+32     	; 0x756 <maze_solve+0x1e8>

		// These variables record whether the robot has seen a line to the
		// left, straight ahead, and right, whil examining the current
		// intersection.
		unsigned char found_left=0;
		unsigned char found_straight=0;
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	0f c0       	rjmp	.+30     	; 0x758 <maze_solve+0x1ea>
			found_straight = 1;

		// Check for the ending spot.
		// If all three middle sensors are on dark black, we have
		// solved the maze.
		if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600)
     73a:	89 35       	cpi	r24, 0x59	; 89
     73c:	92 40       	sbci	r25, 0x02	; 2
     73e:	58 f0       	brcs	.+22     	; 0x756 <maze_solve+0x1e8>
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	9e 81       	ldd	r25, Y+6	; 0x06
     744:	89 35       	cpi	r24, 0x59	; 89
     746:	92 40       	sbci	r25, 0x02	; 2
     748:	30 f0       	brcs	.+12     	; 0x756 <maze_solve+0x1e8>
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	98 85       	ldd	r25, Y+8	; 0x08
     74e:	89 35       	cpi	r24, 0x59	; 89
     750:	92 40       	sbci	r25, 0x02	; 2
     752:	08 f0       	brcs	.+2      	; 0x756 <maze_solve+0x1e8>
     754:	67 c0       	rjmp	.+206    	; 0x824 <maze_solve+0x2b6>
     756:	61 e0       	ldi	r22, 0x01	; 1
			break;

		// Intersection identification is complete.
		// If the maze has been solved, we can follow the existing
		// path.  Otherwise, we need to learn the solution.
		unsigned char dir = select_turn(found_left, found_straight, found_right);
     758:	8e 2d       	mov	r24, r14
     75a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <select_turn>
     75e:	e8 2e       	mov	r14, r24

		set_motors(40,40);
     760:	68 e2       	ldi	r22, 0x28	; 40
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	88 e2       	ldi	r24, 0x28	; 40
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		delay_ms(100);
     76c:	84 e6       	ldi	r24, 0x64	; 100
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>


		// Make the turn indicated by the path.
		turn(dir);
     774:	8e 2d       	mov	r24, r14
     776:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <turn>
     77a:	90 91 c3 01 	lds	r25, 0x01C3
		
		switch(dir)
     77e:	2c e4       	ldi	r18, 0x4C	; 76
     780:	e2 16       	cp	r14, r18
     782:	41 f0       	breq	.+16     	; 0x794 <maze_solve+0x226>
     784:	82 e5       	ldi	r24, 0x52	; 82
     786:	e8 16       	cp	r14, r24
     788:	39 f0       	breq	.+14     	; 0x798 <maze_solve+0x22a>
     78a:	e2 e4       	ldi	r30, 0x42	; 66
     78c:	ee 12       	cpse	r14, r30
     78e:	07 c0       	rjmp	.+14     	; 0x79e <maze_solve+0x230>
			break;
		case 'R':
			direction += 27;
			break;
		case 'B':
			direction += 18;
     790:	9e 5e       	subi	r25, 0xEE	; 238
     792:	03 c0       	rjmp	.+6      	; 0x79a <maze_solve+0x22c>
		turn(dir);
		
		switch(dir)
		{
		case 'L':
			direction += 9;
     794:	97 5f       	subi	r25, 0xF7	; 247
     796:	01 c0       	rjmp	.+2      	; 0x79a <maze_solve+0x22c>
			break;
		case 'R':
			direction += 27;
     798:	95 5e       	subi	r25, 0xE5	; 229
			break;
		case 'B':
			direction += 18;
     79a:	90 93 c3 01 	sts	0x01C3, r25
			break;		
		}
		direction = direction % 36;
     79e:	80 91 c3 01 	lds	r24, 0x01C3
     7a2:	6f 2d       	mov	r22, r15
     7a4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
     7a8:	90 93 c3 01 	sts	0x01C3, r25
		
		if(flag == 1){
     7ac:	11 30       	cpi	r17, 0x01	; 1
     7ae:	49 f4       	brne	.+18     	; 0x7c2 <maze_solve+0x254>
			set_motors(0,0);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
			delay_ms(500);
     7bc:	84 ef       	ldi	r24, 0xF4	; 244
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	20 c0       	rjmp	.+64     	; 0x802 <maze_solve+0x294>
		}else if(flag == 2){
     7c2:	12 30       	cpi	r17, 0x02	; 2
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <maze_solve+0x26a>
			set_motors(0,0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
			delay_ms(1000);
     7d2:	88 ee       	ldi	r24, 0xE8	; 232
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	15 c0       	rjmp	.+42     	; 0x802 <maze_solve+0x294>
		}else if(flag == 4){
     7d8:	14 30       	cpi	r17, 0x04	; 4
     7da:	49 f4       	brne	.+18     	; 0x7ee <maze_solve+0x280>
			set_motors(0,0);
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
			delay_ms(1500);
     7e8:	8c ed       	ldi	r24, 0xDC	; 220
     7ea:	95 e0       	ldi	r25, 0x05	; 5
     7ec:	0a c0       	rjmp	.+20     	; 0x802 <maze_solve+0x294>
		}else if(flag == 8){
     7ee:	18 30       	cpi	r17, 0x08	; 8
     7f0:	51 f4       	brne	.+20     	; 0x806 <maze_solve+0x298>
			set_motors(0,0);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
			delay_ms(2000);
     7fe:	80 ed       	ldi	r24, 0xD0	; 208
     800:	97 e0       	ldi	r25, 0x07	; 7
     802:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
		}


		// Store the intersection in the path variable.
		path[path_length] = dir;
     806:	80 91 c4 01 	lds	r24, 0x01C4
     80a:	e8 2f       	mov	r30, r24
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	eb 53       	subi	r30, 0x3B	; 59
     810:	fe 4f       	sbci	r31, 0xFE	; 254
     812:	e0 82       	st	Z, r14
		path_length ++;
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	80 93 c4 01 	sts	0x01C4, r24
		// You should check to make sure that the path_length does not
		// exceed the bounds of the array.  We'll ignore that in this
		// example.

		// Simplify the learned path.
		simplify_path();
     81a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <simplify_path>

		// Display the path on the LCD.
		display_path();
     81e:	0e 94 45 02 	call	0x48a	; 0x48a <display_path>
		
		flag = 0;
		
	}
     822:	c0 ce       	rjmp	.-640    	; 0x5a4 <maze_solve+0x36>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
		{
			if(get_ms() % 2000 < 1000)
     824:	80 ed       	ldi	r24, 0xD0	; 208
     826:	c8 2e       	mov	r12, r24
     828:	87 e0       	ldi	r24, 0x07	; 7
     82a:	d8 2e       	mov	r13, r24
     82c:	e1 2c       	mov	r14, r1
     82e:	f1 2c       	mov	r15, r1
	// Now enter an infinite loop - we can re-run the maze as many
	// times as we want to.
	while(1)
	{
		// Beep to show that we finished the maze.
		set_motors(0,0);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		play(">>a32");
     83c:	80 e5       	ldi	r24, 0x50	; 80
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 95 08 	call	0x112a	; 0x112a <play>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
     844:	80 e1       	ldi	r24, 0x10	; 16
     846:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <button_is_pressed>
     84a:	81 11       	cpse	r24, r1
     84c:	21 c0       	rjmp	.+66     	; 0x890 <maze_solve+0x322>
		{
			if(get_ms() % 2000 < 1000)
     84e:	0e 94 ed 0b 	call	0x17da	; 0x17da <get_ms>
     852:	a7 01       	movw	r20, r14
     854:	96 01       	movw	r18, r12
     856:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
     85a:	68 3e       	cpi	r22, 0xE8	; 232
     85c:	73 40       	sbci	r23, 0x03	; 3
     85e:	81 05       	cpc	r24, r1
     860:	91 05       	cpc	r25, r1
     862:	78 f4       	brcc	.+30     	; 0x882 <maze_solve+0x314>
			{
				clear();
     864:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <clear>
				print("Solved!");
     868:	86 e5       	ldi	r24, 0x56	; 86
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>
				lcd_goto_xy(0,1);
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <lcd_goto_xy>
				print("Press B");
     878:	8e e3       	ldi	r24, 0x3E	; 62
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <print>
     880:	02 c0       	rjmp	.+4      	; 0x886 <maze_solve+0x318>
			}
			else
				display_path();
     882:	0e 94 45 02 	call	0x48a	; 0x48a <display_path>
			delay_ms(30);
     886:	8e e1       	ldi	r24, 0x1E	; 30
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
     88e:	da cf       	rjmp	.-76     	; 0x844 <maze_solve+0x2d6>
		}
		while(button_is_pressed(BUTTON_B));
     890:	80 e1       	ldi	r24, 0x10	; 16
     892:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <button_is_pressed>
     896:	81 11       	cpse	r24, r1
     898:	fb cf       	rjmp	.-10     	; 0x890 <maze_solve+0x322>
	
		delay_ms(1000);
     89a:	88 ee       	ldi	r24, 0xE8	; 232
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>

		// Re-run the maze.  It's not necessary to identify the
		// intersections, so this loop is really simple.
		int i;
		for(i=0;i<path_length;i++)
     8a2:	05 ec       	ldi	r16, 0xC5	; 197
     8a4:	11 e0       	ldi	r17, 0x01	; 1
     8a6:	80 91 c4 01 	lds	r24, 0x01C4
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	a8 01       	movw	r20, r16
     8ae:	45 5c       	subi	r20, 0xC5	; 197
     8b0:	51 40       	sbci	r21, 0x01	; 1
     8b2:	48 17       	cp	r20, r24
     8b4:	59 07       	cpc	r21, r25
     8b6:	e4 f4       	brge	.+56     	; 0x8f0 <maze_solve+0x382>
		{
			// SECOND MAIN LOOP BODY  
			follow_segment();
     8b8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

			// Drive straight while slowing down, as before.
			set_motors(50,50);
     8bc:	62 e3       	ldi	r22, 0x32	; 50
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	82 e3       	ldi	r24, 0x32	; 50
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
			delay_ms(50);
     8c8:	82 e3       	ldi	r24, 0x32	; 50
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
			set_motors(40,40);
     8d0:	68 e2       	ldi	r22, 0x28	; 40
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	88 e2       	ldi	r24, 0x28	; 40
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
			delay_ms(200);
     8dc:	88 ec       	ldi	r24, 0xC8	; 200
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>

			// Make a turn according to the instruction stored in
			// path[i].
			turn(path[i]);
     8e4:	f8 01       	movw	r30, r16
     8e6:	81 91       	ld	r24, Z+
     8e8:	8f 01       	movw	r16, r30
     8ea:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <turn>
     8ee:	db cf       	rjmp	.-74     	; 0x8a6 <maze_solve+0x338>
		}
		
		// Follow the last segment up to the finish.
		follow_segment();
     8f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Now we should be at the finish!  Restart the loop.
	}
     8f4:	9d cf       	rjmp	.-198    	; 0x830 <maze_solve+0x2c2>

000008f6 <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     8f6:	8c 34       	cpi	r24, 0x4C	; 76
     8f8:	69 f0       	breq	.+26     	; 0x914 <__stack+0x15>
     8fa:	82 35       	cpi	r24, 0x52	; 82
     8fc:	81 f0       	breq	.+32     	; 0x91e <__stack+0x1f>
     8fe:	82 34       	cpi	r24, 0x42	; 66
     900:	c1 f4       	brne	.+48     	; 0x932 <__stack+0x33>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     902:	60 eb       	ldi	r22, 0xB0	; 176
     904:	7f ef       	ldi	r23, 0xFF	; 255
     906:	80 e5       	ldi	r24, 0x50	; 80
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		delay_ms(400);
     90e:	80 e9       	ldi	r24, 0x90	; 144
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0d c0       	rjmp	.+26     	; 0x92e <__stack+0x2f>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     914:	60 e5       	ldi	r22, 0x50	; 80
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	80 eb       	ldi	r24, 0xB0	; 176
     91a:	9f ef       	ldi	r25, 0xFF	; 255
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     91e:	60 eb       	ldi	r22, 0xB0	; 176
     920:	7f ef       	ldi	r23, 0xFF	; 255
     922:	80 e5       	ldi	r24, 0x50	; 80
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 27 0b 	call	0x164e	; 0x164e <set_motors>
		delay_ms(200);
     92a:	88 ec       	ldi	r24, 0xC8	; 200
     92c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     92e:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <delay_ms>
     932:	08 95       	ret

00000934 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     934:	ec e7       	ldi	r30, 0x7C	; 124
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	8f 7d       	andi	r24, 0xDF	; 223
     93c:	80 83       	st	Z, r24
     93e:	08 95       	ret

00000940 <_ZN15OrangutanAnalog7setModeEh>:
     940:	81 11       	cpse	r24, r1
     942:	03 c0       	rjmp	.+6      	; 0x94a <_ZN15OrangutanAnalog7setModeEh+0xa>
     944:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN15OrangutanAnalog7setModeEh.part.0>
     948:	08 95       	ret
     94a:	80 91 7c 00 	lds	r24, 0x007C
     94e:	80 62       	ori	r24, 0x20	; 32
     950:	80 93 7c 00 	sts	0x007C, r24
     954:	08 95       	ret

00000956 <_ZN15OrangutanAnalog7getModeEv>:
     956:	80 91 7c 00 	lds	r24, 0x007C
     95a:	85 fb       	bst	r24, 5
     95c:	88 27       	eor	r24, r24
     95e:	80 f9       	bld	r24, 0
     960:	08 95       	ret

00000962 <_ZN15OrangutanAnalog16conversionResultEv>:
     962:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN15OrangutanAnalog7getModeEv>
     966:	88 23       	and	r24, r24
     968:	21 f0       	breq	.+8      	; 0x972 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     96a:	80 91 79 00 	lds	r24, 0x0079
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	08 95       	ret
     972:	80 91 78 00 	lds	r24, 0x0078
     976:	90 91 79 00 	lds	r25, 0x0079
     97a:	08 95       	ret

0000097c <_ZN15OrangutanAnalog15startConversionEhh>:
     97c:	80 32       	cpi	r24, 0x20	; 32
     97e:	a0 f4       	brcc	.+40     	; 0x9a8 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     980:	97 e8       	ldi	r25, 0x87	; 135
     982:	90 93 7a 00 	sts	0x007A, r25
     986:	90 91 7c 00 	lds	r25, 0x007C
     98a:	66 23       	and	r22, r22
     98c:	11 f0       	breq	.+4      	; 0x992 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     98e:	90 6c       	ori	r25, 0xC0	; 192
     990:	02 c0       	rjmp	.+4      	; 0x996 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     992:	9f 77       	andi	r25, 0x7F	; 127
     994:	90 64       	ori	r25, 0x40	; 64
     996:	90 7e       	andi	r25, 0xE0	; 224
     998:	98 2b       	or	r25, r24
     99a:	90 93 7c 00 	sts	0x007C, r25
     99e:	80 91 7a 00 	lds	r24, 0x007A
     9a2:	80 64       	ori	r24, 0x40	; 64
     9a4:	80 93 7a 00 	sts	0x007A, r24
     9a8:	08 95       	ret

000009aa <_ZN15OrangutanAnalog11readAverageEhj>:
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	eb ed       	ldi	r30, 0xDB	; 219
     9b0:	f4 e0       	ldi	r31, 0x04	; 4
     9b2:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x14>
     9b6:	eb 01       	movw	r28, r22
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN15OrangutanAnalog15startConversionEhh>
     9be:	80 91 7a 00 	lds	r24, 0x007A
     9c2:	86 fd       	sbrc	r24, 6
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     9c6:	8e 01       	movw	r16, r28
     9c8:	c1 2c       	mov	r12, r1
     9ca:	d1 2c       	mov	r13, r1
     9cc:	76 01       	movw	r14, r12
     9ce:	80 91 7a 00 	lds	r24, 0x007A
     9d2:	80 64       	ori	r24, 0x40	; 64
     9d4:	80 93 7a 00 	sts	0x007A, r24
     9d8:	80 91 7a 00 	lds	r24, 0x007A
     9dc:	86 fd       	sbrc	r24, 6
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     9e0:	0e 94 b1 04 	call	0x962	; 0x962 <_ZN15OrangutanAnalog16conversionResultEv>
     9e4:	c8 0e       	add	r12, r24
     9e6:	d9 1e       	adc	r13, r25
     9e8:	e1 1c       	adc	r14, r1
     9ea:	f1 1c       	adc	r15, r1
     9ec:	01 50       	subi	r16, 0x01	; 1
     9ee:	11 09       	sbc	r17, r1
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	61 f7       	brne	.-40     	; 0x9ce <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     9f6:	ce 01       	movw	r24, r28
     9f8:	96 95       	lsr	r25
     9fa:	87 95       	ror	r24
     9fc:	c0 34       	cpi	r28, 0x40	; 64
     9fe:	d1 05       	cpc	r29, r1
     a00:	38 f4       	brcc	.+14     	; 0xa10 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     a02:	8c 0d       	add	r24, r12
     a04:	9d 1d       	adc	r25, r13
     a06:	be 01       	movw	r22, r28
     a08:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     a0c:	cb 01       	movw	r24, r22
     a0e:	0e c0       	rjmp	.+28     	; 0xa2c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     a10:	a7 01       	movw	r20, r14
     a12:	96 01       	movw	r18, r12
     a14:	28 0f       	add	r18, r24
     a16:	39 1f       	adc	r19, r25
     a18:	41 1d       	adc	r20, r1
     a1a:	51 1d       	adc	r21, r1
     a1c:	ca 01       	movw	r24, r20
     a1e:	b9 01       	movw	r22, r18
     a20:	9e 01       	movw	r18, r28
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
     a2a:	c9 01       	movw	r24, r18
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	e8 e0       	ldi	r30, 0x08	; 8
     a32:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x14>

00000a36 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	a0 91 00 01 	lds	r26, 0x0100
     a42:	b0 91 01 01 	lds	r27, 0x0101
     a46:	9c 01       	movw	r18, r24
     a48:	0e 94 c8 11 	call	0x2390	; 0x2390 <__umulhisi3>
     a4c:	6b 01       	movw	r12, r22
     a4e:	7c 01       	movw	r14, r24
     a50:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN15OrangutanAnalog7getModeEv>
     a54:	88 23       	and	r24, r24
     a56:	59 f0       	breq	.+22     	; 0xa6e <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	61 58       	subi	r22, 0x81	; 129
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	8f 4f       	sbci	r24, 0xFF	; 255
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	2f ef       	ldi	r18, 0xFF	; 255
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	0a c0       	rjmp	.+20     	; 0xa82 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     a6e:	c7 01       	movw	r24, r14
     a70:	b6 01       	movw	r22, r12
     a72:	61 50       	subi	r22, 0x01	; 1
     a74:	7e 4f       	sbci	r23, 0xFE	; 254
     a76:	8f 4f       	sbci	r24, 0xFF	; 255
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	2f ef       	ldi	r18, 0xFF	; 255
     a7c:	33 e0       	ldi	r19, 0x03	; 3
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
     a86:	c9 01       	movw	r24, r18
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     a92:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN15OrangutanAnalog11readAverageEhj>
     a96:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN15OrangutanAnalog12toMillivoltsEj>
     a9a:	08 95       	ret

00000a9c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN15OrangutanAnalog7getModeEv>
     aa6:	18 2f       	mov	r17, r24
     aa8:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN15OrangutanAnalog7setModeEh.part.0>
     aac:	6a e0       	ldi	r22, 0x0A	; 10
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	86 e0       	ldi	r24, 0x06	; 6
     ab2:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     ab6:	ec 01       	movw	r28, r24
     ab8:	81 2f       	mov	r24, r17
     aba:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN15OrangutanAnalog7setModeEh>
     abe:	ce 01       	movw	r24, r28
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	8c 0f       	add	r24, r28
     ac6:	9d 1f       	adc	r25, r29
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	08 95       	ret

00000ad6 <read_battery_millivolts_3pi>:
     ad6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     ada:	08 95       	ret

00000adc <_ZL16currentCharacterv>:
     adc:	90 91 63 01 	lds	r25, 0x0163
     ae0:	e0 91 5e 01 	lds	r30, 0x015E
     ae4:	f0 91 5f 01 	lds	r31, 0x015F
     ae8:	99 23       	and	r25, r25
     aea:	11 f0       	breq	.+4      	; 0xaf0 <_ZL16currentCharacterv+0x14>
     aec:	84 91       	lpm	r24, Z
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <_ZL16currentCharacterv+0x16>
     af0:	80 81       	ld	r24, Z
     af2:	2f eb       	ldi	r18, 0xBF	; 191
     af4:	28 0f       	add	r18, r24
     af6:	2a 31       	cpi	r18, 0x1A	; 26
     af8:	10 f4       	brcc	.+4      	; 0xafe <_ZL16currentCharacterv+0x22>
     afa:	80 5e       	subi	r24, 0xE0	; 224
     afc:	08 95       	ret
     afe:	80 32       	cpi	r24, 0x20	; 32
     b00:	49 f4       	brne	.+18     	; 0xb14 <_ZL16currentCharacterv+0x38>
     b02:	9f 01       	movw	r18, r30
     b04:	2f 5f       	subi	r18, 0xFF	; 255
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	30 93 5f 01 	sts	0x015F, r19
     b0c:	20 93 5e 01 	sts	0x015E, r18
     b10:	ef 2b       	or	r30, r31
     b12:	31 f7       	brne	.-52     	; 0xae0 <_ZL16currentCharacterv+0x4>
     b14:	08 95       	ret

00000b16 <_ZL9getNumberv>:
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     b20:	c0 e0       	ldi	r28, 0x00	; 0
     b22:	d0 e0       	ldi	r29, 0x00	; 0
     b24:	1a e0       	ldi	r17, 0x0A	; 10
     b26:	90 ed       	ldi	r25, 0xD0	; 208
     b28:	98 0f       	add	r25, r24
     b2a:	9a 30       	cpi	r25, 0x0A	; 10
     b2c:	b8 f4       	brcc	.+46     	; 0xb5c <_ZL9getNumberv+0x46>
     b2e:	9e 01       	movw	r18, r28
     b30:	12 9f       	mul	r17, r18
     b32:	e0 01       	movw	r28, r0
     b34:	13 9f       	mul	r17, r19
     b36:	d0 0d       	add	r29, r0
     b38:	11 24       	eor	r1, r1
     b3a:	c8 0f       	add	r28, r24
     b3c:	d1 1d       	adc	r29, r1
     b3e:	87 fd       	sbrc	r24, 7
     b40:	da 95       	dec	r29
     b42:	e0 97       	sbiw	r28, 0x30	; 48
     b44:	80 91 5e 01 	lds	r24, 0x015E
     b48:	90 91 5f 01 	lds	r25, 0x015F
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	90 93 5f 01 	sts	0x015F, r25
     b52:	80 93 5e 01 	sts	0x015E, r24
     b56:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     b5a:	e5 cf       	rjmp	.-54     	; 0xb26 <_ZL9getNumberv+0x10>
     b5c:	ce 01       	movw	r24, r28
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	08 95       	ret

00000b66 <_ZN15OrangutanBuzzer5init2Ev>:
     b66:	10 92 6f 00 	sts	0x006F, r1
     b6a:	83 e2       	ldi	r24, 0x23	; 35
     b6c:	80 93 80 00 	sts	0x0080, r24
     b70:	81 e1       	ldi	r24, 0x11	; 17
     b72:	80 93 81 00 	sts	0x0081, r24
     b76:	10 92 82 00 	sts	0x0082, r1
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	97 e2       	ldi	r25, 0x27	; 39
     b7e:	90 93 89 00 	sts	0x0089, r25
     b82:	80 93 88 00 	sts	0x0088, r24
     b86:	10 92 8b 00 	sts	0x008B, r1
     b8a:	10 92 8a 00 	sts	0x008A, r1
     b8e:	22 9a       	sbi	0x04, 2	; 4
     b90:	78 94       	sei
     b92:	08 95       	ret

00000b94 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	5c 01       	movw	r10, r24
     bac:	8b 01       	movw	r16, r22
     bae:	d4 2e       	mov	r13, r20
     bb0:	80 91 60 01 	lds	r24, 0x0160
     bb4:	81 11       	cpse	r24, r1
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 60 01 	sts	0x0160, r24
     bbe:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN15OrangutanBuzzer5init2Ev>
     bc2:	10 92 0b 01 	sts	0x010B, r1
     bc6:	b7 fe       	sbrs	r11, 7
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     bca:	e8 94       	clt
     bcc:	b7 f8       	bld	r11, 7
     bce:	2a e0       	ldi	r18, 0x0A	; 10
     bd0:	f2 2e       	mov	r15, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     bd4:	ff 24       	eor	r15, r15
     bd6:	f3 94       	inc	r15
     bd8:	e0 90 81 00 	lds	r14, 0x0081
     bdc:	2e 2d       	mov	r18, r14
     bde:	28 7f       	andi	r18, 0xF8	; 248
     be0:	e2 2e       	mov	r14, r18
     be2:	48 ec       	ldi	r20, 0xC8	; 200
     be4:	f4 9e       	mul	r15, r20
     be6:	c0 01       	movw	r24, r0
     be8:	11 24       	eor	r1, r1
     bea:	8a 15       	cp	r24, r10
     bec:	9b 05       	cpc	r25, r11
     bee:	e0 f4       	brcc	.+56     	; 0xc28 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     bf0:	e5 01       	movw	r28, r10
     bf2:	51 e1       	ldi	r21, 0x11	; 17
     bf4:	a5 16       	cp	r10, r21
     bf6:	57 e2       	ldi	r21, 0x27	; 39
     bf8:	b5 06       	cpc	r11, r21
     bfa:	10 f0       	brcs	.+4      	; 0xc00 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     bfc:	c0 e1       	ldi	r28, 0x10	; 16
     bfe:	d7 e2       	ldi	r29, 0x27	; 39
     c00:	be 01       	movw	r22, r28
     c02:	76 95       	lsr	r23
     c04:	67 95       	ror	r22
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	60 58       	subi	r22, 0x80	; 128
     c0c:	79 46       	sbci	r23, 0x69	; 105
     c0e:	87 46       	sbci	r24, 0x67	; 103
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	4e 01       	movw	r8, r28
     c14:	a1 2c       	mov	r10, r1
     c16:	b1 2c       	mov	r11, r1
     c18:	a5 01       	movw	r20, r10
     c1a:	94 01       	movw	r18, r8
     c1c:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
     c20:	59 01       	movw	r10, r18
     c22:	8e 2d       	mov	r24, r14
     c24:	81 60       	ori	r24, 0x01	; 1
     c26:	24 c0       	rjmp	.+72     	; 0xc70 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     c28:	c8 e2       	ldi	r28, 0x28	; 40
     c2a:	fc 9e       	mul	r15, r28
     c2c:	c0 2d       	mov	r28, r0
     c2e:	11 24       	eor	r1, r1
     c30:	d0 e0       	ldi	r29, 0x00	; 0
     c32:	ca 15       	cp	r28, r10
     c34:	db 05       	cpc	r29, r11
     c36:	08 f4       	brcc	.+2      	; 0xc3a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     c38:	e5 01       	movw	r28, r10
     c3a:	be 01       	movw	r22, r28
     c3c:	76 95       	lsr	r23
     c3e:	67 95       	ror	r22
     c40:	9e 01       	movw	r18, r28
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	f8 12       	cpse	r15, r24
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	60 5e       	subi	r22, 0xE0	; 224
     c52:	73 44       	sbci	r23, 0x43	; 67
     c54:	81 44       	sbci	r24, 0x41	; 65
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	60 53       	subi	r22, 0x30	; 48
     c60:	7d 4e       	sbci	r23, 0xED	; 237
     c62:	8c 4e       	sbci	r24, 0xEC	; 236
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
     c6a:	59 01       	movw	r10, r18
     c6c:	8e 2d       	mov	r24, r14
     c6e:	82 60       	ori	r24, 0x02	; 2
     c70:	88 2e       	mov	r8, r24
     c72:	2a e0       	ldi	r18, 0x0A	; 10
     c74:	f2 12       	cpse	r15, r18
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     c78:	ce 01       	movw	r24, r28
     c7a:	05 96       	adiw	r24, 0x05	; 5
     c7c:	6a e0       	ldi	r22, 0x0A	; 10
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     c84:	eb 01       	movw	r28, r22
     c86:	c8 3e       	cpi	r28, 0xE8	; 232
     c88:	43 e0       	ldi	r20, 0x03	; 3
     c8a:	d4 07       	cpc	r29, r20
     c8c:	59 f0       	breq	.+22     	; 0xca4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     c8e:	98 01       	movw	r18, r16
     c90:	de 01       	movw	r26, r28
     c92:	0e 94 c8 11 	call	0x2390	; 0x2390 <__umulhisi3>
     c96:	28 ee       	ldi	r18, 0xE8	; 232
     c98:	33 e0       	ldi	r19, 0x03	; 3
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divmodsi4>
     ca2:	89 01       	movw	r16, r18
     ca4:	10 92 6f 00 	sts	0x006F, r1
     ca8:	80 92 81 00 	sts	0x0081, r8
     cac:	b0 92 89 00 	sts	0x0089, r11
     cb0:	a0 92 88 00 	sts	0x0088, r10
     cb4:	20 91 88 00 	lds	r18, 0x0088
     cb8:	30 91 89 00 	lds	r19, 0x0089
     cbc:	4d 2d       	mov	r20, r13
     cbe:	40 31       	cpi	r20, 0x10	; 16
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     cc2:	4f e0       	ldi	r20, 0x0F	; 15
     cc4:	80 e1       	ldi	r24, 0x10	; 16
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	84 1b       	sub	r24, r20
     cca:	91 09       	sbc	r25, r1
     ccc:	a9 01       	movw	r20, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     cd0:	56 95       	lsr	r21
     cd2:	47 95       	ror	r20
     cd4:	8a 95       	dec	r24
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     cd8:	50 93 8b 00 	sts	0x008B, r21
     cdc:	40 93 8a 00 	sts	0x008A, r20
     ce0:	10 93 66 01 	sts	0x0166, r17
     ce4:	00 93 65 01 	sts	0x0165, r16
     ce8:	86 b3       	in	r24, 0x16	; 22
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	86 bb       	out	0x16, r24	; 22
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 6f 00 	sts	0x006F, r24
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	9f 90       	pop	r9
     d08:	8f 90       	pop	r8
     d0a:	08 95       	ret

00000d0c <_ZN15OrangutanBuzzer8playNoteEhjh>:
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	eb 01       	movw	r28, r22
     d12:	8f 3f       	cpi	r24, 0xFF	; 255
     d14:	11 f0       	breq	.+4      	; 0xd1a <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     d16:	41 11       	cpse	r20, r1
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	be 01       	movw	r22, r28
     d1e:	88 ee       	ldi	r24, 0xE8	; 232
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	43 c0       	rjmp	.+134    	; 0xdaa <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     d24:	81 31       	cpi	r24, 0x11	; 17
     d26:	30 f0       	brcs	.+12     	; 0xd34 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     d28:	50 ef       	ldi	r21, 0xF0	; 240
     d2a:	58 0f       	add	r21, r24
     d2c:	50 36       	cpi	r21, 0x60	; 96
     d2e:	18 f0       	brcs	.+6      	; 0xd36 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     d30:	5f e5       	ldi	r21, 0x5F	; 95
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	85 2f       	mov	r24, r21
     d38:	6c e0       	ldi	r22, 0x0C	; 12
     d3a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
     d3e:	68 2f       	mov	r22, r24
     d40:	74 ef       	ldi	r23, 0xF4	; 244
     d42:	76 03       	mulsu	r23, r22
     d44:	90 01       	movw	r18, r0
     d46:	11 24       	eor	r1, r1
     d48:	25 0f       	add	r18, r21
     d4a:	31 1d       	adc	r19, r1
     d4c:	2c 30       	cpi	r18, 0x0C	; 12
     d4e:	31 05       	cpc	r19, r1
     d50:	40 f4       	brcc	.+16     	; 0xd62 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     d52:	f9 01       	movw	r30, r18
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	e2 5e       	subi	r30, 0xE2	; 226
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	20 81       	ld	r18, Z
     d5e:	31 81       	ldd	r19, Z+1	; 0x01
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	87 30       	cpi	r24, 0x07	; 7
     d68:	81 f0       	breq	.+32     	; 0xd8a <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     d6a:	08 2e       	mov	r0, r24
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	28 f0       	brcs	.+10     	; 0xd84 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     d7a:	c9 01       	movw	r24, r18
     d7c:	05 96       	adiw	r24, 0x05	; 5
     d7e:	6a e0       	ldi	r22, 0x0A	; 10
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     d84:	c9 01       	movw	r24, r18
     d86:	90 58       	subi	r25, 0x80	; 128
     d88:	0c c0       	rjmp	.+24     	; 0xda2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     d8a:	c9 01       	movw	r24, r18
     d8c:	36 e0       	ldi	r19, 0x06	; 6
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	3a 95       	dec	r19
     d94:	e1 f7       	brne	.-8      	; 0xd8e <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     d96:	02 96       	adiw	r24, 0x02	; 2
     d98:	65 e0       	ldi	r22, 0x05	; 5
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     da0:	cb 01       	movw	r24, r22
     da2:	40 31       	cpi	r20, 0x10	; 16
     da4:	08 f0       	brcs	.+2      	; 0xda8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     da6:	4f e0       	ldi	r20, 0x0F	; 15
     da8:	be 01       	movw	r22, r28
     daa:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <_ZL8nextNotev>:
     db4:	a2 e0       	ldi	r26, 0x02	; 2
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e0 ee       	ldi	r30, 0xE0	; 224
     dba:	f6 e0       	ldi	r31, 0x06	; 6
     dbc:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x4>
     dc0:	90 90 0a 01 	lds	r9, 0x010A
     dc4:	80 91 62 01 	lds	r24, 0x0162
     dc8:	88 23       	and	r24, r24
     dca:	21 f0       	breq	.+8      	; 0xdd4 <_ZL8nextNotev+0x20>
     dcc:	60 91 61 01 	lds	r22, 0x0161
     dd0:	61 11       	cpse	r22, r1
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <_ZL8nextNotev+0x4e>
     dd4:	77 24       	eor	r7, r7
     dd6:	73 94       	inc	r7
     dd8:	b0 ec       	ldi	r27, 0xC0	; 192
     dda:	ab 2e       	mov	r10, r27
     ddc:	bd e5       	ldi	r27, 0x5D	; 93
     dde:	bb 2e       	mov	r11, r27
     de0:	1a e0       	ldi	r17, 0x0A	; 10
     de2:	61 2e       	mov	r6, r17
     de4:	04 e0       	ldi	r16, 0x04	; 4
     de6:	80 2e       	mov	r8, r16
     de8:	80 ed       	ldi	r24, 0xD0	; 208
     dea:	c8 2e       	mov	r12, r24
     dec:	87 e0       	ldi	r24, 0x07	; 7
     dee:	d8 2e       	mov	r13, r24
     df0:	94 e0       	ldi	r25, 0x04	; 4
     df2:	e9 2e       	mov	r14, r25
     df4:	f1 2c       	mov	r15, r1
     df6:	04 ef       	ldi	r16, 0xF4	; 244
     df8:	11 e0       	ldi	r17, 0x01	; 1
     dfa:	2f e0       	ldi	r18, 0x0F	; 15
     dfc:	42 2e       	mov	r4, r18
     dfe:	51 2c       	mov	r5, r1
     e00:	15 c0       	rjmp	.+42     	; 0xe2c <_ZL8nextNotev+0x78>
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	88 ee       	ldi	r24, 0xE8	; 232
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     e0e:	10 92 61 01 	sts	0x0161, r1
     e12:	17 c1       	rjmp	.+558    	; 0x1042 <_ZL8nextNotev+0x28e>
     e14:	86 36       	cpi	r24, 0x66	; 102
     e16:	d4 f5       	brge	.+116    	; 0xe8c <_ZL8nextNotev+0xd8>
     e18:	81 36       	cpi	r24, 0x61	; 97
     e1a:	09 f4       	brne	.+2      	; 0xe1e <_ZL8nextNotev+0x6a>
     e1c:	a9 c0       	rjmp	.+338    	; 0xf70 <_ZL8nextNotev+0x1bc>
     e1e:	7c f5       	brge	.+94     	; 0xe7e <_ZL8nextNotev+0xca>
     e20:	8c 33       	cpi	r24, 0x3C	; 60
     e22:	09 f4       	brne	.+2      	; 0xe26 <_ZL8nextNotev+0x72>
     e24:	60 c0       	rjmp	.+192    	; 0xee6 <_ZL8nextNotev+0x132>
     e26:	8e 33       	cpi	r24, 0x3E	; 62
     e28:	81 f4       	brne	.+32     	; 0xe4a <_ZL8nextNotev+0x96>
     e2a:	93 94       	inc	r9
     e2c:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     e30:	20 91 5e 01 	lds	r18, 0x015E
     e34:	30 91 5f 01 	lds	r19, 0x015F
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	30 93 5f 01 	sts	0x015F, r19
     e40:	20 93 5e 01 	sts	0x015E, r18
     e44:	85 36       	cpi	r24, 0x65	; 101
     e46:	31 f7       	brne	.-52     	; 0xe14 <_ZL8nextNotev+0x60>
     e48:	52 c0       	rjmp	.+164    	; 0xeee <_ZL8nextNotev+0x13a>
     e4a:	81 32       	cpi	r24, 0x21	; 33
     e4c:	09 f0       	breq	.+2      	; 0xe50 <_ZL8nextNotev+0x9c>
     e4e:	8b c0       	rjmp	.+278    	; 0xf66 <_ZL8nextNotev+0x1b2>
     e50:	80 92 0a 01 	sts	0x010A, r8
     e54:	d0 92 09 01 	sts	0x0109, r13
     e58:	c0 92 08 01 	sts	0x0108, r12
     e5c:	f0 92 07 01 	sts	0x0107, r15
     e60:	e0 92 06 01 	sts	0x0106, r14
     e64:	10 93 05 01 	sts	0x0105, r17
     e68:	00 93 04 01 	sts	0x0104, r16
     e6c:	50 92 03 01 	sts	0x0103, r5
     e70:	40 92 02 01 	sts	0x0102, r4
     e74:	10 92 62 01 	sts	0x0162, r1
     e78:	a4 e0       	ldi	r26, 0x04	; 4
     e7a:	9a 2e       	mov	r9, r26
     e7c:	d7 cf       	rjmp	.-82     	; 0xe2c <_ZL8nextNotev+0x78>
     e7e:	83 36       	cpi	r24, 0x63	; 99
     e80:	a1 f1       	breq	.+104    	; 0xeea <_ZL8nextNotev+0x136>
     e82:	0c f4       	brge	.+2      	; 0xe86 <_ZL8nextNotev+0xd2>
     e84:	78 c0       	rjmp	.+240    	; 0xf76 <_ZL8nextNotev+0x1c2>
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	77 c0       	rjmp	.+238    	; 0xf7a <_ZL8nextNotev+0x1c6>
     e8c:	8d 36       	cpi	r24, 0x6D	; 109
     e8e:	c1 f1       	breq	.+112    	; 0xf00 <_ZL8nextNotev+0x14c>
     e90:	94 f4       	brge	.+36     	; 0xeb6 <_ZL8nextNotev+0x102>
     e92:	87 36       	cpi	r24, 0x67	; 103
     e94:	91 f1       	breq	.+100    	; 0xefa <_ZL8nextNotev+0x146>
     e96:	74 f1       	brlt	.+92     	; 0xef4 <_ZL8nextNotev+0x140>
     e98:	8c 36       	cpi	r24, 0x6C	; 108
     e9a:	09 f0       	breq	.+2      	; 0xe9e <_ZL8nextNotev+0xea>
     e9c:	64 c0       	rjmp	.+200    	; 0xf66 <_ZL8nextNotev+0x1b2>
     e9e:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZL9getNumberv>
     ea2:	bc 01       	movw	r22, r24
     ea4:	90 93 07 01 	sts	0x0107, r25
     ea8:	80 93 06 01 	sts	0x0106, r24
     eac:	80 91 08 01 	lds	r24, 0x0108
     eb0:	90 91 09 01 	lds	r25, 0x0109
     eb4:	51 c0       	rjmp	.+162    	; 0xf58 <_ZL8nextNotev+0x1a4>
     eb6:	82 37       	cpi	r24, 0x72	; 114
     eb8:	c9 f1       	breq	.+114    	; 0xf2c <_ZL8nextNotev+0x178>
     eba:	4c f4       	brge	.+18     	; 0xece <_ZL8nextNotev+0x11a>
     ebc:	8f 36       	cpi	r24, 0x6F	; 111
     ebe:	09 f0       	breq	.+2      	; 0xec2 <_ZL8nextNotev+0x10e>
     ec0:	52 c0       	rjmp	.+164    	; 0xf66 <_ZL8nextNotev+0x1b2>
     ec2:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZL9getNumberv>
     ec6:	98 2e       	mov	r9, r24
     ec8:	80 93 0a 01 	sts	0x010A, r24
     ecc:	af cf       	rjmp	.-162    	; 0xe2c <_ZL8nextNotev+0x78>
     ece:	84 37       	cpi	r24, 0x74	; 116
     ed0:	81 f1       	breq	.+96     	; 0xf32 <_ZL8nextNotev+0x17e>
     ed2:	86 37       	cpi	r24, 0x76	; 118
     ed4:	09 f0       	breq	.+2      	; 0xed8 <_ZL8nextNotev+0x124>
     ed6:	47 c0       	rjmp	.+142    	; 0xf66 <_ZL8nextNotev+0x1b2>
     ed8:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZL9getNumberv>
     edc:	90 93 03 01 	sts	0x0103, r25
     ee0:	80 93 02 01 	sts	0x0102, r24
     ee4:	a3 cf       	rjmp	.-186    	; 0xe2c <_ZL8nextNotev+0x78>
     ee6:	9a 94       	dec	r9
     ee8:	a1 cf       	rjmp	.-190    	; 0xe2c <_ZL8nextNotev+0x78>
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	20 c0       	rjmp	.+64     	; 0xf2e <_ZL8nextNotev+0x17a>
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	43 c0       	rjmp	.+134    	; 0xf7a <_ZL8nextNotev+0x1c6>
     ef4:	10 e0       	ldi	r17, 0x00	; 0
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	40 c0       	rjmp	.+128    	; 0xf7a <_ZL8nextNotev+0x1c6>
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	87 e0       	ldi	r24, 0x07	; 7
     efe:	3d c0       	rjmp	.+122    	; 0xf7a <_ZL8nextNotev+0x1c6>
     f00:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     f04:	8c 36       	cpi	r24, 0x6C	; 108
     f06:	19 f4       	brne	.+6      	; 0xf0e <_ZL8nextNotev+0x15a>
     f08:	10 92 62 01 	sts	0x0162, r1
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <_ZL8nextNotev+0x162>
     f0e:	70 92 62 01 	sts	0x0162, r7
     f12:	10 92 61 01 	sts	0x0161, r1
     f16:	20 91 5e 01 	lds	r18, 0x015E
     f1a:	30 91 5f 01 	lds	r19, 0x015F
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	30 93 5f 01 	sts	0x015F, r19
     f26:	20 93 5e 01 	sts	0x015E, r18
     f2a:	80 cf       	rjmp	.-256    	; 0xe2c <_ZL8nextNotev+0x78>
     f2c:	11 e0       	ldi	r17, 0x01	; 1
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	24 c0       	rjmp	.+72     	; 0xf7a <_ZL8nextNotev+0x1c6>
     f32:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZL9getNumberv>
     f36:	bc 01       	movw	r22, r24
     f38:	c5 01       	movw	r24, r10
     f3a:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     f3e:	66 9e       	mul	r6, r22
     f40:	c0 01       	movw	r24, r0
     f42:	67 9e       	mul	r6, r23
     f44:	90 0d       	add	r25, r0
     f46:	11 24       	eor	r1, r1
     f48:	90 93 09 01 	sts	0x0109, r25
     f4c:	80 93 08 01 	sts	0x0108, r24
     f50:	60 91 06 01 	lds	r22, 0x0106
     f54:	70 91 07 01 	lds	r23, 0x0107
     f58:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     f5c:	70 93 05 01 	sts	0x0105, r23
     f60:	60 93 04 01 	sts	0x0104, r22
     f64:	63 cf       	rjmp	.-314    	; 0xe2c <_ZL8nextNotev+0x78>
     f66:	10 92 5f 01 	sts	0x015F, r1
     f6a:	10 92 5e 01 	sts	0x015E, r1
     f6e:	69 c0       	rjmp	.+210    	; 0x1042 <_ZL8nextNotev+0x28e>
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	89 e0       	ldi	r24, 0x09	; 9
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <_ZL8nextNotev+0x1c6>
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	8b e0       	ldi	r24, 0x0B	; 11
     f7a:	08 2f       	mov	r16, r24
     f7c:	9c e0       	ldi	r25, 0x0C	; 12
     f7e:	99 9e       	mul	r9, r25
     f80:	00 0d       	add	r16, r0
     f82:	11 24       	eor	r1, r1
     f84:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     f88:	98 2f       	mov	r25, r24
     f8a:	97 7f       	andi	r25, 0xF7	; 247
     f8c:	93 32       	cpi	r25, 0x23	; 35
     f8e:	61 f4       	brne	.+24     	; 0xfa8 <_ZL8nextNotev+0x1f4>
     f90:	20 91 5e 01 	lds	r18, 0x015E
     f94:	30 91 5f 01 	lds	r19, 0x015F
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	30 93 5f 01 	sts	0x015F, r19
     fa0:	20 93 5e 01 	sts	0x015E, r18
     fa4:	0f 5f       	subi	r16, 0xFF	; 255
     fa6:	ee cf       	rjmp	.-36     	; 0xf84 <_ZL8nextNotev+0x1d0>
     fa8:	8d 32       	cpi	r24, 0x2D	; 45
     faa:	71 f4       	brne	.+28     	; 0xfc8 <_ZL8nextNotev+0x214>
     fac:	20 91 5e 01 	lds	r18, 0x015E
     fb0:	30 91 5f 01 	lds	r19, 0x015F
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	30 93 5f 01 	sts	0x015F, r19
     fbc:	20 93 5e 01 	sts	0x015E, r18
     fc0:	01 50       	subi	r16, 0x01	; 1
     fc2:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     fc6:	f0 cf       	rjmp	.-32     	; 0xfa8 <_ZL8nextNotev+0x1f4>
     fc8:	60 91 04 01 	lds	r22, 0x0104
     fcc:	70 91 05 01 	lds	r23, 0x0105
     fd0:	81 53       	subi	r24, 0x31	; 49
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	50 f4       	brcc	.+20     	; 0xfea <_ZL8nextNotev+0x236>
     fd6:	e0 90 08 01 	lds	r14, 0x0108
     fda:	f0 90 09 01 	lds	r15, 0x0109
     fde:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZL9getNumberv>
     fe2:	bc 01       	movw	r22, r24
     fe4:	c7 01       	movw	r24, r14
     fe6:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
     fea:	7b 01       	movw	r14, r22
     fec:	f6 94       	lsr	r15
     fee:	e7 94       	ror	r14
     ff0:	69 83       	std	Y+1, r22	; 0x01
     ff2:	7a 83       	std	Y+2, r23	; 0x02
     ff4:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZL16currentCharacterv>
     ff8:	69 81       	ldd	r22, Y+1	; 0x01
     ffa:	7a 81       	ldd	r23, Y+2	; 0x02
     ffc:	8e 32       	cpi	r24, 0x2E	; 46
     ffe:	69 f4       	brne	.+26     	; 0x101a <_ZL8nextNotev+0x266>
    1000:	20 91 5e 01 	lds	r18, 0x015E
    1004:	30 91 5f 01 	lds	r19, 0x015F
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	30 93 5f 01 	sts	0x015F, r19
    1010:	20 93 5e 01 	sts	0x015E, r18
    1014:	6e 0d       	add	r22, r14
    1016:	7f 1d       	adc	r23, r15
    1018:	e9 cf       	rjmp	.-46     	; 0xfec <_ZL8nextNotev+0x238>
    101a:	80 91 62 01 	lds	r24, 0x0162
    101e:	88 23       	and	r24, r24
    1020:	39 f0       	breq	.+14     	; 0x1030 <_ZL8nextNotev+0x27c>
    1022:	9b 01       	movw	r18, r22
    1024:	36 95       	lsr	r19
    1026:	27 95       	ror	r18
    1028:	20 93 61 01 	sts	0x0161, r18
    102c:	62 1b       	sub	r22, r18
    102e:	71 09       	sbc	r23, r1
    1030:	40 91 02 01 	lds	r20, 0x0102
    1034:	11 23       	and	r17, r17
    1036:	11 f0       	breq	.+4      	; 0x103c <_ZL8nextNotev+0x288>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	01 c0       	rjmp	.+2      	; 0x103e <_ZL8nextNotev+0x28a>
    103c:	80 2f       	mov	r24, r16
    103e:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN15OrangutanBuzzer8playNoteEhjh>
    1042:	22 96       	adiw	r28, 0x02	; 2
    1044:	e0 e1       	ldi	r30, 0x10	; 16
    1046:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x4>

0000104a <__vector_13>:
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
    106c:	80 91 65 01 	lds	r24, 0x0165
    1070:	90 91 66 01 	lds	r25, 0x0166
    1074:	9c 01       	movw	r18, r24
    1076:	21 50       	subi	r18, 0x01	; 1
    1078:	31 09       	sbc	r19, r1
    107a:	30 93 66 01 	sts	0x0166, r19
    107e:	20 93 65 01 	sts	0x0165, r18
    1082:	89 2b       	or	r24, r25
    1084:	11 f5       	brne	.+68     	; 0x10ca <__vector_13+0x80>
    1086:	10 92 6f 00 	sts	0x006F, r1
    108a:	78 94       	sei
    108c:	80 91 81 00 	lds	r24, 0x0081
    1090:	88 7f       	andi	r24, 0xF8	; 248
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	80 93 81 00 	sts	0x0081, r24
    1098:	80 e1       	ldi	r24, 0x10	; 16
    109a:	97 e2       	ldi	r25, 0x27	; 39
    109c:	90 93 89 00 	sts	0x0089, r25
    10a0:	80 93 88 00 	sts	0x0088, r24
    10a4:	10 92 8b 00 	sts	0x008B, r1
    10a8:	10 92 8a 00 	sts	0x008A, r1
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 0b 01 	sts	0x010B, r24
    10b2:	80 91 5e 01 	lds	r24, 0x015E
    10b6:	90 91 5f 01 	lds	r25, 0x015F
    10ba:	89 2b       	or	r24, r25
    10bc:	31 f0       	breq	.+12     	; 0x10ca <__vector_13+0x80>
    10be:	80 91 64 01 	lds	r24, 0x0164
    10c2:	81 11       	cpse	r24, r1
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <__vector_13+0x80>
    10c6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZL8nextNotev>
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <_ZN15OrangutanBuzzer9isPlayingEv>:
    10ec:	80 91 0b 01 	lds	r24, 0x010B
    10f0:	88 23       	and	r24, r24
    10f2:	49 f0       	breq	.+18     	; 0x1106 <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	20 91 5e 01 	lds	r18, 0x015E
    10fa:	30 91 5f 01 	lds	r19, 0x015F
    10fe:	23 2b       	or	r18, r19
    1100:	19 f4       	brne	.+6      	; 0x1108 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	08 95       	ret

0000110a <is_playing>:
    110a:	0e 94 76 08 	call	0x10ec	; 0x10ec <_ZN15OrangutanBuzzer9isPlayingEv>
    110e:	08 95       	ret

00001110 <_ZN15OrangutanBuzzer4playEPKc>:
    1110:	10 92 6f 00 	sts	0x006F, r1
    1114:	90 93 5f 01 	sts	0x015F, r25
    1118:	80 93 5e 01 	sts	0x015E, r24
    111c:	10 92 63 01 	sts	0x0163, r1
    1120:	10 92 61 01 	sts	0x0161, r1
    1124:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZL8nextNotev>
    1128:	08 95       	ret

0000112a <play>:
    112a:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN15OrangutanBuzzer4playEPKc>
    112e:	08 95       	ret

00001130 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1130:	10 92 6f 00 	sts	0x006F, r1
    1134:	90 93 5f 01 	sts	0x015F, r25
    1138:	80 93 5e 01 	sts	0x015E, r24
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 63 01 	sts	0x0163, r24
    1142:	10 92 61 01 	sts	0x0161, r1
    1146:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZL8nextNotev>
    114a:	08 95       	ret

0000114c <play_from_program_space>:
    114c:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1150:	08 95       	ret

00001152 <delay_us.constprop.0>:
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	6f 93       	push	r22
    1158:	64 e0       	ldi	r22, 0x04	; 4
    115a:	6a 95       	dec	r22
    115c:	f1 f7       	brne	.-4      	; 0x115a <delay_us.constprop.0+0x8>
    115e:	6f 91       	pop	r22
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	c9 f7       	brne	.-14     	; 0x1156 <delay_us.constprop.0+0x4>
    1164:	08 95       	ret

00001166 <_ZN12OrangutanLCD8busyWaitEv>:
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	1a b1       	in	r17, 0x0a	; 10
    1170:	57 98       	cbi	0x0a, 7	; 10
    1172:	5a 98       	cbi	0x0b, 2	; 11
    1174:	28 9a       	sbi	0x05, 0	; 5
    1176:	c0 e0       	ldi	r28, 0x00	; 0
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    117a:	0e 94 a9 08 	call	0x1152	; 0x1152 <delay_us.constprop.0>
    117e:	5c 9a       	sbi	0x0b, 4	; 11
    1180:	0e 94 a9 08 	call	0x1152	; 0x1152 <delay_us.constprop.0>
    1184:	09 b1       	in	r16, 0x09	; 9
    1186:	5c 98       	cbi	0x0b, 4	; 11
    1188:	0e 94 a9 08 	call	0x1152	; 0x1152 <delay_us.constprop.0>
    118c:	5c 9a       	sbi	0x0b, 4	; 11
    118e:	0e 94 a9 08 	call	0x1152	; 0x1152 <delay_us.constprop.0>
    1192:	5c 98       	cbi	0x0b, 4	; 11
    1194:	24 96       	adiw	r28, 0x04	; 4
    1196:	07 ff       	sbrs	r16, 7
    1198:	10 c0       	rjmp	.+32     	; 0x11ba <_ZN12OrangutanLCD8busyWaitEv+0x54>
    119a:	ae 01       	movw	r20, r28
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 91 67 01 	lds	r24, 0x0167
    11a4:	90 91 68 01 	lds	r25, 0x0168
    11a8:	a0 91 69 01 	lds	r26, 0x0169
    11ac:	b0 91 6a 01 	lds	r27, 0x016A
    11b0:	48 17       	cp	r20, r24
    11b2:	59 07       	cpc	r21, r25
    11b4:	6a 07       	cpc	r22, r26
    11b6:	7b 07       	cpc	r23, r27
    11b8:	00 f3       	brcs	.-64     	; 0x117a <_ZN12OrangutanLCD8busyWaitEv+0x14>
    11ba:	1a b9       	out	0x0a, r17	; 10
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <_ZN12OrangutanLCD8sendDataEh>:
    11c6:	95 b1       	in	r25, 0x05	; 5
    11c8:	28 2f       	mov	r18, r24
    11ca:	21 70       	andi	r18, 0x01	; 1
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	48 2f       	mov	r20, r24
    11d4:	46 70       	andi	r20, 0x06	; 6
    11d6:	68 e0       	ldi	r22, 0x08	; 8
    11d8:	46 9f       	mul	r20, r22
    11da:	a0 01       	movw	r20, r0
    11dc:	11 24       	eor	r1, r1
    11de:	24 2b       	or	r18, r20
    11e0:	9d 7c       	andi	r25, 0xCD	; 205
    11e2:	29 2b       	or	r18, r25
    11e4:	25 b9       	out	0x05, r18	; 5
    11e6:	9b b1       	in	r25, 0x0b	; 11
    11e8:	88 70       	andi	r24, 0x08	; 8
    11ea:	82 95       	swap	r24
    11ec:	80 7f       	andi	r24, 0xF0	; 240
    11ee:	9f 77       	andi	r25, 0x7F	; 127
    11f0:	89 2b       	or	r24, r25
    11f2:	8b b9       	out	0x0b, r24	; 11
    11f4:	5c 9a       	sbi	0x0b, 4	; 11
    11f6:	0e 94 a9 08 	call	0x1152	; 0x1152 <delay_us.constprop.0>
    11fa:	5c 98       	cbi	0x0b, 4	; 11
    11fc:	0e 94 a9 08 	call	0x1152	; 0x1152 <delay_us.constprop.0>
    1200:	08 95       	ret

00001202 <_ZN12OrangutanLCD4sendEhhh>:
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e7 e0       	ldi	r30, 0x07	; 7
    1208:	f9 e0       	ldi	r31, 0x09	; 9
    120a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x16>
    120e:	c8 2f       	mov	r28, r24
    1210:	d6 2e       	mov	r13, r22
    1212:	e4 2e       	mov	r14, r20
    1214:	80 91 29 02 	lds	r24, 0x0229
    1218:	81 11       	cpse	r24, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <_ZN12OrangutanLCD4sendEhhh+0x24>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 29 02 	sts	0x0229, r24
    1222:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN12OrangutanLCD5init2Ev>
    1226:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8busyWaitEv>
    122a:	14 b1       	in	r17, 0x04	; 4
    122c:	d5 b1       	in	r29, 0x05	; 5
    122e:	fa b0       	in	r15, 0x0a	; 10
    1230:	0b b1       	in	r16, 0x0b	; 11
    1232:	28 98       	cbi	0x05, 0	; 5
    1234:	dd 20       	and	r13, r13
    1236:	11 f0       	breq	.+4      	; 0x123c <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1238:	5a 9a       	sbi	0x0b, 2	; 11
    123a:	01 c0       	rjmp	.+2      	; 0x123e <_ZN12OrangutanLCD4sendEhhh+0x3c>
    123c:	5a 98       	cbi	0x0b, 2	; 11
    123e:	94 b1       	in	r25, 0x04	; 4
    1240:	92 63       	ori	r25, 0x32	; 50
    1242:	94 b9       	out	0x04, r25	; 4
    1244:	57 9a       	sbi	0x0a, 7	; 10
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	e8 16       	cp	r14, r24
    124a:	29 f0       	breq	.+10     	; 0x1256 <_ZN12OrangutanLCD4sendEhhh+0x54>
    124c:	8c 2f       	mov	r24, r28
    124e:	82 95       	swap	r24
    1250:	8f 70       	andi	r24, 0x0F	; 15
    1252:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN12OrangutanLCD8sendDataEh>
    1256:	8c 2f       	mov	r24, r28
    1258:	8f 70       	andi	r24, 0x0F	; 15
    125a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN12OrangutanLCD8sendDataEh>
    125e:	fa b8       	out	0x0a, r15	; 10
    1260:	0b b9       	out	0x0b, r16	; 11
    1262:	14 b9       	out	0x04, r17	; 4
    1264:	d5 b9       	out	0x05, r29	; 5
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	e7 e0       	ldi	r30, 0x07	; 7
    126c:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x16>

00001270 <_ZN12OrangutanLCD8send_cmdEh>:
    1270:	42 e0       	ldi	r20, 0x02	; 2
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN12OrangutanLCD4sendEhhh>
    1278:	08 95       	ret

0000127a <_ZN12OrangutanLCD9send_dataEh>:
    127a:	42 e0       	ldi	r20, 0x02	; 2
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN12OrangutanLCD4sendEhhh>
    1282:	08 95       	ret

00001284 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    1284:	a1 e0       	ldi	r26, 0x01	; 1
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e4       	ldi	r30, 0x48	; 72
    128a:	f9 e0       	ldi	r31, 0x09	; 9
    128c:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x18>
    1290:	8c 01       	movw	r16, r24
    1292:	66 0f       	add	r22, r22
    1294:	66 0f       	add	r22, r22
    1296:	66 0f       	add	r22, r22
    1298:	e1 2c       	mov	r14, r1
    129a:	f1 2c       	mov	r15, r1
    129c:	8e 2d       	mov	r24, r14
    129e:	86 0f       	add	r24, r22
    12a0:	80 64       	ori	r24, 0x40	; 64
    12a2:	69 83       	std	Y+1, r22	; 0x01
    12a4:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    12a8:	f8 01       	movw	r30, r16
    12aa:	ee 0d       	add	r30, r14
    12ac:	ff 1d       	adc	r31, r15
    12ae:	84 91       	lpm	r24, Z
    12b0:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN12OrangutanLCD9send_dataEh>
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	e8 1a       	sub	r14, r24
    12b8:	f8 0a       	sbc	r15, r24
    12ba:	69 81       	ldd	r22, Y+1	; 0x01
    12bc:	e8 e0       	ldi	r30, 0x08	; 8
    12be:	ee 16       	cp	r14, r30
    12c0:	f1 04       	cpc	r15, r1
    12c2:	61 f7       	brne	.-40     	; 0x129c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    12c4:	21 96       	adiw	r28, 0x01	; 1
    12c6:	e6 e0       	ldi	r30, 0x06	; 6
    12c8:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

000012cc <lcd_load_custom_character>:
    12cc:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    12d0:	08 95       	ret

000012d2 <print_character>:
    12d2:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN12OrangutanLCD9send_dataEh>
    12d6:	08 95       	ret

000012d8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN12OrangutanLCD4sendEhhh>
    12e0:	08 95       	ret

000012e2 <_ZN12OrangutanLCD5init2Ev>:
    12e2:	80 e1       	ldi	r24, 0x10	; 16
    12e4:	97 e2       	ldi	r25, 0x27	; 39
    12e6:	a0 e0       	ldi	r26, 0x00	; 0
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	80 93 67 01 	sts	0x0167, r24
    12ee:	90 93 68 01 	sts	0x0168, r25
    12f2:	a0 93 69 01 	sts	0x0169, r26
    12f6:	b0 93 6a 01 	sts	0x016A, r27
    12fa:	52 9a       	sbi	0x0a, 2	; 10
    12fc:	20 9a       	sbi	0x04, 0	; 4
    12fe:	54 9a       	sbi	0x0a, 4	; 10
    1300:	8e e1       	ldi	r24, 0x1E	; 30
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    130e:	86 e0       	ldi	r24, 0x06	; 6
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
    1340:	88 e2       	ldi	r24, 0x28	; 40
    1342:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    1352:	86 e0       	ldi	r24, 0x06	; 6
    1354:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    1358:	8c e0       	ldi	r24, 0x0C	; 12
    135a:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    135e:	08 95       	ret

00001360 <_ZN12OrangutanLCD5clearEv>:
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    1366:	80 91 6d 01 	lds	r24, 0x016D
    136a:	90 91 6e 01 	lds	r25, 0x016E
    136e:	89 2b       	or	r24, r25
    1370:	f9 f0       	breq	.+62     	; 0x13b0 <_ZN12OrangutanLCD5clearEv+0x50>
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	a0 e2       	ldi	r26, 0x20	; 32
    1376:	26 2f       	mov	r18, r22
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	70 91 0c 01 	lds	r23, 0x010C
    137e:	80 91 0d 01 	lds	r24, 0x010D
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	78 9f       	mul	r23, r24
    1388:	a0 01       	movw	r20, r0
    138a:	79 9f       	mul	r23, r25
    138c:	50 0d       	add	r21, r0
    138e:	11 24       	eor	r1, r1
    1390:	24 17       	cp	r18, r20
    1392:	35 07       	cpc	r19, r21
    1394:	4c f4       	brge	.+18     	; 0x13a8 <_ZN12OrangutanLCD5clearEv+0x48>
    1396:	e0 91 6d 01 	lds	r30, 0x016D
    139a:	f0 91 6e 01 	lds	r31, 0x016E
    139e:	e2 0f       	add	r30, r18
    13a0:	f3 1f       	adc	r31, r19
    13a2:	a0 83       	st	Z, r26
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	e7 cf       	rjmp	.-50     	; 0x1376 <_ZN12OrangutanLCD5clearEv+0x16>
    13a8:	10 92 6b 01 	sts	0x016B, r1
    13ac:	10 92 6c 01 	sts	0x016C, r1
    13b0:	08 95       	ret

000013b2 <clear>:
    13b2:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN12OrangutanLCD5clearEv>
    13b6:	08 95       	ret

000013b8 <_ZN12OrangutanLCD5printEPKc>:
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	ec 01       	movw	r28, r24
    13be:	89 91       	ld	r24, Y+
    13c0:	88 23       	and	r24, r24
    13c2:	19 f0       	breq	.+6      	; 0x13ca <_ZN12OrangutanLCD5printEPKc+0x12>
    13c4:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN12OrangutanLCD9send_dataEh>
    13c8:	fa cf       	rjmp	.-12     	; 0x13be <_ZN12OrangutanLCD5printEPKc+0x6>
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <print>:
    13d0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_ZN12OrangutanLCD5printEPKc>
    13d4:	08 95       	ret

000013d6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
    13dc:	fe 01       	movw	r30, r28
    13de:	84 91       	lpm	r24, Z
    13e0:	88 23       	and	r24, r24
    13e2:	21 f0       	breq	.+8      	; 0x13ec <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    13e4:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN12OrangutanLCD9send_dataEh>
    13e8:	21 96       	adiw	r28, 0x01	; 1
    13ea:	f8 cf       	rjmp	.-16     	; 0x13dc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <print_from_program_space>:
    13f2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    13f6:	08 95       	ret

000013f8 <_ZN12OrangutanLCD5printEm>:
    13f8:	aa e0       	ldi	r26, 0x0A	; 10
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x14>
    1404:	1a e0       	ldi	r17, 0x0A	; 10
    1406:	5a e0       	ldi	r21, 0x0A	; 10
    1408:	c5 2e       	mov	r12, r21
    140a:	d1 2c       	mov	r13, r1
    140c:	e1 2c       	mov	r14, r1
    140e:	f1 2c       	mov	r15, r1
    1410:	06 2f       	mov	r16, r22
    1412:	a7 01       	movw	r20, r14
    1414:	96 01       	movw	r18, r12
    1416:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
    141a:	ca 01       	movw	r24, r20
    141c:	b9 01       	movw	r22, r18
    141e:	11 50       	subi	r17, 0x01	; 1
    1420:	e1 e0       	ldi	r30, 0x01	; 1
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	ec 0f       	add	r30, r28
    1426:	fd 1f       	adc	r31, r29
    1428:	e1 0f       	add	r30, r17
    142a:	f1 1d       	adc	r31, r1
    142c:	00 5d       	subi	r16, 0xD0	; 208
    142e:	2a e0       	ldi	r18, 0x0A	; 10
    1430:	62 9f       	mul	r22, r18
    1432:	00 19       	sub	r16, r0
    1434:	11 24       	eor	r1, r1
    1436:	00 83       	st	Z, r16
    1438:	61 15       	cp	r22, r1
    143a:	71 05       	cpc	r23, r1
    143c:	81 05       	cpc	r24, r1
    143e:	91 05       	cpc	r25, r1
    1440:	39 f7       	brne	.-50     	; 0x1410 <_ZN12OrangutanLCD5printEm+0x18>
    1442:	1a 30       	cpi	r17, 0x0A	; 10
    1444:	58 f4       	brcc	.+22     	; 0x145c <_ZN12OrangutanLCD5printEm+0x64>
    1446:	e1 e0       	ldi	r30, 0x01	; 1
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	ec 0f       	add	r30, r28
    144c:	fd 1f       	adc	r31, r29
    144e:	e1 0f       	add	r30, r17
    1450:	f1 1d       	adc	r31, r1
    1452:	80 81       	ld	r24, Z
    1454:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN12OrangutanLCD9send_dataEh>
    1458:	1f 5f       	subi	r17, 0xFF	; 255
    145a:	f3 cf       	rjmp	.-26     	; 0x1442 <_ZN12OrangutanLCD5printEm+0x4a>
    145c:	2a 96       	adiw	r28, 0x0a	; 10
    145e:	e8 e0       	ldi	r30, 0x08	; 8
    1460:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x14>

00001464 <_ZN12OrangutanLCD5printEl>:
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	6b 01       	movw	r12, r22
    146e:	7c 01       	movw	r14, r24
    1470:	97 ff       	sbrs	r25, 7
    1472:	0b c0       	rjmp	.+22     	; 0x148a <_ZN12OrangutanLCD5printEl+0x26>
    1474:	f0 94       	com	r15
    1476:	e0 94       	com	r14
    1478:	d0 94       	com	r13
    147a:	c0 94       	com	r12
    147c:	c1 1c       	adc	r12, r1
    147e:	d1 1c       	adc	r13, r1
    1480:	e1 1c       	adc	r14, r1
    1482:	f1 1c       	adc	r15, r1
    1484:	8d e2       	ldi	r24, 0x2D	; 45
    1486:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN12OrangutanLCD9send_dataEh>
    148a:	c7 01       	movw	r24, r14
    148c:	b6 01       	movw	r22, r12
    148e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN12OrangutanLCD5printEm>
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	08 95       	ret

0000149c <print_long>:
    149c:	0e 94 32 0a 	call	0x1464	; 0x1464 <_ZN12OrangutanLCD5printEl>
    14a0:	08 95       	ret

000014a2 <_ZN12OrangutanLCD6gotoXYEhh>:
    14a2:	a5 e0       	ldi	r26, 0x05	; 5
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e7 e5       	ldi	r30, 0x57	; 87
    14a8:	fa e0       	ldi	r31, 0x0A	; 10
    14aa:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x1e>
    14ae:	18 2f       	mov	r17, r24
    14b0:	80 e8       	ldi	r24, 0x80	; 128
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	80 ec       	ldi	r24, 0xC0	; 192
    14b6:	8a 83       	std	Y+2, r24	; 0x02
    14b8:	84 e9       	ldi	r24, 0x94	; 148
    14ba:	8b 83       	std	Y+3, r24	; 0x03
    14bc:	84 ed       	ldi	r24, 0xD4	; 212
    14be:	8c 83       	std	Y+4, r24	; 0x04
    14c0:	fe 01       	movw	r30, r28
    14c2:	e6 0f       	add	r30, r22
    14c4:	f1 1d       	adc	r31, r1
    14c6:	81 81       	ldd	r24, Z+1	; 0x01
    14c8:	81 0f       	add	r24, r17
    14ca:	6d 83       	std	Y+5, r22	; 0x05
    14cc:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN12OrangutanLCD8send_cmdEh>
    14d0:	10 93 6b 01 	sts	0x016B, r17
    14d4:	6d 81       	ldd	r22, Y+5	; 0x05
    14d6:	60 93 6c 01 	sts	0x016C, r22
    14da:	25 96       	adiw	r28, 0x05	; 5
    14dc:	e3 e0       	ldi	r30, 0x03	; 3
    14de:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x1e>

000014e2 <lcd_goto_xy>:
    14e2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <_ZN12OrangutanLCD6gotoXYEhh>
    14e6:	08 95       	ret

000014e8 <_ZN16OrangutanDigital9setOutputEhh>:
    14e8:	88 30       	cpi	r24, 0x08	; 8
    14ea:	58 f4       	brcc	.+22     	; 0x1502 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    14f0:	99 0f       	add	r25, r25
    14f2:	8a 95       	dec	r24
    14f4:	ea f7       	brpl	.-6      	; 0x14f0 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    14f6:	89 2f       	mov	r24, r25
    14f8:	aa e2       	ldi	r26, 0x2A	; 42
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e2       	ldi	r30, 0x2B	; 43
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	21 c0       	rjmp	.+66     	; 0x1544 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1502:	8e 30       	cpi	r24, 0x0E	; 14
    1504:	60 f4       	brcc	.+24     	; 0x151e <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1506:	98 ef       	ldi	r25, 0xF8	; 248
    1508:	98 0f       	add	r25, r24
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    150e:	88 0f       	add	r24, r24
    1510:	9a 95       	dec	r25
    1512:	ea f7       	brpl	.-6      	; 0x150e <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1514:	a4 e2       	ldi	r26, 0x24	; 36
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e2       	ldi	r30, 0x25	; 37
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	13 c0       	rjmp	.+38     	; 0x1544 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    151e:	85 31       	cpi	r24, 0x15	; 21
    1520:	60 f4       	brcc	.+24     	; 0x153a <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1522:	92 ef       	ldi	r25, 0xF2	; 242
    1524:	98 0f       	add	r25, r24
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	01 c0       	rjmp	.+2      	; 0x152c <_ZN16OrangutanDigital9setOutputEhh+0x44>
    152a:	88 0f       	add	r24, r24
    152c:	9a 95       	dec	r25
    152e:	ea f7       	brpl	.-6      	; 0x152a <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1530:	a7 e2       	ldi	r26, 0x27	; 39
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e8 e2       	ldi	r30, 0x28	; 40
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	a0 e0       	ldi	r26, 0x00	; 0
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e0 e0       	ldi	r30, 0x00	; 0
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	6f 3f       	cpi	r22, 0xFF	; 255
    1546:	19 f4       	brne	.+6      	; 0x154e <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1548:	90 81       	ld	r25, Z
    154a:	98 27       	eor	r25, r24
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    154e:	66 23       	and	r22, r22
    1550:	19 f0       	breq	.+6      	; 0x1558 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1552:	90 81       	ld	r25, Z
    1554:	98 2b       	or	r25, r24
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1558:	20 81       	ld	r18, Z
    155a:	98 2f       	mov	r25, r24
    155c:	90 95       	com	r25
    155e:	92 23       	and	r25, r18
    1560:	90 83       	st	Z, r25
    1562:	9c 91       	ld	r25, X
    1564:	98 2b       	or	r25, r24
    1566:	9c 93       	st	X, r25
    1568:	08 95       	ret

0000156a <_ZN15OrangutanMotors5init2Ev>:
    156a:	83 ef       	ldi	r24, 0xF3	; 243
    156c:	80 93 b0 00 	sts	0x00B0, r24
    1570:	84 bd       	out	0x24, r24	; 36
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	80 93 b1 00 	sts	0x00B1, r24
    1578:	85 bd       	out	0x25, r24	; 37
    157a:	10 92 b4 00 	sts	0x00B4, r1
    157e:	10 92 b3 00 	sts	0x00B3, r1
    1582:	18 bc       	out	0x28, r1	; 40
    1584:	17 bc       	out	0x27, r1	; 39
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	86 e0       	ldi	r24, 0x06	; 6
    158a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN16OrangutanDigital9setOutputEhh>
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	85 e0       	ldi	r24, 0x05	; 5
    1592:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN16OrangutanDigital9setOutputEhh>
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	8b e0       	ldi	r24, 0x0B	; 11
    159a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN16OrangutanDigital9setOutputEhh>
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN16OrangutanDigital9setOutputEhh>
    15a6:	08 95       	ret

000015a8 <_ZN15OrangutanMotors4initEv>:
    15a8:	80 91 2a 02 	lds	r24, 0x022A
    15ac:	81 11       	cpse	r24, r1
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <_ZN15OrangutanMotors4initEv+0x12>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 2a 02 	sts	0x022A, r24
    15b6:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN15OrangutanMotors5init2Ev>
    15ba:	08 95       	ret

000015bc <_ZN15OrangutanMotors10setM1SpeedEi>:
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	ec 01       	movw	r28, r24
    15c2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN15OrangutanMotors4initEv>
    15c6:	d7 ff       	sbrs	r29, 7
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    15ca:	d1 95       	neg	r29
    15cc:	c1 95       	neg	r28
    15ce:	d1 09       	sbc	r29, r1
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	cf 3f       	cpi	r28, 0xFF	; 255
    15d8:	d1 05       	cpc	r29, r1
    15da:	19 f0       	breq	.+6      	; 0x15e2 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    15dc:	14 f0       	brlt	.+4      	; 0x15e2 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    15de:	cf ef       	ldi	r28, 0xFF	; 255
    15e0:	d0 e0       	ldi	r29, 0x00	; 0
    15e2:	88 23       	and	r24, r24
    15e4:	19 f0       	breq	.+6      	; 0x15ec <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    15e6:	18 bc       	out	0x28, r1	; 40
    15e8:	c7 bd       	out	0x27, r28	; 39
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    15ec:	c8 bd       	out	0x28, r28	; 40
    15ee:	17 bc       	out	0x27, r1	; 39
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <_ZN15OrangutanMotors10setM2SpeedEi>:
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	ec 01       	movw	r28, r24
    15fc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN15OrangutanMotors4initEv>
    1600:	d7 ff       	sbrs	r29, 7
    1602:	05 c0       	rjmp	.+10     	; 0x160e <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1604:	d1 95       	neg	r29
    1606:	c1 95       	neg	r28
    1608:	d1 09       	sbc	r29, r1
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	cf 3f       	cpi	r28, 0xFF	; 255
    1612:	d1 05       	cpc	r29, r1
    1614:	19 f0       	breq	.+6      	; 0x161c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1616:	14 f0       	brlt	.+4      	; 0x161c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1618:	cf ef       	ldi	r28, 0xFF	; 255
    161a:	d0 e0       	ldi	r29, 0x00	; 0
    161c:	88 23       	and	r24, r24
    161e:	29 f0       	breq	.+10     	; 0x162a <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1620:	10 92 b4 00 	sts	0x00B4, r1
    1624:	c0 93 b3 00 	sts	0x00B3, r28
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    162a:	c0 93 b4 00 	sts	0x00B4, r28
    162e:	10 92 b3 00 	sts	0x00B3, r1
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <_ZN15OrangutanMotors9setSpeedsEii>:
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	eb 01       	movw	r28, r22
    163e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN15OrangutanMotors10setM1SpeedEi>
    1642:	ce 01       	movw	r24, r28
    1644:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZN15OrangutanMotors10setM2SpeedEi>
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <set_motors>:
    164e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZN15OrangutanMotors9setSpeedsEii>
    1652:	08 95       	ret

00001654 <_ZN20OrangutanPushbuttons5init2Ev>:
    1654:	84 b1       	in	r24, 0x04	; 4
    1656:	8d 7c       	andi	r24, 0xCD	; 205
    1658:	84 b9       	out	0x04, r24	; 4
    165a:	85 b1       	in	r24, 0x05	; 5
    165c:	82 63       	ori	r24, 0x32	; 50
    165e:	85 b9       	out	0x05, r24	; 5
    1660:	85 e0       	ldi	r24, 0x05	; 5
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	6f 93       	push	r22
    1666:	64 e0       	ldi	r22, 0x04	; 4
    1668:	6a 95       	dec	r22
    166a:	f1 f7       	brne	.-4      	; 0x1668 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    166c:	6f 91       	pop	r22
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	c9 f7       	brne	.-14     	; 0x1664 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1672:	08 95       	ret

00001674 <_ZN20OrangutanPushbuttons4initEv>:
    1674:	80 91 2b 02 	lds	r24, 0x022B
    1678:	81 11       	cpse	r24, r1
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <_ZN20OrangutanPushbuttons4initEv+0x12>
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 2b 02 	sts	0x022B, r24
    1682:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_ZN20OrangutanPushbuttons5init2Ev>
    1686:	08 95       	ret

00001688 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1688:	cf 93       	push	r28
    168a:	c8 2f       	mov	r28, r24
    168c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN20OrangutanPushbuttons4initEv>
    1690:	83 b1       	in	r24, 0x03	; 3
    1692:	8c 23       	and	r24, r28
    1694:	e9 f3       	breq	.-6      	; 0x1690 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1696:	8a e0       	ldi	r24, 0x0A	; 10
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 b5 0b 	call	0x176a	; 0x176a <delay_ms>
    169e:	83 b1       	in	r24, 0x03	; 3
    16a0:	8c 23       	and	r24, r28
    16a2:	b1 f3       	breq	.-20     	; 0x1690 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    16a4:	83 b1       	in	r24, 0x03	; 3
    16a6:	8c 23       	and	r24, r28
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <wait_for_button_release>:
    16ac:	0e 94 44 0b 	call	0x1688	; 0x1688 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    16b0:	08 95       	ret

000016b2 <_ZN20OrangutanPushbuttons9isPressedEh>:
    16b2:	a1 e0       	ldi	r26, 0x01	; 1
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ef e5       	ldi	r30, 0x5F	; 95
    16b8:	fb e0       	ldi	r31, 0x0B	; 11
    16ba:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__prologue_saves__+0x20>
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN20OrangutanPushbuttons4initEv>
    16c4:	93 b1       	in	r25, 0x03	; 3
    16c6:	90 95       	com	r25
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	89 23       	and	r24, r25
    16cc:	21 96       	adiw	r28, 0x01	; 1
    16ce:	e2 e0       	ldi	r30, 0x02	; 2
    16d0:	0c 94 16 12 	jmp	0x242c	; 0x242c <__epilogue_restores__+0x20>

000016d4 <button_is_pressed>:
    16d4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN20OrangutanPushbuttons9isPressedEh>
    16d8:	08 95       	ret

000016da <__vector_9>:
    16da:	2f 92       	push	r2
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	2f b6       	in	r2, 0x3f	; 63
    16e2:	80 91 76 01 	lds	r24, 0x0176
    16e6:	90 91 77 01 	lds	r25, 0x0177
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	80 93 76 01 	sts	0x0176, r24
    16f0:	90 93 77 01 	sts	0x0177, r25
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	80 91 78 01 	lds	r24, 0x0178
    16fa:	89 1f       	adc	r24, r25
    16fc:	80 93 78 01 	sts	0x0178, r24
    1700:	90 91 70 01 	lds	r25, 0x0170
    1704:	9c 5f       	subi	r25, 0xFC	; 252
    1706:	90 93 70 01 	sts	0x0170, r25
    170a:	80 91 6f 01 	lds	r24, 0x016F
    170e:	80 51       	subi	r24, 0x10	; 16
    1710:	97 42       	sbci	r25, 0x27	; 39
    1712:	c0 f0       	brcs	.+48     	; 0x1744 <end>
    1714:	90 93 70 01 	sts	0x0170, r25
    1718:	80 93 6f 01 	sts	0x016F, r24
    171c:	80 91 71 01 	lds	r24, 0x0171
    1720:	90 91 72 01 	lds	r25, 0x0172
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	80 93 71 01 	sts	0x0171, r24
    172a:	90 93 72 01 	sts	0x0172, r25
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	80 91 73 01 	lds	r24, 0x0173
    1734:	89 1f       	adc	r24, r25
    1736:	80 93 73 01 	sts	0x0173, r24
    173a:	80 91 74 01 	lds	r24, 0x0174
    173e:	89 1f       	adc	r24, r25
    1740:	80 93 74 01 	sts	0x0174, r24

00001744 <end>:
    1744:	2f be       	out	0x3f, r2	; 63
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	2f 90       	pop	r2
    174c:	18 95       	reti

0000174e <_ZN13OrangutanTime17delayMillisecondsEj>:
    174e:	28 ee       	ldi	r18, 0xE8	; 232
    1750:	33 e0       	ldi	r19, 0x03	; 3
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	48 f0       	brcs	.+18     	; 0x1768 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1756:	f9 01       	movw	r30, r18
    1758:	6f 93       	push	r22
    175a:	64 e0       	ldi	r22, 0x04	; 4
    175c:	6a 95       	dec	r22
    175e:	f1 f7       	brne	.-4      	; 0x175c <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1760:	6f 91       	pop	r22
    1762:	31 97       	sbiw	r30, 0x01	; 1
    1764:	c9 f7       	brne	.-14     	; 0x1758 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1766:	f5 cf       	rjmp	.-22     	; 0x1752 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1768:	08 95       	ret

0000176a <delay_ms>:
    176a:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN13OrangutanTime17delayMillisecondsEj>
    176e:	08 95       	ret

00001770 <_ZN13OrangutanTime5init2Ev>:
    1770:	e0 e7       	ldi	r30, 0x70	; 112
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8e 7f       	andi	r24, 0xFE	; 254
    1778:	80 83       	st	Z, r24
    177a:	a0 eb       	ldi	r26, 0xB0	; 176
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	8c 91       	ld	r24, X
    1780:	83 60       	ori	r24, 0x03	; 3
    1782:	8c 93       	st	X, r24
    1784:	a1 eb       	ldi	r26, 0xB1	; 177
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	8c 91       	ld	r24, X
    178a:	80 7f       	andi	r24, 0xF0	; 240
    178c:	8c 93       	st	X, r24
    178e:	8c 91       	ld	r24, X
    1790:	82 60       	ori	r24, 0x02	; 2
    1792:	8c 93       	st	X, r24
    1794:	b8 9a       	sbi	0x17, 0	; 23
    1796:	80 81       	ld	r24, Z
    1798:	81 60       	ori	r24, 0x01	; 1
    179a:	80 83       	st	Z, r24
    179c:	78 94       	sei
    179e:	08 95       	ret

000017a0 <_ZN13OrangutanTime4initEv>:
    17a0:	80 91 2c 02 	lds	r24, 0x022C
    17a4:	81 11       	cpse	r24, r1
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <_ZN13OrangutanTime4initEv+0x12>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 2c 02 	sts	0x022C, r24
    17ae:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN13OrangutanTime5init2Ev>
    17b2:	08 95       	ret

000017b4 <_ZN13OrangutanTime2msEv>:
    17b4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_ZN13OrangutanTime4initEv>
    17b8:	e0 e7       	ldi	r30, 0x70	; 112
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8e 7f       	andi	r24, 0xFE	; 254
    17c0:	80 83       	st	Z, r24
    17c2:	60 91 71 01 	lds	r22, 0x0171
    17c6:	70 91 72 01 	lds	r23, 0x0172
    17ca:	80 91 73 01 	lds	r24, 0x0173
    17ce:	90 91 74 01 	lds	r25, 0x0174
    17d2:	20 81       	ld	r18, Z
    17d4:	21 60       	ori	r18, 0x01	; 1
    17d6:	20 83       	st	Z, r18
    17d8:	08 95       	ret

000017da <get_ms>:
    17da:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN13OrangutanTime2msEv>
    17de:	08 95       	ret

000017e0 <_ZN13OrangutanTime5resetEv>:
    17e0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_ZN13OrangutanTime4initEv>
    17e4:	e0 e7       	ldi	r30, 0x70	; 112
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8e 7f       	andi	r24, 0xFE	; 254
    17ec:	80 83       	st	Z, r24
    17ee:	10 92 71 01 	sts	0x0171, r1
    17f2:	10 92 72 01 	sts	0x0172, r1
    17f6:	10 92 73 01 	sts	0x0173, r1
    17fa:	10 92 74 01 	sts	0x0174, r1
    17fe:	10 92 70 01 	sts	0x0170, r1
    1802:	10 92 6f 01 	sts	0x016F, r1
    1806:	80 81       	ld	r24, Z
    1808:	81 60       	ori	r24, 0x01	; 1
    180a:	80 83       	st	Z, r24
    180c:	08 95       	ret

0000180e <calibrate_line_sensors>:
    180e:	68 2f       	mov	r22, r24
    1810:	89 e7       	ldi	r24, 0x79	; 121
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZN16PololuQTRSensors9calibrateEh>
    1818:	08 95       	ret

0000181a <read_line>:
    181a:	46 2f       	mov	r20, r22
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	bc 01       	movw	r22, r24
    1820:	89 e7       	ldi	r24, 0x79	; 121
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN16PololuQTRSensors8readLineEPjhh>
    1828:	08 95       	ret

0000182a <_ZN9Pololu3pi4initEjh>:
    182a:	0f 93       	push	r16
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 d0       	rcall	.+0      	; 0x1832 <_ZN9Pololu3pi4initEjh+0x8>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <_ZN9Pololu3pi4initEjh+0xa>
    1834:	1f 92       	push	r1
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	9c 01       	movw	r18, r24
    183c:	85 e0       	ldi	r24, 0x05	; 5
    183e:	e6 e3       	ldi	r30, 0x36	; 54
    1840:	f1 e0       	ldi	r31, 0x01	; 1
    1842:	de 01       	movw	r26, r28
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	01 90       	ld	r0, Z+
    1848:	0d 92       	st	X+, r0
    184a:	8a 95       	dec	r24
    184c:	e1 f7       	brne	.-8      	; 0x1846 <_ZN9Pololu3pi4initEjh+0x1c>
    184e:	66 23       	and	r22, r22
    1850:	11 f0       	breq	.+4      	; 0x1856 <_ZN9Pololu3pi4initEjh+0x2c>
    1852:	0f ef       	ldi	r16, 0xFF	; 255
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <_ZN9Pololu3pi4initEjh+0x2e>
    1856:	03 e1       	ldi	r16, 0x13	; 19
    1858:	45 e0       	ldi	r20, 0x05	; 5
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	89 e7       	ldi	r24, 0x79	; 121
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1868:	89 e7       	ldi	r24, 0x79	; 121
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN16PololuQTRSensors11emittersOffEv>
    1870:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN13OrangutanTime5resetEv>
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <pololu_3pi_init>:
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	0e 94 15 0c 	call	0x182a	; 0x182a <_ZN9Pololu3pi4initEjh>
    188c:	08 95       	ret

0000188e <_GLOBAL__sub_D_pololu_3pi_init>:
    188e:	89 e7       	ldi	r24, 0x79	; 121
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN16PololuQTRSensorsD1Ev>
    1896:	08 95       	ret

00001898 <delay_us>:
    1898:	6f 93       	push	r22
    189a:	64 e0       	ldi	r22, 0x04	; 4
    189c:	6a 95       	dec	r22
    189e:	f1 f7       	brne	.-4      	; 0x189c <delay_us+0x4>
    18a0:	6f 91       	pop	r22
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	c9 f7       	brne	.-14     	; 0x1898 <delay_us>
    18a6:	08 95       	ret

000018a8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 82       	std	Z+1, r1	; 0x01
    18ac:	10 82       	st	Z, r1
    18ae:	13 82       	std	Z+3, r1	; 0x03
    18b0:	12 82       	std	Z+2, r1	; 0x02
    18b2:	15 82       	std	Z+5, r1	; 0x05
    18b4:	14 82       	std	Z+4, r1	; 0x04
    18b6:	16 82       	std	Z+6, r1	; 0x06
    18b8:	68 30       	cpi	r22, 0x08	; 8
    18ba:	68 f4       	brcc	.+26     	; 0x18d6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    18bc:	89 e2       	ldi	r24, 0x29	; 41
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	8b e2       	ldi	r24, 0x2B	; 43
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	93 83       	std	Z+3, r25	; 0x03
    18ca:	82 83       	std	Z+2, r24	; 0x02
    18cc:	8a e2       	ldi	r24, 0x2A	; 42
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	95 83       	std	Z+5, r25	; 0x05
    18d2:	84 83       	std	Z+4, r24	; 0x04
    18d4:	1f c0       	rjmp	.+62     	; 0x1914 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18d6:	6e 30       	cpi	r22, 0x0E	; 14
    18d8:	70 f4       	brcc	.+28     	; 0x18f6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    18da:	83 e2       	ldi	r24, 0x23	; 35
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	85 e2       	ldi	r24, 0x25	; 37
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	93 83       	std	Z+3, r25	; 0x03
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	84 e2       	ldi	r24, 0x24	; 36
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	95 83       	std	Z+5, r25	; 0x05
    18f0:	84 83       	std	Z+4, r24	; 0x04
    18f2:	68 50       	subi	r22, 0x08	; 8
    18f4:	0f c0       	rjmp	.+30     	; 0x1914 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18f6:	65 31       	cpi	r22, 0x15	; 21
    18f8:	98 f4       	brcc	.+38     	; 0x1920 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    18fa:	86 e2       	ldi	r24, 0x26	; 38
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	88 e2       	ldi	r24, 0x28	; 40
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	93 83       	std	Z+3, r25	; 0x03
    1908:	82 83       	std	Z+2, r24	; 0x02
    190a:	87 e2       	ldi	r24, 0x27	; 39
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	95 83       	std	Z+5, r25	; 0x05
    1910:	84 83       	std	Z+4, r24	; 0x04
    1912:	6e 50       	subi	r22, 0x0E	; 14
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	01 c0       	rjmp	.+2      	; 0x191a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1918:	88 0f       	add	r24, r24
    191a:	6a 95       	dec	r22
    191c:	ea f7       	brpl	.-6      	; 0x1918 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    191e:	86 83       	std	Z+6, r24	; 0x06
    1920:	08 95       	ret

00001922 <_ZN16PololuQTRSensors4initEhhh>:
    1922:	a7 e0       	ldi	r26, 0x07	; 7
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e9       	ldi	r30, 0x97	; 151
    1928:	fc e0       	ldi	r31, 0x0C	; 12
    192a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x1c>
    192e:	8c 01       	movw	r16, r24
    1930:	fc 01       	movw	r30, r24
    1932:	11 82       	std	Z+1, r1	; 0x01
    1934:	10 82       	st	Z, r1
    1936:	13 82       	std	Z+3, r1	; 0x03
    1938:	12 82       	std	Z+2, r1	; 0x02
    193a:	15 82       	std	Z+5, r1	; 0x05
    193c:	14 82       	std	Z+4, r1	; 0x04
    193e:	17 82       	std	Z+7, r1	; 0x07
    1940:	16 82       	std	Z+6, r1	; 0x06
    1942:	61 31       	cpi	r22, 0x11	; 17
    1944:	18 f0       	brcs	.+6      	; 0x194c <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1946:	80 e1       	ldi	r24, 0x10	; 16
    1948:	80 87       	std	Z+8, r24	; 0x08
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    194c:	fc 01       	movw	r30, r24
    194e:	60 87       	std	Z+8, r22	; 0x08
    1950:	f8 01       	movw	r30, r16
    1952:	20 8b       	std	Z+16, r18	; 0x10
    1954:	64 2f       	mov	r22, r20
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    195e:	8f 81       	ldd	r24, Y+7	; 0x07
    1960:	f8 01       	movw	r30, r16
    1962:	81 87       	std	Z+9, r24	; 0x09
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	93 87       	std	Z+11, r25	; 0x0b
    196a:	82 87       	std	Z+10, r24	; 0x0a
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	95 87       	std	Z+13, r25	; 0x0d
    1972:	84 87       	std	Z+12, r24	; 0x0c
    1974:	27 96       	adiw	r28, 0x07	; 7
    1976:	e4 e0       	ldi	r30, 0x04	; 4
    1978:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x1c>

0000197c <_ZN16PololuQTRSensors11emittersOffEv>:
    197c:	fc 01       	movw	r30, r24
    197e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1980:	b5 85       	ldd	r27, Z+13	; 0x0d
    1982:	10 97       	sbiw	r26, 0x00	; 0
    1984:	79 f0       	breq	.+30     	; 0x19a4 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1986:	8c 91       	ld	r24, X
    1988:	91 85       	ldd	r25, Z+9	; 0x09
    198a:	89 2b       	or	r24, r25
    198c:	8c 93       	st	X, r24
    198e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1990:	b3 85       	ldd	r27, Z+11	; 0x0b
    1992:	9c 91       	ld	r25, X
    1994:	81 85       	ldd	r24, Z+9	; 0x09
    1996:	80 95       	com	r24
    1998:	89 23       	and	r24, r25
    199a:	8c 93       	st	X, r24
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <delay_us>
    19a4:	08 95       	ret

000019a6 <_ZN16PololuQTRSensors10emittersOnEv>:
    19a6:	fc 01       	movw	r30, r24
    19a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    19aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    19ac:	10 97       	sbiw	r26, 0x00	; 0
    19ae:	71 f0       	breq	.+28     	; 0x19cc <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    19b0:	8c 91       	ld	r24, X
    19b2:	91 85       	ldd	r25, Z+9	; 0x09
    19b4:	89 2b       	or	r24, r25
    19b6:	8c 93       	st	X, r24
    19b8:	a2 85       	ldd	r26, Z+10	; 0x0a
    19ba:	b3 85       	ldd	r27, Z+11	; 0x0b
    19bc:	8c 91       	ld	r24, X
    19be:	91 85       	ldd	r25, Z+9	; 0x09
    19c0:	89 2b       	or	r24, r25
    19c2:	8c 93       	st	X, r24
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <delay_us>
    19cc:	08 95       	ret

000019ce <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    19ce:	a7 e0       	ldi	r26, 0x07	; 7
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed ee       	ldi	r30, 0xED	; 237
    19d4:	fc e0       	ldi	r31, 0x0C	; 12
    19d6:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__+0x6>
    19da:	7c 01       	movw	r14, r24
    19dc:	4b 01       	movw	r8, r22
    19de:	64 2f       	mov	r22, r20
    19e0:	39 01       	movw	r6, r18
    19e2:	40 2f       	mov	r20, r16
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16PololuQTRSensors4initEhhh>
    19ea:	87 01       	movw	r16, r14
    19ec:	0f 5b       	subi	r16, 0xBF	; 191
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	f8 01       	movw	r30, r16
    19f2:	10 82       	st	Z, r1
    19f4:	67 01       	movw	r12, r14
    19f6:	f2 e4       	ldi	r31, 0x42	; 66
    19f8:	cf 0e       	add	r12, r31
    19fa:	d1 1c       	adc	r13, r1
    19fc:	f6 01       	movw	r30, r12
    19fe:	10 82       	st	Z, r1
    1a00:	57 01       	movw	r10, r14
    1a02:	f3 e4       	ldi	r31, 0x43	; 67
    1a04:	af 0e       	add	r10, r31
    1a06:	b1 1c       	adc	r11, r1
    1a08:	f5 01       	movw	r30, r10
    1a0a:	10 82       	st	Z, r1
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	77 86       	std	Z+15, r7	; 0x0f
    1a10:	66 86       	std	Z+14, r6	; 0x0e
    1a12:	51 2c       	mov	r5, r1
    1a14:	f7 01       	movw	r30, r14
    1a16:	80 85       	ldd	r24, Z+8	; 0x08
    1a18:	58 16       	cp	r5, r24
    1a1a:	50 f5       	brcc	.+84     	; 0x1a70 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1a1c:	65 2c       	mov	r6, r5
    1a1e:	71 2c       	mov	r7, r1
    1a20:	f4 01       	movw	r30, r8
    1a22:	e6 0d       	add	r30, r6
    1a24:	f7 1d       	adc	r31, r7
    1a26:	60 81       	ld	r22, Z
    1a28:	ce 01       	movw	r24, r28
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1a30:	2f 81       	ldd	r18, Y+7	; 0x07
    1a32:	f7 01       	movw	r30, r14
    1a34:	e6 0d       	add	r30, r6
    1a36:	f7 1d       	adc	r31, r7
    1a38:	21 8b       	std	Z+17, r18	; 0x11
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	f3 01       	movw	r30, r6
    1a40:	ee 0f       	add	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	ee 0d       	add	r30, r14
    1a46:	ff 1d       	adc	r31, r15
    1a48:	92 a3       	std	Z+34, r25	; 0x22
    1a4a:	81 a3       	std	Z+33, r24	; 0x21
    1a4c:	83 32       	cpi	r24, 0x23	; 35
    1a4e:	91 05       	cpc	r25, r1
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1a52:	f8 01       	movw	r30, r16
    1a54:	08 c0       	rjmp	.+16     	; 0x1a66 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a56:	86 32       	cpi	r24, 0x26	; 38
    1a58:	91 05       	cpc	r25, r1
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a60:	89 97       	sbiw	r24, 0x29	; 41
    1a62:	21 f4       	brne	.+8      	; 0x1a6c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1a64:	f5 01       	movw	r30, r10
    1a66:	80 81       	ld	r24, Z
    1a68:	82 2b       	or	r24, r18
    1a6a:	80 83       	st	Z, r24
    1a6c:	53 94       	inc	r5
    1a6e:	d2 cf       	rjmp	.-92     	; 0x1a14 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1a70:	27 96       	adiw	r28, 0x07	; 7
    1a72:	ef e0       	ldi	r30, 0x0F	; 15
    1a74:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__+0x6>

00001a78 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e2 e4       	ldi	r30, 0x42	; 66
    1a7e:	fd e0       	ldi	r31, 0x0D	; 13
    1a80:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0xa>
    1a84:	ec 01       	movw	r28, r24
    1a86:	5b 01       	movw	r10, r22
    1a88:	6c 01       	movw	r12, r24
    1a8a:	81 e4       	ldi	r24, 0x41	; 65
    1a8c:	c8 0e       	add	r12, r24
    1a8e:	d1 1c       	adc	r13, r1
    1a90:	f6 01       	movw	r30, r12
    1a92:	80 80       	ld	r8, Z
    1a94:	7e 01       	movw	r14, r28
    1a96:	f2 e4       	ldi	r31, 0x42	; 66
    1a98:	ef 0e       	add	r14, r31
    1a9a:	f1 1c       	adc	r15, r1
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	70 80       	ld	r7, Z
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	0d 5b       	subi	r16, 0xBD	; 189
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	90 80       	ld	r9, Z
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	98 85       	ldd	r25, Y+8	; 0x08
    1aae:	89 17       	cp	r24, r25
    1ab0:	48 f4       	brcc	.+18     	; 0x1ac4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1ab2:	f5 01       	movw	r30, r10
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f1 1d       	adc	r31, r1
    1ab8:	e8 0f       	add	r30, r24
    1aba:	f1 1d       	adc	r31, r1
    1abc:	11 82       	std	Z+1, r1	; 0x01
    1abe:	10 82       	st	Z, r1
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	f4 cf       	rjmp	.-24     	; 0x1aac <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1ac4:	84 b1       	in	r24, 0x04	; 4
    1ac6:	f6 01       	movw	r30, r12
    1ac8:	90 81       	ld	r25, Z
    1aca:	89 2b       	or	r24, r25
    1acc:	84 b9       	out	0x04, r24	; 4
    1ace:	87 b1       	in	r24, 0x07	; 7
    1ad0:	f7 01       	movw	r30, r14
    1ad2:	90 81       	ld	r25, Z
    1ad4:	89 2b       	or	r24, r25
    1ad6:	87 b9       	out	0x07, r24	; 7
    1ad8:	8a b1       	in	r24, 0x0a	; 10
    1ada:	f8 01       	movw	r30, r16
    1adc:	90 81       	ld	r25, Z
    1ade:	89 2b       	or	r24, r25
    1ae0:	8a b9       	out	0x0a, r24	; 10
    1ae2:	85 b1       	in	r24, 0x05	; 5
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	90 81       	ld	r25, Z
    1ae8:	89 2b       	or	r24, r25
    1aea:	85 b9       	out	0x05, r24	; 5
    1aec:	88 b1       	in	r24, 0x08	; 8
    1aee:	f7 01       	movw	r30, r14
    1af0:	90 81       	ld	r25, Z
    1af2:	89 2b       	or	r24, r25
    1af4:	88 b9       	out	0x08, r24	; 8
    1af6:	8b b1       	in	r24, 0x0b	; 11
    1af8:	f8 01       	movw	r30, r16
    1afa:	90 81       	ld	r25, Z
    1afc:	89 2b       	or	r24, r25
    1afe:	8b b9       	out	0x0b, r24	; 11
    1b00:	8a e0       	ldi	r24, 0x0A	; 10
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 4c 0c 	call	0x1898	; 0x1898 <delay_us>
    1b08:	94 b1       	in	r25, 0x04	; 4
    1b0a:	f6 01       	movw	r30, r12
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 95       	com	r24
    1b10:	89 23       	and	r24, r25
    1b12:	84 b9       	out	0x04, r24	; 4
    1b14:	97 b1       	in	r25, 0x07	; 7
    1b16:	f7 01       	movw	r30, r14
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 95       	com	r24
    1b1c:	89 23       	and	r24, r25
    1b1e:	87 b9       	out	0x07, r24	; 7
    1b20:	9a b1       	in	r25, 0x0a	; 10
    1b22:	f8 01       	movw	r30, r16
    1b24:	80 81       	ld	r24, Z
    1b26:	80 95       	com	r24
    1b28:	89 23       	and	r24, r25
    1b2a:	8a b9       	out	0x0a, r24	; 10
    1b2c:	95 b1       	in	r25, 0x05	; 5
    1b2e:	f6 01       	movw	r30, r12
    1b30:	80 81       	ld	r24, Z
    1b32:	80 95       	com	r24
    1b34:	89 23       	and	r24, r25
    1b36:	85 b9       	out	0x05, r24	; 5
    1b38:	98 b1       	in	r25, 0x08	; 8
    1b3a:	f7 01       	movw	r30, r14
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 95       	com	r24
    1b40:	89 23       	and	r24, r25
    1b42:	88 b9       	out	0x08, r24	; 8
    1b44:	9b b1       	in	r25, 0x0b	; 11
    1b46:	f8 01       	movw	r30, r16
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 95       	com	r24
    1b4c:	89 23       	and	r24, r25
    1b4e:	8b b9       	out	0x0b, r24	; 11
    1b50:	e0 90 b0 00 	lds	r14, 0x00B0
    1b54:	d0 90 b1 00 	lds	r13, 0x00B1
    1b58:	80 91 b0 00 	lds	r24, 0x00B0
    1b5c:	83 60       	ori	r24, 0x03	; 3
    1b5e:	80 93 b0 00 	sts	0x00B0, r24
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	80 93 b1 00 	sts	0x00B1, r24
    1b68:	40 91 b2 00 	lds	r20, 0x00B2
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b72:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b74:	82 17       	cp	r24, r18
    1b76:	93 07       	cpc	r25, r19
    1b78:	20 f5       	brcc	.+72     	; 0x1bc2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1b7a:	c0 90 b2 00 	lds	r12, 0x00B2
    1b7e:	2c 2d       	mov	r18, r12
    1b80:	24 1b       	sub	r18, r20
    1b82:	82 0f       	add	r24, r18
    1b84:	91 1d       	adc	r25, r1
    1b86:	03 b1       	in	r16, 0x03	; 3
    1b88:	08 11       	cpse	r16, r8
    1b8a:	32 c0       	rjmp	.+100    	; 0x1bf0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b8c:	f6 b0       	in	r15, 0x06	; 6
    1b8e:	f7 10       	cpse	r15, r7
    1b90:	2f c0       	rjmp	.+94     	; 0x1bf0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b92:	29 b1       	in	r18, 0x09	; 9
    1b94:	29 11       	cpse	r18, r9
    1b96:	2c c0       	rjmp	.+88     	; 0x1bf0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b98:	10 c0       	rjmp	.+32     	; 0x1bba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1b9a:	21 2f       	mov	r18, r17
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	a9 01       	movw	r20, r18
    1ba0:	44 0f       	add	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	f5 01       	movw	r30, r10
    1ba6:	e4 0f       	add	r30, r20
    1ba8:	f5 1f       	adc	r31, r21
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	67 2b       	or	r22, r23
    1bb0:	21 f1       	breq	.+72     	; 0x1bfa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1bb2:	1f 5f       	subi	r17, 0xFF	; 255
    1bb4:	28 85       	ldd	r18, Y+8	; 0x08
    1bb6:	12 17       	cp	r17, r18
    1bb8:	80 f3       	brcs	.-32     	; 0x1b9a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1bba:	7f 2c       	mov	r7, r15
    1bbc:	80 2e       	mov	r8, r16
    1bbe:	4c 2d       	mov	r20, r12
    1bc0:	d7 cf       	rjmp	.-82     	; 0x1b70 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1bc2:	e0 92 b0 00 	sts	0x00B0, r14
    1bc6:	d0 92 b1 00 	sts	0x00B1, r13
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	88 85       	ldd	r24, Y+8	; 0x08
    1bce:	28 17       	cp	r18, r24
    1bd0:	30 f5       	brcc	.+76     	; 0x1c1e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	e2 0f       	add	r30, r18
    1bd6:	f1 1d       	adc	r31, r1
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f1 1d       	adc	r31, r1
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	89 2b       	or	r24, r25
    1be2:	21 f4       	brne	.+8      	; 0x1bec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1be4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	2f 5f       	subi	r18, 0xFF	; 255
    1bee:	ee cf       	rjmp	.-36     	; 0x1bcc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1bf0:	03 b1       	in	r16, 0x03	; 3
    1bf2:	f6 b0       	in	r15, 0x06	; 6
    1bf4:	99 b0       	in	r9, 0x09	; 9
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	dd cf       	rjmp	.-70     	; 0x1bb4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1bfa:	de 01       	movw	r26, r28
    1bfc:	a4 0f       	add	r26, r20
    1bfe:	b5 1f       	adc	r27, r21
    1c00:	91 96       	adiw	r26, 0x21	; 33
    1c02:	0d 90       	ld	r0, X+
    1c04:	bc 91       	ld	r27, X
    1c06:	a0 2d       	mov	r26, r0
    1c08:	4c 91       	ld	r20, X
    1c0a:	de 01       	movw	r26, r28
    1c0c:	a2 0f       	add	r26, r18
    1c0e:	b3 1f       	adc	r27, r19
    1c10:	51 96       	adiw	r26, 0x11	; 17
    1c12:	2c 91       	ld	r18, X
    1c14:	42 23       	and	r20, r18
    1c16:	69 f6       	brne	.-102    	; 0x1bb2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
    1c1c:	ca cf       	rjmp	.-108    	; 0x1bb2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	ed e0       	ldi	r30, 0x0D	; 13
    1c24:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0xa>

00001c28 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	fc 01       	movw	r30, r24
    1c36:	9b 01       	movw	r18, r22
    1c38:	f0 90 7c 00 	lds	r15, 0x007C
    1c3c:	00 91 7a 00 	lds	r16, 0x007A
    1c40:	47 b1       	in	r20, 0x07	; 7
    1c42:	18 b1       	in	r17, 0x08	; 8
    1c44:	80 91 7a 00 	lds	r24, 0x007A
    1c48:	86 fd       	sbrc	r24, 6
    1c4a:	fc cf       	rjmp	.-8      	; 0x1c44 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 85       	ldd	r25, Z+8	; 0x08
    1c50:	89 17       	cp	r24, r25
    1c52:	48 f4       	brcc	.+18     	; 0x1c66 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1c54:	d9 01       	movw	r26, r18
    1c56:	a8 0f       	add	r26, r24
    1c58:	b1 1d       	adc	r27, r1
    1c5a:	a8 0f       	add	r26, r24
    1c5c:	b1 1d       	adc	r27, r1
    1c5e:	1d 92       	st	X+, r1
    1c60:	1c 92       	st	X, r1
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	f4 cf       	rjmp	.-24     	; 0x1c4e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1c66:	97 b1       	in	r25, 0x07	; 7
    1c68:	82 a1       	ldd	r24, Z+34	; 0x22
    1c6a:	80 95       	com	r24
    1c6c:	89 23       	and	r24, r25
    1c6e:	87 b9       	out	0x07, r24	; 7
    1c70:	98 b1       	in	r25, 0x08	; 8
    1c72:	82 a1       	ldd	r24, Z+34	; 0x22
    1c74:	80 95       	com	r24
    1c76:	89 23       	and	r24, r25
    1c78:	88 b9       	out	0x08, r24	; 8
    1c7a:	87 e8       	ldi	r24, 0x87	; 135
    1c7c:	80 93 7a 00 	sts	0x007A, r24
    1c80:	e1 2c       	mov	r14, r1
    1c82:	81 a1       	ldd	r24, Z+33	; 0x21
    1c84:	e8 16       	cp	r14, r24
    1c86:	10 f0       	brcs	.+4      	; 0x1c8c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1c88:	e1 2c       	mov	r14, r1
    1c8a:	29 c0       	rjmp	.+82     	; 0x1cde <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	80 85       	ldd	r24, Z+8	; 0x08
    1c90:	58 17       	cp	r21, r24
    1c92:	18 f5       	brcc	.+70     	; 0x1cda <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1c94:	a5 2f       	mov	r26, r21
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	ef 01       	movw	r28, r30
    1c9a:	ca 0f       	add	r28, r26
    1c9c:	db 1f       	adc	r29, r27
    1c9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ca0:	80 64       	ori	r24, 0x40	; 64
    1ca2:	80 93 7c 00 	sts	0x007C, r24
    1ca6:	80 91 7a 00 	lds	r24, 0x007A
    1caa:	80 64       	ori	r24, 0x40	; 64
    1cac:	80 93 7a 00 	sts	0x007A, r24
    1cb0:	80 91 7a 00 	lds	r24, 0x007A
    1cb4:	86 fd       	sbrc	r24, 6
    1cb6:	fc cf       	rjmp	.-8      	; 0x1cb0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1cb8:	60 91 78 00 	lds	r22, 0x0078
    1cbc:	70 91 79 00 	lds	r23, 0x0079
    1cc0:	aa 0f       	add	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	a2 0f       	add	r26, r18
    1cc6:	b3 1f       	adc	r27, r19
    1cc8:	8d 91       	ld	r24, X+
    1cca:	9c 91       	ld	r25, X
    1ccc:	11 97       	sbiw	r26, 0x01	; 1
    1cce:	86 0f       	add	r24, r22
    1cd0:	97 1f       	adc	r25, r23
    1cd2:	8d 93       	st	X+, r24
    1cd4:	9c 93       	st	X, r25
    1cd6:	5f 5f       	subi	r21, 0xFF	; 255
    1cd8:	da cf       	rjmp	.-76     	; 0x1c8e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1cda:	e3 94       	inc	r14
    1cdc:	d2 cf       	rjmp	.-92     	; 0x1c82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1cde:	80 85       	ldd	r24, Z+8	; 0x08
    1ce0:	e8 16       	cp	r14, r24
    1ce2:	a0 f4       	brcc	.+40     	; 0x1d0c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1ce4:	e9 01       	movw	r28, r18
    1ce6:	ce 0d       	add	r28, r14
    1ce8:	d1 1d       	adc	r29, r1
    1cea:	ce 0d       	add	r28, r14
    1cec:	d1 1d       	adc	r29, r1
    1cee:	61 a1       	ldd	r22, Z+33	; 0x21
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	95 95       	asr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	a8 81       	ld	r26, Y
    1cfa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cfc:	8a 0f       	add	r24, r26
    1cfe:	9b 1f       	adc	r25, r27
    1d00:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
    1d04:	79 83       	std	Y+1, r23	; 0x01
    1d06:	68 83       	st	Y, r22
    1d08:	e3 94       	inc	r14
    1d0a:	e9 cf       	rjmp	.-46     	; 0x1cde <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1d0c:	f0 92 7c 00 	sts	0x007C, r15
    1d10:	00 93 7a 00 	sts	0x007A, r16
    1d14:	18 b9       	out	0x08, r17	; 8
    1d16:	47 b9       	out	0x07, r20	; 7
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	e6 e0       	ldi	r30, 0x06	; 6
    1d1e:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

00001d22 <_ZN16PololuQTRSensors4readEPjh>:
    1d22:	a0 e2       	ldi	r26, 0x20	; 32
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e9       	ldi	r30, 0x97	; 151
    1d28:	fe e0       	ldi	r31, 0x0E	; 14
    1d2a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x16>
    1d2e:	8c 01       	movw	r16, r24
    1d30:	7b 01       	movw	r14, r22
    1d32:	d4 2e       	mov	r13, r20
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	84 0f       	add	r24, r20
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	18 f4       	brcc	.+6      	; 0x1d42 <_ZN16PololuQTRSensors4readEPjh+0x20>
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN16PololuQTRSensors10emittersOnEv>
    1d42:	d8 01       	movw	r26, r16
    1d44:	50 96       	adiw	r26, 0x10	; 16
    1d46:	8c 91       	ld	r24, X
    1d48:	b7 01       	movw	r22, r14
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	10 c0       	rjmp	.+32     	; 0x1d6e <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1d4e:	c8 01       	movw	r24, r16
    1d50:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN16PololuQTRSensors11emittersOffEv>
    1d5a:	b2 e0       	ldi	r27, 0x02	; 2
    1d5c:	db 12       	cpse	r13, r27
    1d5e:	3a c0       	rjmp	.+116    	; 0x1dd4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d60:	be 01       	movw	r22, r28
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	c8 01       	movw	r24, r16
    1d68:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d74:	c8 01       	movw	r24, r16
    1d76:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN16PololuQTRSensors11emittersOffEv>
    1d7a:	e2 e0       	ldi	r30, 0x02	; 2
    1d7c:	de 12       	cpse	r13, r30
    1d7e:	2a c0       	rjmp	.+84     	; 0x1dd4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d80:	be 01       	movw	r22, r28
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	c8 01       	movw	r24, r16
    1d88:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	f8 01       	movw	r30, r16
    1d90:	80 85       	ldd	r24, Z+8	; 0x08
    1d92:	48 17       	cp	r20, r24
    1d94:	f8 f4       	brcc	.+62     	; 0x1dd4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d96:	84 2f       	mov	r24, r20
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	f7 01       	movw	r30, r14
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	21 e0       	ldi	r18, 0x01	; 1
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	2c 0f       	add	r18, r28
    1daa:	3d 1f       	adc	r19, r29
    1dac:	82 0f       	add	r24, r18
    1dae:	93 1f       	adc	r25, r19
    1db0:	d8 01       	movw	r26, r16
    1db2:	1e 96       	adiw	r26, 0x0e	; 14
    1db4:	2d 91       	ld	r18, X+
    1db6:	3c 91       	ld	r19, X
    1db8:	1f 97       	sbiw	r26, 0x0f	; 15
    1dba:	dc 01       	movw	r26, r24
    1dbc:	8d 91       	ld	r24, X+
    1dbe:	9c 91       	ld	r25, X
    1dc0:	28 1b       	sub	r18, r24
    1dc2:	39 0b       	sbc	r19, r25
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	82 0f       	add	r24, r18
    1dca:	93 1f       	adc	r25, r19
    1dcc:	91 83       	std	Z+1, r25	; 0x01
    1dce:	80 83       	st	Z, r24
    1dd0:	4f 5f       	subi	r20, 0xFF	; 255
    1dd2:	dd cf       	rjmp	.-70     	; 0x1d8e <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1dd4:	a0 96       	adiw	r28, 0x20	; 32
    1dd6:	e7 e0       	ldi	r30, 0x07	; 7
    1dd8:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x16>

00001ddc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1ddc:	2f 92       	push	r2
    1dde:	3f 92       	push	r3
    1de0:	5f 92       	push	r5
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	c0 56       	subi	r28, 0x60	; 96
    1e04:	d1 09       	sbc	r29, r1
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	8c 01       	movw	r16, r24
    1e12:	4b 01       	movw	r8, r22
    1e14:	5a 01       	movw	r10, r20
    1e16:	52 2e       	mov	r5, r18
    1e18:	da 01       	movw	r26, r20
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
    1e1e:	89 2b       	or	r24, r25
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1e22:	f4 01       	movw	r30, r8
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	89 2b       	or	r24, r25
    1e2a:	f1 f4       	brne	.+60     	; 0x1e68 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1e2c:	24 c0       	rjmp	.+72     	; 0x1e76 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1e2e:	d8 01       	movw	r26, r16
    1e30:	18 96       	adiw	r26, 0x08	; 8
    1e32:	8c 91       	ld	r24, X
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0e 94 27 12 	call	0x244e	; 0x244e <malloc>
    1e3e:	f5 01       	movw	r30, r10
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1e48:	b1 c0       	rjmp	.+354    	; 0x1fac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	d8 01       	movw	r26, r16
    1e52:	18 96       	adiw	r26, 0x08	; 8
    1e54:	8c 91       	ld	r24, X
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	14 f7       	brge	.-60     	; 0x1e22 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1e5e:	11 92       	st	Z+, r1
    1e60:	11 92       	st	Z+, r1
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	f4 cf       	rjmp	.-24     	; 0x1e50 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1e68:	e1 2c       	mov	r14, r1
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	6e 01       	movw	r12, r28
    1e6e:	b1 e2       	ldi	r27, 0x21	; 33
    1e70:	cb 0e       	add	r12, r27
    1e72:	d1 1c       	adc	r13, r1
    1e74:	21 c0       	rjmp	.+66     	; 0x1eb8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e76:	f8 01       	movw	r30, r16
    1e78:	80 85       	ldd	r24, Z+8	; 0x08
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	0e 94 27 12 	call	0x244e	; 0x244e <malloc>
    1e84:	d4 01       	movw	r26, r8
    1e86:	8d 93       	st	X+, r24
    1e88:	9c 93       	st	X, r25
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1e8e:	8e c0       	rjmp	.+284    	; 0x1fac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	d8 01       	movw	r26, r16
    1e98:	18 96       	adiw	r26, 0x08	; 8
    1e9a:	8c 91       	ld	r24, X
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	28 17       	cp	r18, r24
    1ea0:	39 07       	cpc	r19, r25
    1ea2:	14 f7       	brge	.-60     	; 0x1e68 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1ea4:	d8 01       	movw	r26, r16
    1ea6:	1e 96       	adiw	r26, 0x0e	; 14
    1ea8:	8d 91       	ld	r24, X+
    1eaa:	9c 91       	ld	r25, X
    1eac:	1f 97       	sbiw	r26, 0x0f	; 15
    1eae:	81 93       	st	Z+, r24
    1eb0:	91 93       	st	Z+, r25
    1eb2:	2f 5f       	subi	r18, 0xFF	; 255
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	ef cf       	rjmp	.-34     	; 0x1e96 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1eb8:	45 2d       	mov	r20, r5
    1eba:	be 01       	movw	r22, r28
    1ebc:	6f 5b       	subi	r22, 0xBF	; 191
    1ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN16PololuQTRSensors4readEPjh>
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	60 84       	ldd	r6, Z+8	; 0x08
    1eca:	71 2c       	mov	r7, r1
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ef 5b       	subi	r30, 0xBF	; 191
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	c6 01       	movw	r24, r12
    1ed4:	9e 01       	movw	r18, r28
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	19 01       	movw	r2, r18
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	26 15       	cp	r18, r6
    1ee2:	37 05       	cpc	r19, r7
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1ee6:	e1 14       	cp	r14, r1
    1ee8:	f1 04       	cpc	r15, r1
    1eea:	89 f0       	breq	.+34     	; 0x1f0e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1eec:	dc 01       	movw	r26, r24
    1eee:	6d 91       	ld	r22, X+
    1ef0:	7c 91       	ld	r23, X
    1ef2:	40 81       	ld	r20, Z
    1ef4:	51 81       	ldd	r21, Z+1	; 0x01
    1ef6:	64 17       	cp	r22, r20
    1ef8:	75 07       	cpc	r23, r21
    1efa:	48 f0       	brcs	.+18     	; 0x1f0e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1efc:	d1 01       	movw	r26, r2
    1efe:	6d 91       	ld	r22, X+
    1f00:	7c 91       	ld	r23, X
    1f02:	40 81       	ld	r20, Z
    1f04:	51 81       	ldd	r21, Z+1	; 0x01
    1f06:	46 17       	cp	r20, r22
    1f08:	57 07       	cpc	r21, r23
    1f0a:	48 f0       	brcs	.+18     	; 0x1f1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1f0e:	40 81       	ld	r20, Z
    1f10:	51 81       	ldd	r21, Z+1	; 0x01
    1f12:	dc 01       	movw	r26, r24
    1f14:	4d 93       	st	X+, r20
    1f16:	5c 93       	st	X, r21
    1f18:	e1 14       	cp	r14, r1
    1f1a:	f1 04       	cpc	r15, r1
    1f1c:	79 f7       	brne	.-34     	; 0x1efc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1f1e:	40 81       	ld	r20, Z
    1f20:	51 81       	ldd	r21, Z+1	; 0x01
    1f22:	d1 01       	movw	r26, r2
    1f24:	4d 93       	st	X+, r20
    1f26:	5c 93       	st	X, r21
    1f28:	2f 5f       	subi	r18, 0xFF	; 255
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	b2 e0       	ldi	r27, 0x02	; 2
    1f2e:	2b 0e       	add	r2, r27
    1f30:	31 1c       	adc	r3, r1
    1f32:	32 96       	adiw	r30, 0x02	; 2
    1f34:	02 96       	adiw	r24, 0x02	; 2
    1f36:	d4 cf       	rjmp	.-88     	; 0x1ee0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1f38:	ef ef       	ldi	r30, 0xFF	; 255
    1f3a:	ee 1a       	sub	r14, r30
    1f3c:	fe 0a       	sbc	r15, r30
    1f3e:	fa e0       	ldi	r31, 0x0A	; 10
    1f40:	ef 16       	cp	r14, r31
    1f42:	f1 04       	cpc	r15, r1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1f46:	b8 cf       	rjmp	.-144    	; 0x1eb8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1f48:	9e 01       	movw	r18, r28
    1f4a:	2f 5f       	subi	r18, 0xFF	; 255
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	79 01       	movw	r14, r18
    1f50:	36 01       	movw	r6, r12
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	f8 01       	movw	r30, r16
    1f58:	20 85       	ldd	r18, Z+8	; 0x08
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	82 17       	cp	r24, r18
    1f5e:	93 07       	cpc	r25, r19
    1f60:	2c f5       	brge	.+74     	; 0x1fac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1f62:	d7 01       	movw	r26, r14
    1f64:	2d 91       	ld	r18, X+
    1f66:	3d 91       	ld	r19, X+
    1f68:	7d 01       	movw	r14, r26
    1f6a:	b3 01       	movw	r22, r6
    1f6c:	6c 19       	sub	r22, r12
    1f6e:	7d 09       	sbc	r23, r13
    1f70:	d5 01       	movw	r26, r10
    1f72:	ed 91       	ld	r30, X+
    1f74:	fc 91       	ld	r31, X
    1f76:	e6 0f       	add	r30, r22
    1f78:	f7 1f       	adc	r31, r23
    1f7a:	40 81       	ld	r20, Z
    1f7c:	51 81       	ldd	r21, Z+1	; 0x01
    1f7e:	42 17       	cp	r20, r18
    1f80:	53 07       	cpc	r21, r19
    1f82:	10 f4       	brcc	.+4      	; 0x1f88 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1f84:	31 83       	std	Z+1, r19	; 0x01
    1f86:	20 83       	st	Z, r18
    1f88:	f3 01       	movw	r30, r6
    1f8a:	21 91       	ld	r18, Z+
    1f8c:	31 91       	ld	r19, Z+
    1f8e:	3f 01       	movw	r6, r30
    1f90:	d4 01       	movw	r26, r8
    1f92:	ed 91       	ld	r30, X+
    1f94:	fc 91       	ld	r31, X
    1f96:	e6 0f       	add	r30, r22
    1f98:	f7 1f       	adc	r31, r23
    1f9a:	40 81       	ld	r20, Z
    1f9c:	51 81       	ldd	r21, Z+1	; 0x01
    1f9e:	24 17       	cp	r18, r20
    1fa0:	35 07       	cpc	r19, r21
    1fa2:	10 f4       	brcc	.+4      	; 0x1fa8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1fa4:	31 83       	std	Z+1, r19	; 0x01
    1fa6:	20 83       	st	Z, r18
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	d5 cf       	rjmp	.-86     	; 0x1f56 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1fac:	c0 5a       	subi	r28, 0xA0	; 160
    1fae:	df 4f       	sbci	r29, 0xFF	; 255
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	9f 90       	pop	r9
    1fd0:	8f 90       	pop	r8
    1fd2:	7f 90       	pop	r7
    1fd4:	6f 90       	pop	r6
    1fd6:	5f 90       	pop	r5
    1fd8:	3f 90       	pop	r3
    1fda:	2f 90       	pop	r2
    1fdc:	08 95       	ret

00001fde <_ZN16PololuQTRSensors9calibrateEh>:
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	ec 01       	movw	r28, r24
    1fe6:	16 2f       	mov	r17, r22
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	86 0f       	add	r24, r22
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	18 f0       	brcs	.+6      	; 0x1ff6 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1ff0:	66 23       	and	r22, r22
    1ff2:	59 f0       	breq	.+22     	; 0x200a <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ff6:	21 e0       	ldi	r18, 0x01	; 1
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	4e 5f       	subi	r20, 0xFE	; 254
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	be 01       	movw	r22, r28
    2000:	ce 01       	movw	r24, r28
    2002:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2006:	12 30       	cpi	r17, 0x02	; 2
    2008:	51 f4       	brne	.+20     	; 0x201e <_ZN16PololuQTRSensors9calibrateEh+0x40>
    200a:	ae 01       	movw	r20, r28
    200c:	4a 5f       	subi	r20, 0xFA	; 250
    200e:	5f 4f       	sbci	r21, 0xFF	; 255
    2010:	be 01       	movw	r22, r28
    2012:	6c 5f       	subi	r22, 0xFC	; 252
    2014:	7f 4f       	sbci	r23, 0xFF	; 255
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	ce 01       	movw	r24, r28
    201a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	08 95       	ret

00002026 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e9 e1       	ldi	r30, 0x19	; 25
    202c:	f0 e1       	ldi	r31, 0x10	; 16
    202e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x12>
    2032:	ec 01       	movw	r28, r24
    2034:	8b 01       	movw	r16, r22
    2036:	b4 2e       	mov	r11, r20
    2038:	84 2f       	mov	r24, r20
    203a:	8d 7f       	andi	r24, 0xFD	; 253
    203c:	51 f4       	brne	.+20     	; 0x2052 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	9d 81       	ldd	r25, Y+5	; 0x05
    2042:	89 2b       	or	r24, r25
    2044:	09 f4       	brne	.+2      	; 0x2048 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2046:	97 c0       	rjmp	.+302    	; 0x2176 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2048:	8e 81       	ldd	r24, Y+6	; 0x06
    204a:	9f 81       	ldd	r25, Y+7	; 0x07
    204c:	89 2b       	or	r24, r25
    204e:	09 f4       	brne	.+2      	; 0x2052 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2050:	92 c0       	rjmp	.+292    	; 0x2176 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	8b 0d       	add	r24, r11
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	50 f4       	brcc	.+20     	; 0x206e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    205a:	88 81       	ld	r24, Y
    205c:	99 81       	ldd	r25, Y+1	; 0x01
    205e:	89 2b       	or	r24, r25
    2060:	09 f4       	brne	.+2      	; 0x2064 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2062:	89 c0       	rjmp	.+274    	; 0x2176 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	89 2b       	or	r24, r25
    206a:	09 f4       	brne	.+2      	; 0x206e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    206c:	84 c0       	rjmp	.+264    	; 0x2176 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    206e:	4b 2d       	mov	r20, r11
    2070:	b8 01       	movw	r22, r16
    2072:	ce 01       	movw	r24, r28
    2074:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN16PololuQTRSensors4readEPjh>
    2078:	78 01       	movw	r14, r16
    207a:	00 e0       	ldi	r16, 0x00	; 0
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	c1 2c       	mov	r12, r1
    2080:	d1 2c       	mov	r13, r1
    2082:	88 85       	ldd	r24, Y+8	; 0x08
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	c8 16       	cp	r12, r24
    2088:	d9 06       	cpc	r13, r25
    208a:	0c f0       	brlt	.+2      	; 0x208e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    208c:	74 c0       	rjmp	.+232    	; 0x2176 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	b8 12       	cpse	r11, r24
    2092:	0a c0       	rjmp	.+20     	; 0x20a8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2094:	ea 81       	ldd	r30, Y+2	; 0x02
    2096:	fb 81       	ldd	r31, Y+3	; 0x03
    2098:	e0 0f       	add	r30, r16
    209a:	f1 1f       	adc	r31, r17
    209c:	01 90       	ld	r0, Z+
    209e:	f0 81       	ld	r31, Z
    20a0:	e0 2d       	mov	r30, r0
    20a2:	a8 81       	ld	r26, Y
    20a4:	b9 81       	ldd	r27, Y+1	; 0x01
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	2e 81       	ldd	r18, Y+6	; 0x06
    20ae:	3f 81       	ldd	r19, Y+7	; 0x07
    20b0:	b1 10       	cpse	r11, r1
    20b2:	0c c0       	rjmp	.+24     	; 0x20cc <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    20b4:	f9 01       	movw	r30, r18
    20b6:	e0 0f       	add	r30, r16
    20b8:	f1 1f       	adc	r31, r17
    20ba:	01 90       	ld	r0, Z+
    20bc:	f0 81       	ld	r31, Z
    20be:	e0 2d       	mov	r30, r0
    20c0:	dc 01       	movw	r26, r24
    20c2:	a0 0f       	add	r26, r16
    20c4:	b1 1f       	adc	r27, r17
    20c6:	8d 91       	ld	r24, X+
    20c8:	9c 91       	ld	r25, X
    20ca:	28 c0       	rjmp	.+80     	; 0x211c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    20cc:	fc 01       	movw	r30, r24
    20ce:	e0 0f       	add	r30, r16
    20d0:	f1 1f       	adc	r31, r17
    20d2:	40 81       	ld	r20, Z
    20d4:	51 81       	ldd	r21, Z+1	; 0x01
    20d6:	e8 81       	ld	r30, Y
    20d8:	f9 81       	ldd	r31, Y+1	; 0x01
    20da:	e0 0f       	add	r30, r16
    20dc:	f1 1f       	adc	r31, r17
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	ee 85       	ldd	r30, Y+14	; 0x0e
    20e4:	ff 85       	ldd	r31, Y+15	; 0x0f
    20e6:	48 17       	cp	r20, r24
    20e8:	59 07       	cpc	r21, r25
    20ea:	10 f4       	brcc	.+4      	; 0x20f0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    20ec:	cf 01       	movw	r24, r30
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    20f0:	8e 0f       	add	r24, r30
    20f2:	9f 1f       	adc	r25, r31
    20f4:	84 1b       	sub	r24, r20
    20f6:	95 0b       	sbc	r25, r21
    20f8:	d9 01       	movw	r26, r18
    20fa:	a0 0f       	add	r26, r16
    20fc:	b1 1f       	adc	r27, r17
    20fe:	2d 91       	ld	r18, X+
    2100:	3c 91       	ld	r19, X
    2102:	aa 81       	ldd	r26, Y+2	; 0x02
    2104:	bb 81       	ldd	r27, Y+3	; 0x03
    2106:	a0 0f       	add	r26, r16
    2108:	b1 1f       	adc	r27, r17
    210a:	4d 91       	ld	r20, X+
    210c:	5c 91       	ld	r21, X
    210e:	24 17       	cp	r18, r20
    2110:	35 07       	cpc	r19, r21
    2112:	20 f0       	brcs	.+8      	; 0x211c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2114:	e4 0f       	add	r30, r20
    2116:	f5 1f       	adc	r31, r21
    2118:	e2 1b       	sub	r30, r18
    211a:	f3 0b       	sbc	r31, r19
    211c:	e8 1b       	sub	r30, r24
    211e:	f9 0b       	sbc	r31, r25
    2120:	a9 f0       	breq	.+42     	; 0x214c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2122:	d7 01       	movw	r26, r14
    2124:	2d 91       	ld	r18, X+
    2126:	3c 91       	ld	r19, X
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	28 1b       	sub	r18, r24
    212e:	39 0b       	sbc	r19, r25
    2130:	41 09       	sbc	r20, r1
    2132:	51 09       	sbc	r21, r1
    2134:	a8 ee       	ldi	r26, 0xE8	; 232
    2136:	b3 e0       	ldi	r27, 0x03	; 3
    2138:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__muluhisi3>
    213c:	9f 01       	movw	r18, r30
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divmodsi4>
    2146:	37 fd       	sbrc	r19, 7
    2148:	0a c0       	rjmp	.+20     	; 0x215e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	29 3e       	cpi	r18, 0xE9	; 233
    2152:	b3 e0       	ldi	r27, 0x03	; 3
    2154:	3b 07       	cpc	r19, r27
    2156:	2c f0       	brlt	.+10     	; 0x2162 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2158:	28 ee       	ldi	r18, 0xE8	; 232
    215a:	33 e0       	ldi	r19, 0x03	; 3
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	f7 01       	movw	r30, r14
    2164:	21 93       	st	Z+, r18
    2166:	31 93       	st	Z+, r19
    2168:	7f 01       	movw	r14, r30
    216a:	ff ef       	ldi	r31, 0xFF	; 255
    216c:	cf 1a       	sub	r12, r31
    216e:	df 0a       	sbc	r13, r31
    2170:	0e 5f       	subi	r16, 0xFE	; 254
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	86 cf       	rjmp	.-244    	; 0x2082 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	e9 e0       	ldi	r30, 0x09	; 9
    217c:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x12>

00002180 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2180:	a0 e0       	ldi	r26, 0x00	; 0
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e6 ec       	ldi	r30, 0xC6	; 198
    2186:	f0 e1       	ldi	r31, 0x10	; 16
    2188:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__prologue_saves__>
    218c:	ec 01       	movw	r28, r24
    218e:	8b 01       	movw	r16, r22
    2190:	82 2e       	mov	r8, r18
    2192:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2196:	28 84       	ldd	r2, Y+8	; 0x08
    2198:	e8 01       	movw	r28, r16
    219a:	41 2c       	mov	r4, r1
    219c:	51 2c       	mov	r5, r1
    219e:	32 01       	movw	r6, r4
    21a0:	00 e0       	ldi	r16, 0x00	; 0
    21a2:	10 e0       	ldi	r17, 0x00	; 0
    21a4:	c1 2c       	mov	r12, r1
    21a6:	d1 2c       	mov	r13, r1
    21a8:	76 01       	movw	r14, r12
    21aa:	31 2c       	mov	r3, r1
    21ac:	91 2c       	mov	r9, r1
    21ae:	58 ee       	ldi	r21, 0xE8	; 232
    21b0:	a5 2e       	mov	r10, r21
    21b2:	53 e0       	ldi	r21, 0x03	; 3
    21b4:	b5 2e       	mov	r11, r21
    21b6:	92 14       	cp	r9, r2
    21b8:	21 f1       	breq	.+72     	; 0x2202 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    21ba:	e9 91       	ld	r30, Y+
    21bc:	f9 91       	ld	r31, Y+
    21be:	88 20       	and	r8, r8
    21c0:	21 f0       	breq	.+8      	; 0x21ca <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    21c2:	c5 01       	movw	r24, r10
    21c4:	8e 1b       	sub	r24, r30
    21c6:	9f 0b       	sbc	r25, r31
    21c8:	fc 01       	movw	r30, r24
    21ca:	e9 3c       	cpi	r30, 0xC9	; 201
    21cc:	f1 05       	cpc	r31, r1
    21ce:	24 f4       	brge	.+8      	; 0x21d8 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    21d0:	e3 33       	cpi	r30, 0x33	; 51
    21d2:	f1 05       	cpc	r31, r1
    21d4:	74 f0       	brlt	.+28     	; 0x21f2 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    21d8:	33 24       	eor	r3, r3
    21da:	33 94       	inc	r3
    21dc:	df 01       	movw	r26, r30
    21de:	a3 01       	movw	r20, r6
    21e0:	92 01       	movw	r18, r4
    21e2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__mulshisi3>
    21e6:	c6 0e       	add	r12, r22
    21e8:	d7 1e       	adc	r13, r23
    21ea:	e8 1e       	adc	r14, r24
    21ec:	f9 1e       	adc	r15, r25
    21ee:	0e 0f       	add	r16, r30
    21f0:	1f 1f       	adc	r17, r31
    21f2:	93 94       	inc	r9
    21f4:	98 ee       	ldi	r25, 0xE8	; 232
    21f6:	49 0e       	add	r4, r25
    21f8:	93 e0       	ldi	r25, 0x03	; 3
    21fa:	59 1e       	adc	r5, r25
    21fc:	61 1c       	adc	r6, r1
    21fe:	71 1c       	adc	r7, r1
    2200:	da cf       	rjmp	.-76     	; 0x21b6 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2202:	31 10       	cpse	r3, r1
    2204:	1e c0       	rjmp	.+60     	; 0x2242 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2206:	49 2d       	mov	r20, r9
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	41 50       	subi	r20, 0x01	; 1
    220c:	51 09       	sbc	r21, r1
    220e:	24 ef       	ldi	r18, 0xF4	; 244
    2210:	31 e0       	ldi	r19, 0x01	; 1
    2212:	42 9f       	mul	r20, r18
    2214:	c0 01       	movw	r24, r0
    2216:	43 9f       	mul	r20, r19
    2218:	90 0d       	add	r25, r0
    221a:	52 9f       	mul	r21, r18
    221c:	90 0d       	add	r25, r0
    221e:	11 24       	eor	r1, r1
    2220:	20 91 bd 01 	lds	r18, 0x01BD
    2224:	30 91 be 01 	lds	r19, 0x01BE
    2228:	28 17       	cp	r18, r24
    222a:	39 07       	cpc	r19, r25
    222c:	b4 f0       	brlt	.+44     	; 0x225a <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    222e:	88 ee       	ldi	r24, 0xE8	; 232
    2230:	93 e0       	ldi	r25, 0x03	; 3
    2232:	48 9f       	mul	r20, r24
    2234:	90 01       	movw	r18, r0
    2236:	49 9f       	mul	r20, r25
    2238:	30 0d       	add	r19, r0
    223a:	58 9f       	mul	r21, r24
    223c:	30 0d       	add	r19, r0
    223e:	11 24       	eor	r1, r1
    2240:	0e c0       	rjmp	.+28     	; 0x225e <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2242:	98 01       	movw	r18, r16
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	c7 01       	movw	r24, r14
    224a:	b6 01       	movw	r22, r12
    224c:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
    2250:	30 93 be 01 	sts	0x01BE, r19
    2254:	20 93 bd 01 	sts	0x01BD, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	c9 01       	movw	r24, r18
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	e2 e1       	ldi	r30, 0x12	; 18
    2266:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__>

0000226a <_ZN16PololuQTRSensorsD1Ev>:
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	ec 01       	movw	r28, r24
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	9b 81       	ldd	r25, Y+3	; 0x03
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	11 f0       	breq	.+4      	; 0x227c <_ZN16PololuQTRSensorsD1Ev+0x12>
    2278:	0e 94 bc 12 	call	0x2578	; 0x2578 <free>
    227c:	8e 81       	ldd	r24, Y+6	; 0x06
    227e:	9f 81       	ldd	r25, Y+7	; 0x07
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	11 f0       	breq	.+4      	; 0x2288 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2284:	0e 94 bc 12 	call	0x2578	; 0x2578 <free>
    2288:	88 81       	ld	r24, Y
    228a:	99 81       	ldd	r25, Y+1	; 0x01
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	11 f0       	breq	.+4      	; 0x2294 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2290:	0e 94 bc 12 	call	0x2578	; 0x2578 <free>
    2294:	8c 81       	ldd	r24, Y+4	; 0x04
    2296:	9d 81       	ldd	r25, Y+5	; 0x05
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	11 f0       	breq	.+4      	; 0x22a0 <_ZN16PololuQTRSensorsD1Ev+0x36>
    229c:	0e 94 bc 12 	call	0x2578	; 0x2578 <free>
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <__udivmodqi4>:
    22a6:	99 1b       	sub	r25, r25
    22a8:	79 e0       	ldi	r23, 0x09	; 9
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <__udivmodqi4_ep>

000022ac <__udivmodqi4_loop>:
    22ac:	99 1f       	adc	r25, r25
    22ae:	96 17       	cp	r25, r22
    22b0:	08 f0       	brcs	.+2      	; 0x22b4 <__udivmodqi4_ep>
    22b2:	96 1b       	sub	r25, r22

000022b4 <__udivmodqi4_ep>:
    22b4:	88 1f       	adc	r24, r24
    22b6:	7a 95       	dec	r23
    22b8:	c9 f7       	brne	.-14     	; 0x22ac <__udivmodqi4_loop>
    22ba:	80 95       	com	r24
    22bc:	08 95       	ret

000022be <__udivmodhi4>:
    22be:	aa 1b       	sub	r26, r26
    22c0:	bb 1b       	sub	r27, r27
    22c2:	51 e1       	ldi	r21, 0x11	; 17
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <__udivmodhi4_ep>

000022c6 <__udivmodhi4_loop>:
    22c6:	aa 1f       	adc	r26, r26
    22c8:	bb 1f       	adc	r27, r27
    22ca:	a6 17       	cp	r26, r22
    22cc:	b7 07       	cpc	r27, r23
    22ce:	10 f0       	brcs	.+4      	; 0x22d4 <__udivmodhi4_ep>
    22d0:	a6 1b       	sub	r26, r22
    22d2:	b7 0b       	sbc	r27, r23

000022d4 <__udivmodhi4_ep>:
    22d4:	88 1f       	adc	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	5a 95       	dec	r21
    22da:	a9 f7       	brne	.-22     	; 0x22c6 <__udivmodhi4_loop>
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	08 95       	ret

000022e6 <__divmodhi4>:
    22e6:	97 fb       	bst	r25, 7
    22e8:	07 2e       	mov	r0, r23
    22ea:	16 f4       	brtc	.+4      	; 0x22f0 <__divmodhi4+0xa>
    22ec:	00 94       	com	r0
    22ee:	07 d0       	rcall	.+14     	; 0x22fe <__divmodhi4_neg1>
    22f0:	77 fd       	sbrc	r23, 7
    22f2:	09 d0       	rcall	.+18     	; 0x2306 <__divmodhi4_neg2>
    22f4:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodhi4>
    22f8:	07 fc       	sbrc	r0, 7
    22fa:	05 d0       	rcall	.+10     	; 0x2306 <__divmodhi4_neg2>
    22fc:	3e f4       	brtc	.+14     	; 0x230c <__divmodhi4_exit>

000022fe <__divmodhi4_neg1>:
    22fe:	90 95       	com	r25
    2300:	81 95       	neg	r24
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	08 95       	ret

00002306 <__divmodhi4_neg2>:
    2306:	70 95       	com	r23
    2308:	61 95       	neg	r22
    230a:	7f 4f       	sbci	r23, 0xFF	; 255

0000230c <__divmodhi4_exit>:
    230c:	08 95       	ret

0000230e <__udivmodsi4>:
    230e:	a1 e2       	ldi	r26, 0x21	; 33
    2310:	1a 2e       	mov	r1, r26
    2312:	aa 1b       	sub	r26, r26
    2314:	bb 1b       	sub	r27, r27
    2316:	fd 01       	movw	r30, r26
    2318:	0d c0       	rjmp	.+26     	; 0x2334 <__udivmodsi4_ep>

0000231a <__udivmodsi4_loop>:
    231a:	aa 1f       	adc	r26, r26
    231c:	bb 1f       	adc	r27, r27
    231e:	ee 1f       	adc	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	a2 17       	cp	r26, r18
    2324:	b3 07       	cpc	r27, r19
    2326:	e4 07       	cpc	r30, r20
    2328:	f5 07       	cpc	r31, r21
    232a:	20 f0       	brcs	.+8      	; 0x2334 <__udivmodsi4_ep>
    232c:	a2 1b       	sub	r26, r18
    232e:	b3 0b       	sbc	r27, r19
    2330:	e4 0b       	sbc	r30, r20
    2332:	f5 0b       	sbc	r31, r21

00002334 <__udivmodsi4_ep>:
    2334:	66 1f       	adc	r22, r22
    2336:	77 1f       	adc	r23, r23
    2338:	88 1f       	adc	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	1a 94       	dec	r1
    233e:	69 f7       	brne	.-38     	; 0x231a <__udivmodsi4_loop>
    2340:	60 95       	com	r22
    2342:	70 95       	com	r23
    2344:	80 95       	com	r24
    2346:	90 95       	com	r25
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	bd 01       	movw	r22, r26
    234e:	cf 01       	movw	r24, r30
    2350:	08 95       	ret

00002352 <__divmodsi4>:
    2352:	05 2e       	mov	r0, r21
    2354:	97 fb       	bst	r25, 7
    2356:	1e f4       	brtc	.+6      	; 0x235e <__divmodsi4+0xc>
    2358:	00 94       	com	r0
    235a:	0e 94 c0 11 	call	0x2380	; 0x2380 <__negsi2>
    235e:	57 fd       	sbrc	r21, 7
    2360:	07 d0       	rcall	.+14     	; 0x2370 <__divmodsi4_neg2>
    2362:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
    2366:	07 fc       	sbrc	r0, 7
    2368:	03 d0       	rcall	.+6      	; 0x2370 <__divmodsi4_neg2>
    236a:	4e f4       	brtc	.+18     	; 0x237e <__divmodsi4_exit>
    236c:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__negsi2>

00002370 <__divmodsi4_neg2>:
    2370:	50 95       	com	r21
    2372:	40 95       	com	r20
    2374:	30 95       	com	r19
    2376:	21 95       	neg	r18
    2378:	3f 4f       	sbci	r19, 0xFF	; 255
    237a:	4f 4f       	sbci	r20, 0xFF	; 255
    237c:	5f 4f       	sbci	r21, 0xFF	; 255

0000237e <__divmodsi4_exit>:
    237e:	08 95       	ret

00002380 <__negsi2>:
    2380:	90 95       	com	r25
    2382:	80 95       	com	r24
    2384:	70 95       	com	r23
    2386:	61 95       	neg	r22
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	8f 4f       	sbci	r24, 0xFF	; 255
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	08 95       	ret

00002390 <__umulhisi3>:
    2390:	a2 9f       	mul	r26, r18
    2392:	b0 01       	movw	r22, r0
    2394:	b3 9f       	mul	r27, r19
    2396:	c0 01       	movw	r24, r0
    2398:	a3 9f       	mul	r26, r19
    239a:	70 0d       	add	r23, r0
    239c:	81 1d       	adc	r24, r1
    239e:	11 24       	eor	r1, r1
    23a0:	91 1d       	adc	r25, r1
    23a2:	b2 9f       	mul	r27, r18
    23a4:	70 0d       	add	r23, r0
    23a6:	81 1d       	adc	r24, r1
    23a8:	11 24       	eor	r1, r1
    23aa:	91 1d       	adc	r25, r1
    23ac:	08 95       	ret

000023ae <__muluhisi3>:
    23ae:	0e 94 c8 11 	call	0x2390	; 0x2390 <__umulhisi3>
    23b2:	a5 9f       	mul	r26, r21
    23b4:	90 0d       	add	r25, r0
    23b6:	b4 9f       	mul	r27, r20
    23b8:	90 0d       	add	r25, r0
    23ba:	a4 9f       	mul	r26, r20
    23bc:	80 0d       	add	r24, r0
    23be:	91 1d       	adc	r25, r1
    23c0:	11 24       	eor	r1, r1
    23c2:	08 95       	ret

000023c4 <__mulshisi3>:
    23c4:	b7 ff       	sbrs	r27, 7
    23c6:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__muluhisi3>

000023ca <__mulohisi3>:
    23ca:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__muluhisi3>
    23ce:	82 1b       	sub	r24, r18
    23d0:	93 0b       	sbc	r25, r19
    23d2:	08 95       	ret

000023d4 <__prologue_saves__>:
    23d4:	2f 92       	push	r2
    23d6:	3f 92       	push	r3
    23d8:	4f 92       	push	r4
    23da:	5f 92       	push	r5
    23dc:	6f 92       	push	r6
    23de:	7f 92       	push	r7
    23e0:	8f 92       	push	r8
    23e2:	9f 92       	push	r9
    23e4:	af 92       	push	r10
    23e6:	bf 92       	push	r11
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	ca 1b       	sub	r28, r26
    23fe:	db 0b       	sbc	r29, r27
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	09 94       	ijmp

0000240c <__epilogue_restores__>:
    240c:	2a 88       	ldd	r2, Y+18	; 0x12
    240e:	39 88       	ldd	r3, Y+17	; 0x11
    2410:	48 88       	ldd	r4, Y+16	; 0x10
    2412:	5f 84       	ldd	r5, Y+15	; 0x0f
    2414:	6e 84       	ldd	r6, Y+14	; 0x0e
    2416:	7d 84       	ldd	r7, Y+13	; 0x0d
    2418:	8c 84       	ldd	r8, Y+12	; 0x0c
    241a:	9b 84       	ldd	r9, Y+11	; 0x0b
    241c:	aa 84       	ldd	r10, Y+10	; 0x0a
    241e:	b9 84       	ldd	r11, Y+9	; 0x09
    2420:	c8 84       	ldd	r12, Y+8	; 0x08
    2422:	df 80       	ldd	r13, Y+7	; 0x07
    2424:	ee 80       	ldd	r14, Y+6	; 0x06
    2426:	fd 80       	ldd	r15, Y+5	; 0x05
    2428:	0c 81       	ldd	r16, Y+4	; 0x04
    242a:	1b 81       	ldd	r17, Y+3	; 0x03
    242c:	aa 81       	ldd	r26, Y+2	; 0x02
    242e:	b9 81       	ldd	r27, Y+1	; 0x01
    2430:	ce 0f       	add	r28, r30
    2432:	d1 1d       	adc	r29, r1
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	ed 01       	movw	r28, r26
    2440:	08 95       	ret

00002442 <__tablejump2__>:
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	05 90       	lpm	r0, Z+
    2448:	f4 91       	lpm	r31, Z
    244a:	e0 2d       	mov	r30, r0
    244c:	09 94       	ijmp

0000244e <malloc>:
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	91 05       	cpc	r25, r1
    2456:	10 f4       	brcc	.+4      	; 0x245c <malloc+0xe>
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	e0 91 48 02 	lds	r30, 0x0248
    2460:	f0 91 49 02 	lds	r31, 0x0249
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	c0 e0       	ldi	r28, 0x00	; 0
    246a:	d0 e0       	ldi	r29, 0x00	; 0
    246c:	30 97       	sbiw	r30, 0x00	; 0
    246e:	11 f1       	breq	.+68     	; 0x24b4 <malloc+0x66>
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	48 17       	cp	r20, r24
    2476:	59 07       	cpc	r21, r25
    2478:	c0 f0       	brcs	.+48     	; 0x24aa <malloc+0x5c>
    247a:	48 17       	cp	r20, r24
    247c:	59 07       	cpc	r21, r25
    247e:	61 f4       	brne	.+24     	; 0x2498 <malloc+0x4a>
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 97       	sbiw	r28, 0x00	; 0
    2486:	19 f0       	breq	.+6      	; 0x248e <malloc+0x40>
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	8a 83       	std	Y+2, r24	; 0x02
    248c:	2b c0       	rjmp	.+86     	; 0x24e4 <malloc+0x96>
    248e:	90 93 49 02 	sts	0x0249, r25
    2492:	80 93 48 02 	sts	0x0248, r24
    2496:	26 c0       	rjmp	.+76     	; 0x24e4 <malloc+0x96>
    2498:	21 15       	cp	r18, r1
    249a:	31 05       	cpc	r19, r1
    249c:	19 f0       	breq	.+6      	; 0x24a4 <malloc+0x56>
    249e:	42 17       	cp	r20, r18
    24a0:	53 07       	cpc	r21, r19
    24a2:	18 f4       	brcc	.+6      	; 0x24aa <malloc+0x5c>
    24a4:	9a 01       	movw	r18, r20
    24a6:	be 01       	movw	r22, r28
    24a8:	df 01       	movw	r26, r30
    24aa:	ef 01       	movw	r28, r30
    24ac:	02 80       	ldd	r0, Z+2	; 0x02
    24ae:	f3 81       	ldd	r31, Z+3	; 0x03
    24b0:	e0 2d       	mov	r30, r0
    24b2:	dc cf       	rjmp	.-72     	; 0x246c <malloc+0x1e>
    24b4:	21 15       	cp	r18, r1
    24b6:	31 05       	cpc	r19, r1
    24b8:	09 f1       	breq	.+66     	; 0x24fc <malloc+0xae>
    24ba:	28 1b       	sub	r18, r24
    24bc:	39 0b       	sbc	r19, r25
    24be:	24 30       	cpi	r18, 0x04	; 4
    24c0:	31 05       	cpc	r19, r1
    24c2:	90 f4       	brcc	.+36     	; 0x24e8 <malloc+0x9a>
    24c4:	12 96       	adiw	r26, 0x02	; 2
    24c6:	8d 91       	ld	r24, X+
    24c8:	9c 91       	ld	r25, X
    24ca:	13 97       	sbiw	r26, 0x03	; 3
    24cc:	61 15       	cp	r22, r1
    24ce:	71 05       	cpc	r23, r1
    24d0:	21 f0       	breq	.+8      	; 0x24da <malloc+0x8c>
    24d2:	fb 01       	movw	r30, r22
    24d4:	93 83       	std	Z+3, r25	; 0x03
    24d6:	82 83       	std	Z+2, r24	; 0x02
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <malloc+0x94>
    24da:	90 93 49 02 	sts	0x0249, r25
    24de:	80 93 48 02 	sts	0x0248, r24
    24e2:	fd 01       	movw	r30, r26
    24e4:	32 96       	adiw	r30, 0x02	; 2
    24e6:	44 c0       	rjmp	.+136    	; 0x2570 <malloc+0x122>
    24e8:	fd 01       	movw	r30, r26
    24ea:	e2 0f       	add	r30, r18
    24ec:	f3 1f       	adc	r31, r19
    24ee:	81 93       	st	Z+, r24
    24f0:	91 93       	st	Z+, r25
    24f2:	22 50       	subi	r18, 0x02	; 2
    24f4:	31 09       	sbc	r19, r1
    24f6:	2d 93       	st	X+, r18
    24f8:	3c 93       	st	X, r19
    24fa:	3a c0       	rjmp	.+116    	; 0x2570 <malloc+0x122>
    24fc:	20 91 46 02 	lds	r18, 0x0246
    2500:	30 91 47 02 	lds	r19, 0x0247
    2504:	23 2b       	or	r18, r19
    2506:	41 f4       	brne	.+16     	; 0x2518 <malloc+0xca>
    2508:	20 91 10 01 	lds	r18, 0x0110
    250c:	30 91 11 01 	lds	r19, 0x0111
    2510:	30 93 47 02 	sts	0x0247, r19
    2514:	20 93 46 02 	sts	0x0246, r18
    2518:	20 91 0e 01 	lds	r18, 0x010E
    251c:	30 91 0f 01 	lds	r19, 0x010F
    2520:	21 15       	cp	r18, r1
    2522:	31 05       	cpc	r19, r1
    2524:	41 f4       	brne	.+16     	; 0x2536 <malloc+0xe8>
    2526:	2d b7       	in	r18, 0x3d	; 61
    2528:	3e b7       	in	r19, 0x3e	; 62
    252a:	40 91 12 01 	lds	r20, 0x0112
    252e:	50 91 13 01 	lds	r21, 0x0113
    2532:	24 1b       	sub	r18, r20
    2534:	35 0b       	sbc	r19, r21
    2536:	e0 91 46 02 	lds	r30, 0x0246
    253a:	f0 91 47 02 	lds	r31, 0x0247
    253e:	e2 17       	cp	r30, r18
    2540:	f3 07       	cpc	r31, r19
    2542:	a0 f4       	brcc	.+40     	; 0x256c <malloc+0x11e>
    2544:	2e 1b       	sub	r18, r30
    2546:	3f 0b       	sbc	r19, r31
    2548:	28 17       	cp	r18, r24
    254a:	39 07       	cpc	r19, r25
    254c:	78 f0       	brcs	.+30     	; 0x256c <malloc+0x11e>
    254e:	ac 01       	movw	r20, r24
    2550:	4e 5f       	subi	r20, 0xFE	; 254
    2552:	5f 4f       	sbci	r21, 0xFF	; 255
    2554:	24 17       	cp	r18, r20
    2556:	35 07       	cpc	r19, r21
    2558:	48 f0       	brcs	.+18     	; 0x256c <malloc+0x11e>
    255a:	4e 0f       	add	r20, r30
    255c:	5f 1f       	adc	r21, r31
    255e:	50 93 47 02 	sts	0x0247, r21
    2562:	40 93 46 02 	sts	0x0246, r20
    2566:	81 93       	st	Z+, r24
    2568:	91 93       	st	Z+, r25
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <malloc+0x122>
    256c:	e0 e0       	ldi	r30, 0x00	; 0
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	cf 01       	movw	r24, r30
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <free>:
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	09 f4       	brne	.+2      	; 0x2586 <free+0xe>
    2584:	8c c0       	rjmp	.+280    	; 0x269e <free+0x126>
    2586:	fc 01       	movw	r30, r24
    2588:	32 97       	sbiw	r30, 0x02	; 2
    258a:	13 82       	std	Z+3, r1	; 0x03
    258c:	12 82       	std	Z+2, r1	; 0x02
    258e:	00 91 48 02 	lds	r16, 0x0248
    2592:	10 91 49 02 	lds	r17, 0x0249
    2596:	01 15       	cp	r16, r1
    2598:	11 05       	cpc	r17, r1
    259a:	81 f4       	brne	.+32     	; 0x25bc <free+0x44>
    259c:	20 81       	ld	r18, Z
    259e:	31 81       	ldd	r19, Z+1	; 0x01
    25a0:	82 0f       	add	r24, r18
    25a2:	93 1f       	adc	r25, r19
    25a4:	20 91 46 02 	lds	r18, 0x0246
    25a8:	30 91 47 02 	lds	r19, 0x0247
    25ac:	28 17       	cp	r18, r24
    25ae:	39 07       	cpc	r19, r25
    25b0:	79 f5       	brne	.+94     	; 0x2610 <free+0x98>
    25b2:	f0 93 47 02 	sts	0x0247, r31
    25b6:	e0 93 46 02 	sts	0x0246, r30
    25ba:	71 c0       	rjmp	.+226    	; 0x269e <free+0x126>
    25bc:	d8 01       	movw	r26, r16
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	ae 17       	cp	r26, r30
    25c4:	bf 07       	cpc	r27, r31
    25c6:	50 f4       	brcc	.+20     	; 0x25dc <free+0x64>
    25c8:	12 96       	adiw	r26, 0x02	; 2
    25ca:	2d 91       	ld	r18, X+
    25cc:	3c 91       	ld	r19, X
    25ce:	13 97       	sbiw	r26, 0x03	; 3
    25d0:	ad 01       	movw	r20, r26
    25d2:	21 15       	cp	r18, r1
    25d4:	31 05       	cpc	r19, r1
    25d6:	09 f1       	breq	.+66     	; 0x261a <free+0xa2>
    25d8:	d9 01       	movw	r26, r18
    25da:	f3 cf       	rjmp	.-26     	; 0x25c2 <free+0x4a>
    25dc:	9d 01       	movw	r18, r26
    25de:	da 01       	movw	r26, r20
    25e0:	33 83       	std	Z+3, r19	; 0x03
    25e2:	22 83       	std	Z+2, r18	; 0x02
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	86 0f       	add	r24, r22
    25ea:	97 1f       	adc	r25, r23
    25ec:	82 17       	cp	r24, r18
    25ee:	93 07       	cpc	r25, r19
    25f0:	69 f4       	brne	.+26     	; 0x260c <free+0x94>
    25f2:	ec 01       	movw	r28, r24
    25f4:	28 81       	ld	r18, Y
    25f6:	39 81       	ldd	r19, Y+1	; 0x01
    25f8:	26 0f       	add	r18, r22
    25fa:	37 1f       	adc	r19, r23
    25fc:	2e 5f       	subi	r18, 0xFE	; 254
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	31 83       	std	Z+1, r19	; 0x01
    2602:	20 83       	st	Z, r18
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	93 83       	std	Z+3, r25	; 0x03
    260a:	82 83       	std	Z+2, r24	; 0x02
    260c:	45 2b       	or	r20, r21
    260e:	29 f4       	brne	.+10     	; 0x261a <free+0xa2>
    2610:	f0 93 49 02 	sts	0x0249, r31
    2614:	e0 93 48 02 	sts	0x0248, r30
    2618:	42 c0       	rjmp	.+132    	; 0x269e <free+0x126>
    261a:	13 96       	adiw	r26, 0x03	; 3
    261c:	fc 93       	st	X, r31
    261e:	ee 93       	st	-X, r30
    2620:	12 97       	sbiw	r26, 0x02	; 2
    2622:	ed 01       	movw	r28, r26
    2624:	49 91       	ld	r20, Y+
    2626:	59 91       	ld	r21, Y+
    2628:	9e 01       	movw	r18, r28
    262a:	24 0f       	add	r18, r20
    262c:	35 1f       	adc	r19, r21
    262e:	e2 17       	cp	r30, r18
    2630:	f3 07       	cpc	r31, r19
    2632:	71 f4       	brne	.+28     	; 0x2650 <free+0xd8>
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	84 0f       	add	r24, r20
    263a:	95 1f       	adc	r25, r21
    263c:	02 96       	adiw	r24, 0x02	; 2
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	13 96       	adiw	r26, 0x03	; 3
    264a:	9c 93       	st	X, r25
    264c:	8e 93       	st	-X, r24
    264e:	12 97       	sbiw	r26, 0x02	; 2
    2650:	e0 e0       	ldi	r30, 0x00	; 0
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	d8 01       	movw	r26, r16
    2656:	12 96       	adiw	r26, 0x02	; 2
    2658:	8d 91       	ld	r24, X+
    265a:	9c 91       	ld	r25, X
    265c:	13 97       	sbiw	r26, 0x03	; 3
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	19 f0       	breq	.+6      	; 0x2668 <free+0xf0>
    2662:	f8 01       	movw	r30, r16
    2664:	8c 01       	movw	r16, r24
    2666:	f6 cf       	rjmp	.-20     	; 0x2654 <free+0xdc>
    2668:	8d 91       	ld	r24, X+
    266a:	9c 91       	ld	r25, X
    266c:	98 01       	movw	r18, r16
    266e:	2e 5f       	subi	r18, 0xFE	; 254
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	82 0f       	add	r24, r18
    2674:	93 1f       	adc	r25, r19
    2676:	20 91 46 02 	lds	r18, 0x0246
    267a:	30 91 47 02 	lds	r19, 0x0247
    267e:	28 17       	cp	r18, r24
    2680:	39 07       	cpc	r19, r25
    2682:	69 f4       	brne	.+26     	; 0x269e <free+0x126>
    2684:	30 97       	sbiw	r30, 0x00	; 0
    2686:	29 f4       	brne	.+10     	; 0x2692 <free+0x11a>
    2688:	10 92 49 02 	sts	0x0249, r1
    268c:	10 92 48 02 	sts	0x0248, r1
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <free+0x11e>
    2692:	13 82       	std	Z+3, r1	; 0x03
    2694:	12 82       	std	Z+2, r1	; 0x02
    2696:	10 93 47 02 	sts	0x0247, r17
    269a:	00 93 46 02 	sts	0x0246, r16
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	08 95       	ret

000026a8 <__do_global_dtors>:
    26a8:	10 e0       	ldi	r17, 0x00	; 0
    26aa:	c5 e5       	ldi	r28, 0x55	; 85
    26ac:	d0 e0       	ldi	r29, 0x00	; 0
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <__do_global_dtors+0x10>
    26b0:	fe 01       	movw	r30, r28
    26b2:	0e 94 21 12 	call	0x2442	; 0x2442 <__tablejump2__>
    26b6:	21 96       	adiw	r28, 0x01	; 1
    26b8:	c6 35       	cpi	r28, 0x56	; 86
    26ba:	d1 07       	cpc	r29, r17
    26bc:	c9 f7       	brne	.-14     	; 0x26b0 <__do_global_dtors+0x8>
    26be:	f8 94       	cli

000026c0 <__stop_program>:
    26c0:	ff cf       	rjmp	.-2      	; 0x26c0 <__stop_program>
