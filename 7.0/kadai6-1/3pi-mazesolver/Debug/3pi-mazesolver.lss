
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000025b8  0000264c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  0080015e  0080015e  000026aa  2**0
                  ALLOC
  3 .stab         00006f54  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000122e2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012324  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  00012364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001331  00000000  00000000  00012454  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000076e  00000000  00000000  00013785  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000eb1  00000000  00000000  00013ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000214  00000000  00000000  00014da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004a9  00000000  00000000  00014fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000661  00000000  00000000  00015461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00015ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__dtors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_end>:
      aa:	c2 0b       	sbc	r28, r18

000000ac <__dtors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 eb       	ldi	r30, 0xB8	; 184
      c0:	f5 e2       	ldi	r31, 0x25	; 37
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 35       	cpi	r26, 0x5E	; 94
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	ae e5       	ldi	r26, 0x5E	; 94
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a1 33       	cpi	r26, 0x31	; 49
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 40 02 	call	0x480	; 0x480 <main>
      e2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__do_global_dtors>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	88 e6       	ldi	r24, 0x68	; 104
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      fe:	62 e0       	ldi	r22, 0x02	; 2
     100:	8a e6       	ldi	r24, 0x6A	; 106
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	8b e6       	ldi	r24, 0x6B	; 107
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	8c e6       	ldi	r24, 0x6C	; 108
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	8d e6       	ldi	r24, 0x6D	; 109
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	8e e6       	ldi	r24, 0x6E	; 110
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     130:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <clear>

00000134 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2a 97       	sbiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	8c 01       	movw	r16, r24
     158:	7c 01       	movw	r14, r24
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	e8 0e       	add	r14, r24
     15e:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     164:	95 e6       	ldi	r25, 0x65	; 101
     166:	c9 2e       	mov	r12, r25
     168:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	e4 e1       	ldi	r30, 0x14	; 20
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	de 01       	movw	r26, r28
     170:	11 96       	adiw	r26, 0x01	; 1
     172:	8b 2d       	mov	r24, r11
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     17c:	f8 01       	movw	r30, r16
     17e:	81 91       	ld	r24, Z+
     180:	91 91       	ld	r25, Z+
     182:	8f 01       	movw	r16, r30
     184:	b6 01       	movw	r22, r12
     186:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ec 0f       	add	r30, r28
     190:	fd 1f       	adc	r31, r29
     192:	e6 0f       	add	r30, r22
     194:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     196:	80 81       	ld	r24, Z
     198:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     19c:	0e 15       	cp	r16, r14
     19e:	1f 05       	cpc	r17, r15
     1a0:	21 f7       	brne	.-56     	; 0x16a <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	08 95       	ret

000001c2 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1c2:	2f 92       	push	r2
     1c4:	3f 92       	push	r3
     1c6:	4f 92       	push	r4
     1c8:	5f 92       	push	r5
     1ca:	6f 92       	push	r6
     1cc:	7f 92       	push	r7
     1ce:	8f 92       	push	r8
     1d0:	9f 92       	push	r9
     1d2:	af 92       	push	r10
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1fc:	a1 2c       	mov	r10, r1
     1fe:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/25 + integral/12000 + derivative*3/2;
     200:	60 ee       	ldi	r22, 0xE0	; 224
     202:	46 2e       	mov	r4, r22
     204:	6e e2       	ldi	r22, 0x2E	; 46
     206:	56 2e       	mov	r5, r22
     208:	61 2c       	mov	r6, r1
     20a:	71 2c       	mov	r7, r1
     20c:	79 e1       	ldi	r23, 0x19	; 25
     20e:	27 2e       	mov	r2, r23
     210:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     212:	e2 e3       	ldi	r30, 0x32	; 50
     214:	8e 2e       	mov	r8, r30
     216:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 88 0b 	call	0x1710	; 0x1710 <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     222:	8c 01       	movw	r16, r24
     224:	00 5d       	subi	r16, 0xD0	; 208
     226:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     228:	c8 01       	movw	r24, r16
     22a:	01 2e       	mov	r0, r17
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	c8 0e       	add	r12, r24
     234:	d9 1e       	adc	r13, r25
     236:	ea 1e       	adc	r14, r26
     238:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/25 + integral/12000 + derivative*3/2;
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	a3 01       	movw	r20, r6
     240:	92 01       	movw	r18, r4
     242:	0e 94 24 11 	call	0x2248	; 0x2248 <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     246:	f8 01       	movw	r30, r16
     248:	ea 19       	sub	r30, r10
     24a:	fb 09       	sbc	r31, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/25 + integral/12000 + derivative*3/2;
     24c:	cf 01       	movw	r24, r30
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	8e 0f       	add	r24, r30
     254:	9f 1f       	adc	r25, r31
     256:	97 fd       	sbrc	r25, 7
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	95 95       	asr	r25
     25c:	87 95       	ror	r24
     25e:	28 0f       	add	r18, r24
     260:	39 1f       	adc	r19, r25
     262:	c8 01       	movw	r24, r16
     264:	b1 01       	movw	r22, r2
     266:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divmodhi4>
     26a:	c9 01       	movw	r24, r18
     26c:	86 0f       	add	r24, r22
     26e:	97 1f       	adc	r25, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 50; // the maximum speed
		if(power_difference > max)
     270:	83 33       	cpi	r24, 0x33	; 51
     272:	91 05       	cpc	r25, r1
     274:	6c f4       	brge	.+26     	; 0x290 <follow_segment+0xce>
			power_difference = max;
		if(power_difference < -max)
     276:	8e 3c       	cpi	r24, 0xCE	; 206
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	92 07       	cpc	r25, r18
     27c:	1c f0       	brlt	.+6      	; 0x284 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     27e:	97 fd       	sbrc	r25, 7
     280:	03 c0       	rjmp	.+6      	; 0x288 <follow_segment+0xc6>
     282:	08 c0       	rjmp	.+16     	; 0x294 <follow_segment+0xd2>
		// to a negative value.
		const int max = 50; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     284:	8e ec       	ldi	r24, 0xCE	; 206
     286:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     288:	62 e3       	ldi	r22, 0x32	; 50
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	c2 96       	adiw	r24, 0x32	; 50
     28e:	07 c0       	rjmp	.+14     	; 0x29e <follow_segment+0xdc>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 50; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     290:	82 e3       	ldi	r24, 0x32	; 50
     292:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     294:	b4 01       	movw	r22, r8
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	82 e3       	ldi	r24, 0x32	; 50
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	50 f4       	brcc	.+20     	; 0x2c0 <follow_segment+0xfe>
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	9e 81       	ldd	r25, Y+6	; 0x06
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <follow_segment+0xfe>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	60 f0       	brcs	.+24     	; 0x2d8 <follow_segment+0x116>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	38 f4       	brcc	.+14     	; 0x2d8 <follow_segment+0x116>
     2ca:	89 85       	ldd	r24, Y+9	; 0x09
     2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	10 f4       	brcc	.+4      	; 0x2d8 <follow_segment+0x116>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2d4:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2d6:	a0 cf       	rjmp	.-192    	; 0x218 <follow_segment+0x56>
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	08 95       	ret

0000030a <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	2a 97       	sbiw	r28, 0x0a	; 10
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     322:	80 ed       	ldi	r24, 0xD0	; 208
     324:	97 e0       	ldi	r25, 0x07	; 7
     326:	0e 94 be 0b 	call	0x177c	; 0x177c <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     32a:	0e 94 75 00 	call	0xea	; 0xea <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     32e:	82 ea       	ldi	r24, 0xA2	; 162
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 74 09 	call	0x12e8	; 0x12e8 <print_from_program_space>
	lcd_goto_xy(0,1);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     33e:	89 e9       	ldi	r24, 0x99	; 153
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 74 09 	call	0x12e8	; 0x12e8 <print_from_program_space>
	play_from_program_space(welcome);
     346:	83 e8       	ldi	r24, 0x83	; 131
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 21 08 	call	0x1042	; 0x1042 <play_from_program_space>
	delay_ms(1000);
     34e:	88 ee       	ldi	r24, 0xE8	; 232
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>

	clear();
     356:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>
	print_from_program_space(demo_name_line1);
     35a:	84 e9       	ldi	r24, 0x94	; 148
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <print_from_program_space>
	lcd_goto_xy(0,1);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     36a:	8d e8       	ldi	r24, 0x8D	; 141
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <print_from_program_space>
	delay_ms(1000);
     372:	88 ee       	ldi	r24, 0xE8	; 232
     374:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     376:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <button_is_pressed>
     380:	81 11       	cpse	r24, r1
     382:	1a c0       	rjmp	.+52     	; 0x3b8 <initialize+0xae>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     384:	0e 94 e6 04 	call	0x9cc	; 0x9cc <read_battery_millivolts_3pi>
     388:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     38a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>
		print_long(bat);
     38e:	b8 01       	movw	r22, r16
     390:	11 0f       	add	r17, r17
     392:	88 0b       	sbc	r24, r24
     394:	99 0b       	sbc	r25, r25
     396:	0e 94 c9 09 	call	0x1392	; 0x1392 <print_long>
		print("mV");
     39a:	8b e3       	ldi	r24, 0x3B	; 59
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>
		lcd_goto_xy(0,1);
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
		print("Press B");
     3aa:	8e e3       	ldi	r24, 0x3E	; 62
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>

		delay_ms(100);
     3b2:	84 e6       	ldi	r24, 0x64	; 100
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	df cf       	rjmp	.-66     	; 0x376 <initialize+0x6c>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <wait_for_button_release>
	delay_ms(1000);
     3be:	88 ee       	ldi	r24, 0xE8	; 232
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
     3c6:	0c ee       	ldi	r16, 0xEC	; 236
     3c8:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3ca:	08 32       	cpi	r16, 0x28	; 40
     3cc:	11 05       	cpc	r17, r1
     3ce:	28 f0       	brcs	.+10     	; 0x3da <initialize+0xd0>
			set_motors(40,-40);
     3d0:	68 ed       	ldi	r22, 0xD8	; 216
     3d2:	7f ef       	ldi	r23, 0xFF	; 255
     3d4:	88 e2       	ldi	r24, 0x28	; 40
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <initialize+0xd8>
		else
			set_motors(-40,40);
     3da:	68 e2       	ldi	r22, 0x28	; 40
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	88 ed       	ldi	r24, 0xD8	; 216
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 82 0b 	call	0x1704	; 0x1704 <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     3ec:	84 e1       	ldi	r24, 0x14	; 20
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     3f8:	0c 33       	cpi	r16, 0x3C	; 60
     3fa:	11 05       	cpc	r17, r1
     3fc:	31 f7       	brne	.-52     	; 0x3ca <initialize+0xc0>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     40a:	80 e1       	ldi	r24, 0x10	; 16
     40c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <button_is_pressed>
     410:	81 11       	cpse	r24, r1
     412:	1a c0       	rjmp	.+52     	; 0x448 <initialize+0x13e>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 88 0b 	call	0x1710	; 0x1710 <read_line>
     41e:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     420:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>
		print_long(position);
     424:	b8 01       	movw	r22, r16
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 c9 09 	call	0x1392	; 0x1392 <print_long>
		lcd_goto_xy(0,1);
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
		display_readings(sensors);
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	0e 94 9a 00 	call	0x134	; 0x134 <display_readings>

		delay_ms(100);
     43e:	84 e6       	ldi	r24, 0x64	; 100
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
     446:	e1 cf       	rjmp	.-62     	; 0x40a <initialize+0x100>
	}
	wait_for_button_release(BUTTON_B);
     448:	80 e1       	ldi	r24, 0x10	; 16
     44a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <wait_for_button_release>

	clear();
     44e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>

	print("Go!");		
     452:	86 e4       	ldi	r24, 0x46	; 70
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     45a:	86 e7       	ldi	r24, 0x76	; 118
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 21 08 	call	0x1042	; 0x1042 <play_from_program_space>
	while(is_playing());
     462:	0e 94 00 08 	call	0x1000	; 0x1000 <is_playing>
     466:	81 11       	cpse	r24, r1
     468:	fc cf       	rjmp	.-8      	; 0x462 <initialize+0x158>
}
     46a:	2a 96       	adiw	r28, 0x0a	; 10
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     480:	0e 94 85 01 	call	0x30a	; 0x30a <initialize>

	// Call our maze solving routine.
	maze_solve();
     484:	0e 94 b7 02 	call	0x56e	; 0x56e <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     488:	ff cf       	rjmp	.-2      	; 0x488 <main+0x8>

0000048a <display_path>:
void display_path()
{
	// Set the last character of the path to a 0 so that the print()
	// function can find the end of the string.  This is how strings
	// are normally terminated in C.
	path[path_length] = 0;
     48a:	e0 91 c4 01 	lds	r30, 0x01C4
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	eb 53       	subi	r30, 0x3B	; 59
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	10 82       	st	Z, r1

	clear();
     496:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>
	print(path);
     49a:	85 ec       	ldi	r24, 0xC5	; 197
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>

	if(path_length > 8)
     4a2:	80 91 c4 01 	lds	r24, 0x01C4
     4a6:	89 30       	cpi	r24, 0x09	; 9
     4a8:	40 f0       	brcs	.+16     	; 0x4ba <display_path+0x30>
	{
		lcd_goto_xy(0,1);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
		print(path+8);
     4b2:	8d ec       	ldi	r24, 0xCD	; 205
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <print>
     4ba:	08 95       	ret

000004bc <select_turn>:
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right)
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
     4bc:	81 11       	cpse	r24, r1
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <select_turn+0x10>
		return 'L';
	else if(found_straight)
     4c0:	61 11       	cpse	r22, r1
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <select_turn+0x14>
		return 'S';
	else if(found_right)
     4c4:	41 11       	cpse	r20, r1
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <select_turn+0x18>
		return 'R';
	else
		return 'B';
     4c8:	82 e4       	ldi	r24, 0x42	; 66
     4ca:	08 95       	ret
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
		return 'L';
     4cc:	8c e4       	ldi	r24, 0x4C	; 76
     4ce:	08 95       	ret
	else if(found_straight)
		return 'S';
     4d0:	83 e5       	ldi	r24, 0x53	; 83
     4d2:	08 95       	ret
	else if(found_right)
		return 'R';
     4d4:	82 e5       	ldi	r24, 0x52	; 82
	else
		return 'B';
}
     4d6:	08 95       	ret

000004d8 <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplify_path()
{
	// only simplify the path if the second-to-last turn was a 'B'
	if(path_length < 3 || path[path_length-2] != 'B')
     4d8:	40 91 c4 01 	lds	r20, 0x01C4
     4dc:	43 30       	cpi	r20, 0x03	; 3
     4de:	08 f4       	brcc	.+2      	; 0x4e2 <simplify_path+0xa>
     4e0:	45 c0       	rjmp	.+138    	; 0x56c <simplify_path+0x94>
     4e2:	24 2f       	mov	r18, r20
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	2b 53       	subi	r18, 0x3B	; 59
     4e8:	3e 4f       	sbci	r19, 0xFE	; 254
     4ea:	f9 01       	movw	r30, r18
     4ec:	32 97       	sbiw	r30, 0x02	; 2
     4ee:	80 81       	ld	r24, Z
     4f0:	82 34       	cpi	r24, 0x42	; 66
     4f2:	e1 f5       	brne	.+120    	; 0x56c <simplify_path+0x94>
     4f4:	f9 01       	movw	r30, r18
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
     4fe:	52 91       	ld	r21, -Z
     500:	5c 34       	cpi	r21, 0x4C	; 76
     502:	51 f0       	breq	.+20     	; 0x518 <simplify_path+0x40>
     504:	52 35       	cpi	r21, 0x52	; 82
     506:	29 f0       	breq	.+10     	; 0x512 <simplify_path+0x3a>
     508:	52 34       	cpi	r21, 0x42	; 66
     50a:	41 f4       	brne	.+16     	; 0x51c <simplify_path+0x44>
			break;
		case 'L':
			total_angle += 270;
			break;
		case 'B':
			total_angle += 180;
     50c:	8c 54       	subi	r24, 0x4C	; 76
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     510:	05 c0       	rjmp	.+10     	; 0x51c <simplify_path+0x44>
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
		{
		case 'R':
			total_angle += 90;
     512:	86 5a       	subi	r24, 0xA6	; 166
     514:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     516:	02 c0       	rjmp	.+4      	; 0x51c <simplify_path+0x44>
		case 'L':
			total_angle += 270;
     518:	82 5f       	subi	r24, 0xF2	; 242
     51a:	9e 4f       	sbci	r25, 0xFE	; 254
	if(path_length < 3 || path[path_length-2] != 'B')
		return;

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	64 30       	cpi	r22, 0x04	; 4
     522:	71 05       	cpc	r23, r1
     524:	61 f7       	brne	.-40     	; 0x4fe <simplify_path+0x26>
			break;
		}
	}

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;
     526:	68 e6       	ldi	r22, 0x68	; 104
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divmodhi4>

	// Replace all of those turns with a single one.
	switch(total_angle)
     52e:	8a 35       	cpi	r24, 0x5A	; 90
     530:	91 05       	cpc	r25, r1
     532:	89 f0       	breq	.+34     	; 0x556 <simplify_path+0x7e>
     534:	34 f4       	brge	.+12     	; 0x542 <simplify_path+0x6a>
     536:	89 2b       	or	r24, r25
     538:	b1 f4       	brne	.+44     	; 0x566 <simplify_path+0x8e>
	{
	case 0:
		path[path_length - 3] = 'S';
     53a:	f9 01       	movw	r30, r18
     53c:	33 97       	sbiw	r30, 0x03	; 3
     53e:	83 e5       	ldi	r24, 0x53	; 83
     540:	11 c0       	rjmp	.+34     	; 0x564 <simplify_path+0x8c>

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;

	// Replace all of those turns with a single one.
	switch(total_angle)
     542:	84 3b       	cpi	r24, 0xB4	; 180
     544:	91 05       	cpc	r25, r1
     546:	59 f0       	breq	.+22     	; 0x55e <simplify_path+0x86>
     548:	8e 30       	cpi	r24, 0x0E	; 14
     54a:	91 40       	sbci	r25, 0x01	; 1
     54c:	61 f4       	brne	.+24     	; 0x566 <simplify_path+0x8e>
		break;
	case 180:
		path[path_length - 3] = 'B';
		break;
	case 270:
		path[path_length - 3] = 'L';
     54e:	f9 01       	movw	r30, r18
     550:	33 97       	sbiw	r30, 0x03	; 3
     552:	8c e4       	ldi	r24, 0x4C	; 76
     554:	07 c0       	rjmp	.+14     	; 0x564 <simplify_path+0x8c>
	{
	case 0:
		path[path_length - 3] = 'S';
		break;
	case 90:
		path[path_length - 3] = 'R';
     556:	f9 01       	movw	r30, r18
     558:	33 97       	sbiw	r30, 0x03	; 3
     55a:	82 e5       	ldi	r24, 0x52	; 82
     55c:	03 c0       	rjmp	.+6      	; 0x564 <simplify_path+0x8c>
		break;
	case 180:
		path[path_length - 3] = 'B';
     55e:	f9 01       	movw	r30, r18
     560:	33 97       	sbiw	r30, 0x03	; 3
     562:	82 e4       	ldi	r24, 0x42	; 66
		break;
	case 270:
		path[path_length - 3] = 'L';
     564:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	path_length -= 2;
     566:	42 50       	subi	r20, 0x02	; 2
     568:	40 93 c4 01 	sts	0x01C4, r20
     56c:	08 95       	ret

0000056e <maze_solve>:
}

// This function is called once, from main.c.
void maze_solve()
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	2b 97       	sbiw	r28, 0x0b	; 11
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
			break;
		case 'B':
			direction += 18;
			break;		
		}
		direction = direction % 36;
     582:	04 e2       	ldi	r16, 0x24	; 36
{
	// Loop until we have solved the maze.
	while(1)
	{
		
		clear();
     584:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>
		print("(");
     588:	8a e4       	ldi	r24, 0x4A	; 74
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>
		print_long(place_x);
     590:	60 91 c2 01 	lds	r22, 0x01C2
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 c9 09 	call	0x1392	; 0x1392 <print_long>
		print(",");
     59e:	8c e4       	ldi	r24, 0x4C	; 76
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>
		print_long(place_y);
     5a6:	60 91 c1 01 	lds	r22, 0x01C1
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 c9 09 	call	0x1392	; 0x1392 <print_long>
		print(")");
     5b4:	8e e4       	ldi	r24, 0x4E	; 78
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>
		lcd_goto_xy(0,1);
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
		print_long(direction);
     5c4:	60 91 c3 01 	lds	r22, 0x01C3
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 c9 09 	call	0x1392	; 0x1392 <print_long>
		
		// FIRST MAIN LOOP BODY  
		follow_segment();
     5d2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		switch(direction)
     5d6:	80 91 c3 01 	lds	r24, 0x01C3
     5da:	89 30       	cpi	r24, 0x09	; 9
     5dc:	79 f0       	breq	.+30     	; 0x5fc <maze_solve+0x8e>
     5de:	30 f4       	brcc	.+12     	; 0x5ec <maze_solve+0x7e>
     5e0:	81 11       	cpse	r24, r1
     5e2:	18 c0       	rjmp	.+48     	; 0x614 <maze_solve+0xa6>
		{
		case 0:
			place_x++;
     5e4:	80 91 c2 01 	lds	r24, 0x01C2
     5e8:	8f 5f       	subi	r24, 0xFF	; 255
     5ea:	0f c0       	rjmp	.+30     	; 0x60a <maze_solve+0x9c>
		print_long(direction);
		
		// FIRST MAIN LOOP BODY  
		follow_segment();

		switch(direction)
     5ec:	82 31       	cpi	r24, 0x12	; 18
     5ee:	51 f0       	breq	.+20     	; 0x604 <maze_solve+0x96>
     5f0:	8b 31       	cpi	r24, 0x1B	; 27
     5f2:	81 f4       	brne	.+32     	; 0x614 <maze_solve+0xa6>
			break;
		case 18:
			place_x--;
			break;
		case 27:
			place_y--;
     5f4:	80 91 c1 01 	lds	r24, 0x01C1
     5f8:	81 50       	subi	r24, 0x01	; 1
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <maze_solve+0xa2>
		{
		case 0:
			place_x++;
			break;
		case 9:
			place_y++;
     5fc:	80 91 c1 01 	lds	r24, 0x01C1
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	06 c0       	rjmp	.+12     	; 0x610 <maze_solve+0xa2>
			break;
		case 18:
			place_x--;
     604:	80 91 c2 01 	lds	r24, 0x01C2
     608:	81 50       	subi	r24, 0x01	; 1
     60a:	80 93 c2 01 	sts	0x01C2, r24
			break;
     60e:	02 c0       	rjmp	.+4      	; 0x614 <maze_solve+0xa6>
		case 27:
			place_y--;
     610:	80 93 c1 01 	sts	0x01C1, r24

		// Drive straight a bit.  This helps us in case we entered the
		// intersection at an angle.
		// Note that we are slowing down - this prevents the robot
		// from tipping forward too much.
		set_motors(50,50);
     614:	62 e3       	ldi	r22, 0x32	; 50
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	82 e3       	ldi	r24, 0x32	; 50
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		delay_ms(50);
     620:	82 e3       	ldi	r24, 0x32	; 50
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
		unsigned char found_straight=0;
		unsigned char found_right=0;

		// Now read the sensors and check the intersection type.
		unsigned int sensors[5];
		read_line(sensors,IR_EMITTERS_ON);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	0e 94 88 0b 	call	0x1710	; 0x1710 <read_line>

		// Check for left and right exits.
		if(sensors[0] > 100)
     632:	11 e0       	ldi	r17, 0x01	; 1
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	85 36       	cpi	r24, 0x65	; 101
     63a:	91 05       	cpc	r25, r1
     63c:	08 f4       	brcc	.+2      	; 0x640 <maze_solve+0xd2>
     63e:	10 e0       	ldi	r17, 0x00	; 0
			found_left = 1;
		if(sensors[4] > 100)
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	89 85       	ldd	r24, Y+9	; 0x09
     644:	9a 85       	ldd	r25, Y+10	; 0x0a
     646:	85 36       	cpi	r24, 0x65	; 101
     648:	91 05       	cpc	r25, r1
     64a:	08 f4       	brcc	.+2      	; 0x64e <maze_solve+0xe0>
     64c:	40 e0       	ldi	r20, 0x00	; 0
			found_right = 1;

		// Drive straight a bit more - this is enough to line up our
		// wheels with the intersection.
		set_motors(40,40);
     64e:	68 e2       	ldi	r22, 0x28	; 40
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	88 e2       	ldi	r24, 0x28	; 40
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	4b 87       	std	Y+11, r20	; 0x0b
     658:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		delay_ms(100);
     65c:	84 e6       	ldi	r24, 0x64	; 100
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>

		// Check for a straight exit.
		read_line(sensors,IR_EMITTERS_ON);
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	0e 94 88 0b 	call	0x1710	; 0x1710 <read_line>
		if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200)
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	4b 85       	ldd	r20, Y+11	; 0x0b
     674:	89 3c       	cpi	r24, 0xC9	; 201
     676:	91 05       	cpc	r25, r1
     678:	60 f4       	brcc	.+24     	; 0x692 <maze_solve+0x124>
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	89 3c       	cpi	r24, 0xC9	; 201
     680:	91 05       	cpc	r25, r1
     682:	a0 f4       	brcc	.+40     	; 0x6ac <maze_solve+0x13e>
     684:	8f 81       	ldd	r24, Y+7	; 0x07
     686:	98 85       	ldd	r25, Y+8	; 0x08
     688:	89 3c       	cpi	r24, 0xC9	; 201
     68a:	91 05       	cpc	r25, r1
     68c:	78 f4       	brcc	.+30     	; 0x6ac <maze_solve+0x13e>

		// These variables record whether the robot has seen a line to the
		// left, straight ahead, and right, whil examining the current
		// intersection.
		unsigned char found_left=0;
		unsigned char found_straight=0;
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	0e c0       	rjmp	.+28     	; 0x6ae <maze_solve+0x140>
			found_straight = 1;

		// Check for the ending spot.
		// If all three middle sensors are on dark black, we have
		// solved the maze.
		if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600)
     692:	89 35       	cpi	r24, 0x59	; 89
     694:	92 40       	sbci	r25, 0x02	; 2
     696:	50 f0       	brcs	.+20     	; 0x6ac <maze_solve+0x13e>
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	89 35       	cpi	r24, 0x59	; 89
     69e:	92 40       	sbci	r25, 0x02	; 2
     6a0:	28 f0       	brcs	.+10     	; 0x6ac <maze_solve+0x13e>
     6a2:	8f 81       	ldd	r24, Y+7	; 0x07
     6a4:	98 85       	ldd	r25, Y+8	; 0x08
     6a6:	89 35       	cpi	r24, 0x59	; 89
     6a8:	92 40       	sbci	r25, 0x02	; 2
     6aa:	b8 f5       	brcc	.+110    	; 0x71a <maze_solve+0x1ac>
     6ac:	61 e0       	ldi	r22, 0x01	; 1
			break;

		// Intersection identification is complete.
		// If the maze has been solved, we can follow the existing
		// path.  Otherwise, we need to learn the solution.
		unsigned char dir = select_turn(found_left, found_straight, found_right);
     6ae:	81 2f       	mov	r24, r17
     6b0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <select_turn>
     6b4:	18 2f       	mov	r17, r24

		set_motors(40,40);
     6b6:	68 e2       	ldi	r22, 0x28	; 40
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	88 e2       	ldi	r24, 0x28	; 40
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		delay_ms(100);
     6c2:	84 e6       	ldi	r24, 0x64	; 100
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>


		// Make the turn indicated by the path.
		turn(dir);
     6ca:	81 2f       	mov	r24, r17
     6cc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <turn>
     6d0:	90 91 c3 01 	lds	r25, 0x01C3
		
		switch(dir)
     6d4:	1c 34       	cpi	r17, 0x4C	; 76
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <maze_solve+0x176>
     6d8:	12 35       	cpi	r17, 0x52	; 82
     6da:	31 f0       	breq	.+12     	; 0x6e8 <maze_solve+0x17a>
     6dc:	12 34       	cpi	r17, 0x42	; 66
     6de:	39 f4       	brne	.+14     	; 0x6ee <maze_solve+0x180>
			break;
		case 'R':
			direction += 27;
			break;
		case 'B':
			direction += 18;
     6e0:	9e 5e       	subi	r25, 0xEE	; 238
     6e2:	03 c0       	rjmp	.+6      	; 0x6ea <maze_solve+0x17c>
		turn(dir);
		
		switch(dir)
		{
		case 'L':
			direction += 9;
     6e4:	97 5f       	subi	r25, 0xF7	; 247
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <maze_solve+0x17c>
			break;
		case 'R':
			direction += 27;
     6e8:	95 5e       	subi	r25, 0xE5	; 229
			break;
		case 'B':
			direction += 18;
     6ea:	90 93 c3 01 	sts	0x01C3, r25
			break;		
		}
		direction = direction % 36;
     6ee:	80 91 c3 01 	lds	r24, 0x01C3
     6f2:	60 2f       	mov	r22, r16
     6f4:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodqi4>
     6f8:	90 93 c3 01 	sts	0x01C3, r25
		
		


		// Store the intersection in the path variable.
		path[path_length] = dir;
     6fc:	80 91 c4 01 	lds	r24, 0x01C4
     700:	e8 2f       	mov	r30, r24
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	eb 53       	subi	r30, 0x3B	; 59
     706:	fe 4f       	sbci	r31, 0xFE	; 254
     708:	10 83       	st	Z, r17
		path_length ++;
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	80 93 c4 01 	sts	0x01C4, r24
		// You should check to make sure that the path_length does not
		// exceed the bounds of the array.  We'll ignore that in this
		// example.

		// Simplify the learned path.
		simplify_path();
     710:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <simplify_path>

		// Display the path on the LCD.
		display_path();
     714:	0e 94 45 02 	call	0x48a	; 0x48a <display_path>
	}
     718:	35 cf       	rjmp	.-406    	; 0x584 <maze_solve+0x16>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
		{
			if(get_ms() % 2000 < 1000)
     71a:	80 ed       	ldi	r24, 0xD0	; 208
     71c:	c8 2e       	mov	r12, r24
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	d8 2e       	mov	r13, r24
     722:	e1 2c       	mov	r14, r1
     724:	f1 2c       	mov	r15, r1
	// Now enter an infinite loop - we can re-run the maze as many
	// times as we want to.
	while(1)
	{
		// Beep to show that we finished the maze.
		set_motors(0,0);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		play(">>a32");
     732:	80 e5       	ldi	r24, 0x50	; 80
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 10 08 	call	0x1020	; 0x1020 <play>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
     73a:	80 e1       	ldi	r24, 0x10	; 16
     73c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <button_is_pressed>
     740:	81 11       	cpse	r24, r1
     742:	21 c0       	rjmp	.+66     	; 0x786 <maze_solve+0x218>
		{
			if(get_ms() % 2000 < 1000)
     744:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <get_ms>
     748:	a7 01       	movw	r20, r14
     74a:	96 01       	movw	r18, r12
     74c:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
     750:	68 3e       	cpi	r22, 0xE8	; 232
     752:	73 40       	sbci	r23, 0x03	; 3
     754:	81 05       	cpc	r24, r1
     756:	91 05       	cpc	r25, r1
     758:	78 f4       	brcc	.+30     	; 0x778 <maze_solve+0x20a>
			{
				clear();
     75a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <clear>
				print("Solved!");
     75e:	86 e5       	ldi	r24, 0x56	; 86
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>
				lcd_goto_xy(0,1);
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_goto_xy>
				print("Press B");
     76e:	8e e3       	ldi	r24, 0x3E	; 62
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 63 09 	call	0x12c6	; 0x12c6 <print>
     776:	02 c0       	rjmp	.+4      	; 0x77c <maze_solve+0x20e>
			}
			else
				display_path();
     778:	0e 94 45 02 	call	0x48a	; 0x48a <display_path>
			delay_ms(30);
     77c:	8e e1       	ldi	r24, 0x1E	; 30
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
     784:	da cf       	rjmp	.-76     	; 0x73a <maze_solve+0x1cc>
		}
		while(button_is_pressed(BUTTON_B));
     786:	80 e1       	ldi	r24, 0x10	; 16
     788:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <button_is_pressed>
     78c:	81 11       	cpse	r24, r1
     78e:	fb cf       	rjmp	.-10     	; 0x786 <maze_solve+0x218>
	
		delay_ms(1000);
     790:	88 ee       	ldi	r24, 0xE8	; 232
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>

		// Re-run the maze.  It's not necessary to identify the
		// intersections, so this loop is really simple.
		int i;
		for(i=0;i<path_length;i++)
     798:	05 ec       	ldi	r16, 0xC5	; 197
     79a:	11 e0       	ldi	r17, 0x01	; 1
     79c:	80 91 c4 01 	lds	r24, 0x01C4
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	a8 01       	movw	r20, r16
     7a4:	45 5c       	subi	r20, 0xC5	; 197
     7a6:	51 40       	sbci	r21, 0x01	; 1
     7a8:	48 17       	cp	r20, r24
     7aa:	59 07       	cpc	r21, r25
     7ac:	e4 f4       	brge	.+56     	; 0x7e6 <maze_solve+0x278>
		{
			// SECOND MAIN LOOP BODY  
			follow_segment();
     7ae:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

			// Drive straight while slowing down, as before.
			set_motors(50,50);
     7b2:	62 e3       	ldi	r22, 0x32	; 50
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	82 e3       	ldi	r24, 0x32	; 50
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
			delay_ms(50);
     7be:	82 e3       	ldi	r24, 0x32	; 50
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
			set_motors(40,40);
     7c6:	68 e2       	ldi	r22, 0x28	; 40
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	88 e2       	ldi	r24, 0x28	; 40
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
			delay_ms(200);
     7d2:	88 ec       	ldi	r24, 0xC8	; 200
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>

			// Make a turn according to the instruction stored in
			// path[i].
			turn(path[i]);
     7da:	f8 01       	movw	r30, r16
     7dc:	81 91       	ld	r24, Z+
     7de:	8f 01       	movw	r16, r30
     7e0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <turn>
     7e4:	db cf       	rjmp	.-74     	; 0x79c <maze_solve+0x22e>
		}
		
		// Follow the last segment up to the finish.
		follow_segment();
     7e6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Now we should be at the finish!  Restart the loop.
	}
     7ea:	9d cf       	rjmp	.-198    	; 0x726 <maze_solve+0x1b8>

000007ec <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     7ec:	8c 34       	cpi	r24, 0x4C	; 76
     7ee:	69 f0       	breq	.+26     	; 0x80a <turn+0x1e>
     7f0:	82 35       	cpi	r24, 0x52	; 82
     7f2:	81 f0       	breq	.+32     	; 0x814 <turn+0x28>
     7f4:	82 34       	cpi	r24, 0x42	; 66
     7f6:	c1 f4       	brne	.+48     	; 0x828 <turn+0x3c>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     7f8:	60 eb       	ldi	r22, 0xB0	; 176
     7fa:	7f ef       	ldi	r23, 0xFF	; 255
     7fc:	80 e5       	ldi	r24, 0x50	; 80
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		delay_ms(400);
     804:	80 e9       	ldi	r24, 0x90	; 144
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0d c0       	rjmp	.+26     	; 0x824 <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     80a:	60 e5       	ldi	r22, 0x50	; 80
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 eb       	ldi	r24, 0xB0	; 176
     810:	9f ef       	ldi	r25, 0xFF	; 255
     812:	04 c0       	rjmp	.+8      	; 0x81c <turn+0x30>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     814:	60 eb       	ldi	r22, 0xB0	; 176
     816:	7f ef       	ldi	r23, 0xFF	; 255
     818:	80 e5       	ldi	r24, 0x50	; 80
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <set_motors>
		delay_ms(200);
     820:	88 ec       	ldi	r24, 0xC8	; 200
     822:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     824:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <delay_ms>
     828:	08 95       	ret

0000082a <_ZN15OrangutanAnalog7setModeEh.part.0>:
     82a:	ec e7       	ldi	r30, 0x7C	; 124
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	8f 7d       	andi	r24, 0xDF	; 223
     832:	80 83       	st	Z, r24
     834:	08 95       	ret

00000836 <_ZN15OrangutanAnalog7setModeEh>:
     836:	81 11       	cpse	r24, r1
     838:	03 c0       	rjmp	.+6      	; 0x840 <_ZN15OrangutanAnalog7setModeEh+0xa>
     83a:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN15OrangutanAnalog7setModeEh.part.0>
     83e:	08 95       	ret
     840:	80 91 7c 00 	lds	r24, 0x007C
     844:	80 62       	ori	r24, 0x20	; 32
     846:	80 93 7c 00 	sts	0x007C, r24
     84a:	08 95       	ret

0000084c <_ZN15OrangutanAnalog7getModeEv>:
     84c:	80 91 7c 00 	lds	r24, 0x007C
     850:	85 fb       	bst	r24, 5
     852:	88 27       	eor	r24, r24
     854:	80 f9       	bld	r24, 0
     856:	08 95       	ret

00000858 <_ZN15OrangutanAnalog16conversionResultEv>:
     858:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN15OrangutanAnalog7getModeEv>
     85c:	88 23       	and	r24, r24
     85e:	21 f0       	breq	.+8      	; 0x868 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     860:	80 91 79 00 	lds	r24, 0x0079
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
     868:	80 91 78 00 	lds	r24, 0x0078
     86c:	90 91 79 00 	lds	r25, 0x0079
     870:	08 95       	ret

00000872 <_ZN15OrangutanAnalog15startConversionEhh>:
     872:	80 32       	cpi	r24, 0x20	; 32
     874:	a0 f4       	brcc	.+40     	; 0x89e <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     876:	97 e8       	ldi	r25, 0x87	; 135
     878:	90 93 7a 00 	sts	0x007A, r25
     87c:	90 91 7c 00 	lds	r25, 0x007C
     880:	66 23       	and	r22, r22
     882:	11 f0       	breq	.+4      	; 0x888 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     884:	90 6c       	ori	r25, 0xC0	; 192
     886:	02 c0       	rjmp	.+4      	; 0x88c <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     888:	9f 77       	andi	r25, 0x7F	; 127
     88a:	90 64       	ori	r25, 0x40	; 64
     88c:	90 7e       	andi	r25, 0xE0	; 224
     88e:	98 2b       	or	r25, r24
     890:	90 93 7c 00 	sts	0x007C, r25
     894:	80 91 7a 00 	lds	r24, 0x007A
     898:	80 64       	ori	r24, 0x40	; 64
     89a:	80 93 7a 00 	sts	0x007A, r24
     89e:	08 95       	ret

000008a0 <_ZN15OrangutanAnalog11readAverageEhj>:
     8a0:	a0 e0       	ldi	r26, 0x00	; 0
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e6 e5       	ldi	r30, 0x56	; 86
     8a6:	f4 e0       	ldi	r31, 0x04	; 4
     8a8:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x14>
     8ac:	eb 01       	movw	r28, r22
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	0e 94 39 04 	call	0x872	; 0x872 <_ZN15OrangutanAnalog15startConversionEhh>
     8b4:	80 91 7a 00 	lds	r24, 0x007A
     8b8:	86 fd       	sbrc	r24, 6
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     8bc:	8e 01       	movw	r16, r28
     8be:	c1 2c       	mov	r12, r1
     8c0:	d1 2c       	mov	r13, r1
     8c2:	76 01       	movw	r14, r12
     8c4:	80 91 7a 00 	lds	r24, 0x007A
     8c8:	80 64       	ori	r24, 0x40	; 64
     8ca:	80 93 7a 00 	sts	0x007A, r24
     8ce:	80 91 7a 00 	lds	r24, 0x007A
     8d2:	86 fd       	sbrc	r24, 6
     8d4:	fc cf       	rjmp	.-8      	; 0x8ce <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     8d6:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN15OrangutanAnalog16conversionResultEv>
     8da:	c8 0e       	add	r12, r24
     8dc:	d9 1e       	adc	r13, r25
     8de:	e1 1c       	adc	r14, r1
     8e0:	f1 1c       	adc	r15, r1
     8e2:	01 50       	subi	r16, 0x01	; 1
     8e4:	11 09       	sbc	r17, r1
     8e6:	01 15       	cp	r16, r1
     8e8:	11 05       	cpc	r17, r1
     8ea:	61 f7       	brne	.-40     	; 0x8c4 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     8ec:	ce 01       	movw	r24, r28
     8ee:	96 95       	lsr	r25
     8f0:	87 95       	ror	r24
     8f2:	c0 34       	cpi	r28, 0x40	; 64
     8f4:	d1 05       	cpc	r29, r1
     8f6:	38 f4       	brcc	.+14     	; 0x906 <__stack+0x7>
     8f8:	8c 0d       	add	r24, r12
     8fa:	9d 1d       	adc	r25, r13
     8fc:	be 01       	movw	r22, r28
     8fe:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     902:	cb 01       	movw	r24, r22
     904:	0e c0       	rjmp	.+28     	; 0x922 <__stack+0x23>
     906:	a7 01       	movw	r20, r14
     908:	96 01       	movw	r18, r12
     90a:	28 0f       	add	r18, r24
     90c:	39 1f       	adc	r19, r25
     90e:	41 1d       	adc	r20, r1
     910:	51 1d       	adc	r21, r1
     912:	ca 01       	movw	r24, r20
     914:	b9 01       	movw	r22, r18
     916:	9e 01       	movw	r18, r28
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
     920:	c9 01       	movw	r24, r18
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	e8 e0       	ldi	r30, 0x08	; 8
     928:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x14>

0000092c <_ZN15OrangutanAnalog12toMillivoltsEj>:
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	a0 91 00 01 	lds	r26, 0x0100
     938:	b0 91 01 01 	lds	r27, 0x0101
     93c:	9c 01       	movw	r18, r24
     93e:	0e 94 43 11 	call	0x2286	; 0x2286 <__umulhisi3>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
     946:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN15OrangutanAnalog7getModeEv>
     94a:	88 23       	and	r24, r24
     94c:	59 f0       	breq	.+22     	; 0x964 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     94e:	c7 01       	movw	r24, r14
     950:	b6 01       	movw	r22, r12
     952:	61 58       	subi	r22, 0x81	; 129
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	8f 4f       	sbci	r24, 0xFF	; 255
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	0a c0       	rjmp	.+20     	; 0x978 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	61 50       	subi	r22, 0x01	; 1
     96a:	7e 4f       	sbci	r23, 0xFE	; 254
     96c:	8f 4f       	sbci	r24, 0xFF	; 255
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	33 e0       	ldi	r19, 0x03	; 3
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
     97c:	c9 01       	movw	r24, r18
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	08 95       	ret

00000988 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     988:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN15OrangutanAnalog11readAverageEhj>
     98c:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN15OrangutanAnalog12toMillivoltsEj>
     990:	08 95       	ret

00000992 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN15OrangutanAnalog7getModeEv>
     99c:	18 2f       	mov	r17, r24
     99e:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN15OrangutanAnalog7setModeEh.part.0>
     9a2:	6a e0       	ldi	r22, 0x0A	; 10
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	86 e0       	ldi	r24, 0x06	; 6
     9a8:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     9ac:	ec 01       	movw	r28, r24
     9ae:	81 2f       	mov	r24, r17
     9b0:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN15OrangutanAnalog7setModeEh>
     9b4:	ce 01       	movw	r24, r28
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	8c 0f       	add	r24, r28
     9bc:	9d 1f       	adc	r25, r29
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	08 95       	ret

000009cc <read_battery_millivolts_3pi>:
     9cc:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     9d0:	08 95       	ret

000009d2 <_ZL16currentCharacterv>:
     9d2:	90 91 63 01 	lds	r25, 0x0163
     9d6:	e0 91 5e 01 	lds	r30, 0x015E
     9da:	f0 91 5f 01 	lds	r31, 0x015F
     9de:	99 23       	and	r25, r25
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <_ZL16currentCharacterv+0x14>
     9e2:	84 91       	lpm	r24, Z
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <_ZL16currentCharacterv+0x16>
     9e6:	80 81       	ld	r24, Z
     9e8:	2f eb       	ldi	r18, 0xBF	; 191
     9ea:	28 0f       	add	r18, r24
     9ec:	2a 31       	cpi	r18, 0x1A	; 26
     9ee:	10 f4       	brcc	.+4      	; 0x9f4 <_ZL16currentCharacterv+0x22>
     9f0:	80 5e       	subi	r24, 0xE0	; 224
     9f2:	08 95       	ret
     9f4:	80 32       	cpi	r24, 0x20	; 32
     9f6:	49 f4       	brne	.+18     	; 0xa0a <_ZL16currentCharacterv+0x38>
     9f8:	9f 01       	movw	r18, r30
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	30 93 5f 01 	sts	0x015F, r19
     a02:	20 93 5e 01 	sts	0x015E, r18
     a06:	ef 2b       	or	r30, r31
     a08:	31 f7       	brne	.-52     	; 0x9d6 <_ZL16currentCharacterv+0x4>
     a0a:	08 95       	ret

00000a0c <_ZL9getNumberv>:
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	d0 e0       	ldi	r29, 0x00	; 0
     a1a:	1a e0       	ldi	r17, 0x0A	; 10
     a1c:	90 ed       	ldi	r25, 0xD0	; 208
     a1e:	98 0f       	add	r25, r24
     a20:	9a 30       	cpi	r25, 0x0A	; 10
     a22:	b8 f4       	brcc	.+46     	; 0xa52 <_ZL9getNumberv+0x46>
     a24:	9e 01       	movw	r18, r28
     a26:	12 9f       	mul	r17, r18
     a28:	e0 01       	movw	r28, r0
     a2a:	13 9f       	mul	r17, r19
     a2c:	d0 0d       	add	r29, r0
     a2e:	11 24       	eor	r1, r1
     a30:	c8 0f       	add	r28, r24
     a32:	d1 1d       	adc	r29, r1
     a34:	87 fd       	sbrc	r24, 7
     a36:	da 95       	dec	r29
     a38:	e0 97       	sbiw	r28, 0x30	; 48
     a3a:	80 91 5e 01 	lds	r24, 0x015E
     a3e:	90 91 5f 01 	lds	r25, 0x015F
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	90 93 5f 01 	sts	0x015F, r25
     a48:	80 93 5e 01 	sts	0x015E, r24
     a4c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     a50:	e5 cf       	rjmp	.-54     	; 0xa1c <_ZL9getNumberv+0x10>
     a52:	ce 01       	movw	r24, r28
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	08 95       	ret

00000a5c <_ZN15OrangutanBuzzer5init2Ev>:
     a5c:	10 92 6f 00 	sts	0x006F, r1
     a60:	83 e2       	ldi	r24, 0x23	; 35
     a62:	80 93 80 00 	sts	0x0080, r24
     a66:	81 e1       	ldi	r24, 0x11	; 17
     a68:	80 93 81 00 	sts	0x0081, r24
     a6c:	10 92 82 00 	sts	0x0082, r1
     a70:	80 e1       	ldi	r24, 0x10	; 16
     a72:	97 e2       	ldi	r25, 0x27	; 39
     a74:	90 93 89 00 	sts	0x0089, r25
     a78:	80 93 88 00 	sts	0x0088, r24
     a7c:	10 92 8b 00 	sts	0x008B, r1
     a80:	10 92 8a 00 	sts	0x008A, r1
     a84:	22 9a       	sbi	0x04, 2	; 4
     a86:	78 94       	sei
     a88:	08 95       	ret

00000a8a <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	5c 01       	movw	r10, r24
     aa2:	8b 01       	movw	r16, r22
     aa4:	d4 2e       	mov	r13, r20
     aa6:	80 91 60 01 	lds	r24, 0x0160
     aaa:	81 11       	cpse	r24, r1
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 60 01 	sts	0x0160, r24
     ab4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN15OrangutanBuzzer5init2Ev>
     ab8:	10 92 0b 01 	sts	0x010B, r1
     abc:	b7 fe       	sbrs	r11, 7
     abe:	05 c0       	rjmp	.+10     	; 0xaca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     ac0:	e8 94       	clt
     ac2:	b7 f8       	bld	r11, 7
     ac4:	2a e0       	ldi	r18, 0x0A	; 10
     ac6:	f2 2e       	mov	r15, r18
     ac8:	02 c0       	rjmp	.+4      	; 0xace <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     aca:	ff 24       	eor	r15, r15
     acc:	f3 94       	inc	r15
     ace:	e0 90 81 00 	lds	r14, 0x0081
     ad2:	2e 2d       	mov	r18, r14
     ad4:	28 7f       	andi	r18, 0xF8	; 248
     ad6:	e2 2e       	mov	r14, r18
     ad8:	48 ec       	ldi	r20, 0xC8	; 200
     ada:	f4 9e       	mul	r15, r20
     adc:	c0 01       	movw	r24, r0
     ade:	11 24       	eor	r1, r1
     ae0:	8a 15       	cp	r24, r10
     ae2:	9b 05       	cpc	r25, r11
     ae4:	e0 f4       	brcc	.+56     	; 0xb1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     ae6:	e5 01       	movw	r28, r10
     ae8:	51 e1       	ldi	r21, 0x11	; 17
     aea:	a5 16       	cp	r10, r21
     aec:	57 e2       	ldi	r21, 0x27	; 39
     aee:	b5 06       	cpc	r11, r21
     af0:	10 f0       	brcs	.+4      	; 0xaf6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     af2:	c0 e1       	ldi	r28, 0x10	; 16
     af4:	d7 e2       	ldi	r29, 0x27	; 39
     af6:	be 01       	movw	r22, r28
     af8:	76 95       	lsr	r23
     afa:	67 95       	ror	r22
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	60 58       	subi	r22, 0x80	; 128
     b02:	79 46       	sbci	r23, 0x69	; 105
     b04:	87 46       	sbci	r24, 0x67	; 103
     b06:	9f 4f       	sbci	r25, 0xFF	; 255
     b08:	4e 01       	movw	r8, r28
     b0a:	a1 2c       	mov	r10, r1
     b0c:	b1 2c       	mov	r11, r1
     b0e:	a5 01       	movw	r20, r10
     b10:	94 01       	movw	r18, r8
     b12:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
     b16:	59 01       	movw	r10, r18
     b18:	8e 2d       	mov	r24, r14
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	24 c0       	rjmp	.+72     	; 0xb66 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     b1e:	c8 e2       	ldi	r28, 0x28	; 40
     b20:	fc 9e       	mul	r15, r28
     b22:	c0 2d       	mov	r28, r0
     b24:	11 24       	eor	r1, r1
     b26:	d0 e0       	ldi	r29, 0x00	; 0
     b28:	ca 15       	cp	r28, r10
     b2a:	db 05       	cpc	r29, r11
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     b2e:	e5 01       	movw	r28, r10
     b30:	be 01       	movw	r22, r28
     b32:	76 95       	lsr	r23
     b34:	67 95       	ror	r22
     b36:	9e 01       	movw	r18, r28
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	8a e0       	ldi	r24, 0x0A	; 10
     b3e:	f8 12       	cpse	r15, r24
     b40:	07 c0       	rjmp	.+14     	; 0xb50 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	60 5e       	subi	r22, 0xE0	; 224
     b48:	73 44       	sbci	r23, 0x43	; 67
     b4a:	81 44       	sbci	r24, 0x41	; 65
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	60 53       	subi	r22, 0x30	; 48
     b56:	7d 4e       	sbci	r23, 0xED	; 237
     b58:	8c 4e       	sbci	r24, 0xEC	; 236
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
     b60:	59 01       	movw	r10, r18
     b62:	8e 2d       	mov	r24, r14
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	88 2e       	mov	r8, r24
     b68:	2a e0       	ldi	r18, 0x0A	; 10
     b6a:	f2 12       	cpse	r15, r18
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     b6e:	ce 01       	movw	r24, r28
     b70:	05 96       	adiw	r24, 0x05	; 5
     b72:	6a e0       	ldi	r22, 0x0A	; 10
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     b7a:	eb 01       	movw	r28, r22
     b7c:	c8 3e       	cpi	r28, 0xE8	; 232
     b7e:	43 e0       	ldi	r20, 0x03	; 3
     b80:	d4 07       	cpc	r29, r20
     b82:	59 f0       	breq	.+22     	; 0xb9a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     b84:	98 01       	movw	r18, r16
     b86:	de 01       	movw	r26, r28
     b88:	0e 94 43 11 	call	0x2286	; 0x2286 <__umulhisi3>
     b8c:	28 ee       	ldi	r18, 0xE8	; 232
     b8e:	33 e0       	ldi	r19, 0x03	; 3
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	0e 94 24 11 	call	0x2248	; 0x2248 <__divmodsi4>
     b98:	89 01       	movw	r16, r18
     b9a:	10 92 6f 00 	sts	0x006F, r1
     b9e:	80 92 81 00 	sts	0x0081, r8
     ba2:	b0 92 89 00 	sts	0x0089, r11
     ba6:	a0 92 88 00 	sts	0x0088, r10
     baa:	20 91 88 00 	lds	r18, 0x0088
     bae:	30 91 89 00 	lds	r19, 0x0089
     bb2:	4d 2d       	mov	r20, r13
     bb4:	40 31       	cpi	r20, 0x10	; 16
     bb6:	08 f0       	brcs	.+2      	; 0xbba <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     bb8:	4f e0       	ldi	r20, 0x0F	; 15
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	84 1b       	sub	r24, r20
     bc0:	91 09       	sbc	r25, r1
     bc2:	a9 01       	movw	r20, r18
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     bc6:	56 95       	lsr	r21
     bc8:	47 95       	ror	r20
     bca:	8a 95       	dec	r24
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     bce:	50 93 8b 00 	sts	0x008B, r21
     bd2:	40 93 8a 00 	sts	0x008A, r20
     bd6:	10 93 66 01 	sts	0x0166, r17
     bda:	00 93 65 01 	sts	0x0165, r16
     bde:	86 b3       	in	r24, 0x16	; 22
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	86 bb       	out	0x16, r24	; 22
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 6f 00 	sts	0x006F, r24
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	9f 90       	pop	r9
     bfe:	8f 90       	pop	r8
     c00:	08 95       	ret

00000c02 <_ZN15OrangutanBuzzer8playNoteEhjh>:
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	eb 01       	movw	r28, r22
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	11 f0       	breq	.+4      	; 0xc10 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     c0c:	41 11       	cpse	r20, r1
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	be 01       	movw	r22, r28
     c14:	88 ee       	ldi	r24, 0xE8	; 232
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	43 c0       	rjmp	.+134    	; 0xca0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     c1a:	81 31       	cpi	r24, 0x11	; 17
     c1c:	30 f0       	brcs	.+12     	; 0xc2a <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     c1e:	50 ef       	ldi	r21, 0xF0	; 240
     c20:	58 0f       	add	r21, r24
     c22:	50 36       	cpi	r21, 0x60	; 96
     c24:	18 f0       	brcs	.+6      	; 0xc2c <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     c26:	5f e5       	ldi	r21, 0x5F	; 95
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	85 2f       	mov	r24, r21
     c2e:	6c e0       	ldi	r22, 0x0C	; 12
     c30:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodqi4>
     c34:	68 2f       	mov	r22, r24
     c36:	74 ef       	ldi	r23, 0xF4	; 244
     c38:	76 03       	mulsu	r23, r22
     c3a:	90 01       	movw	r18, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	25 0f       	add	r18, r21
     c40:	31 1d       	adc	r19, r1
     c42:	2c 30       	cpi	r18, 0x0C	; 12
     c44:	31 05       	cpc	r19, r1
     c46:	40 f4       	brcc	.+16     	; 0xc58 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     c48:	f9 01       	movw	r30, r18
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	e2 5e       	subi	r30, 0xE2	; 226
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	20 81       	ld	r18, Z
     c54:	31 81       	ldd	r19, Z+1	; 0x01
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	87 30       	cpi	r24, 0x07	; 7
     c5e:	81 f0       	breq	.+32     	; 0xc80 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     c60:	08 2e       	mov	r0, r24
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	28 f0       	brcs	.+10     	; 0xc7a <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     c70:	c9 01       	movw	r24, r18
     c72:	05 96       	adiw	r24, 0x05	; 5
     c74:	6a e0       	ldi	r22, 0x0A	; 10
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0c c0       	rjmp	.+24     	; 0xc92 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     c7a:	c9 01       	movw	r24, r18
     c7c:	90 58       	subi	r25, 0x80	; 128
     c7e:	0c c0       	rjmp	.+24     	; 0xc98 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     c80:	c9 01       	movw	r24, r18
     c82:	36 e0       	ldi	r19, 0x06	; 6
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	3a 95       	dec	r19
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     c8c:	02 96       	adiw	r24, 0x02	; 2
     c8e:	65 e0       	ldi	r22, 0x05	; 5
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     c96:	cb 01       	movw	r24, r22
     c98:	40 31       	cpi	r20, 0x10	; 16
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     c9c:	4f e0       	ldi	r20, 0x0F	; 15
     c9e:	be 01       	movw	r22, r28
     ca0:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <_ZL8nextNotev>:
     caa:	a2 e0       	ldi	r26, 0x02	; 2
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	eb e5       	ldi	r30, 0x5B	; 91
     cb0:	f6 e0       	ldi	r31, 0x06	; 6
     cb2:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__prologue_saves__+0x4>
     cb6:	90 90 0a 01 	lds	r9, 0x010A
     cba:	80 91 62 01 	lds	r24, 0x0162
     cbe:	88 23       	and	r24, r24
     cc0:	21 f0       	breq	.+8      	; 0xcca <_ZL8nextNotev+0x20>
     cc2:	60 91 61 01 	lds	r22, 0x0161
     cc6:	61 11       	cpse	r22, r1
     cc8:	17 c0       	rjmp	.+46     	; 0xcf8 <_ZL8nextNotev+0x4e>
     cca:	77 24       	eor	r7, r7
     ccc:	73 94       	inc	r7
     cce:	b0 ec       	ldi	r27, 0xC0	; 192
     cd0:	ab 2e       	mov	r10, r27
     cd2:	bd e5       	ldi	r27, 0x5D	; 93
     cd4:	bb 2e       	mov	r11, r27
     cd6:	1a e0       	ldi	r17, 0x0A	; 10
     cd8:	61 2e       	mov	r6, r17
     cda:	04 e0       	ldi	r16, 0x04	; 4
     cdc:	80 2e       	mov	r8, r16
     cde:	80 ed       	ldi	r24, 0xD0	; 208
     ce0:	c8 2e       	mov	r12, r24
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	d8 2e       	mov	r13, r24
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	e9 2e       	mov	r14, r25
     cea:	f1 2c       	mov	r15, r1
     cec:	04 ef       	ldi	r16, 0xF4	; 244
     cee:	11 e0       	ldi	r17, 0x01	; 1
     cf0:	2f e0       	ldi	r18, 0x0F	; 15
     cf2:	42 2e       	mov	r4, r18
     cf4:	51 2c       	mov	r5, r1
     cf6:	15 c0       	rjmp	.+42     	; 0xd22 <_ZL8nextNotev+0x78>
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	88 ee       	ldi	r24, 0xE8	; 232
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     d04:	10 92 61 01 	sts	0x0161, r1
     d08:	17 c1       	rjmp	.+558    	; 0xf38 <_ZL8nextNotev+0x28e>
     d0a:	86 36       	cpi	r24, 0x66	; 102
     d0c:	d4 f5       	brge	.+116    	; 0xd82 <_ZL8nextNotev+0xd8>
     d0e:	81 36       	cpi	r24, 0x61	; 97
     d10:	09 f4       	brne	.+2      	; 0xd14 <_ZL8nextNotev+0x6a>
     d12:	a9 c0       	rjmp	.+338    	; 0xe66 <_ZL8nextNotev+0x1bc>
     d14:	7c f5       	brge	.+94     	; 0xd74 <_ZL8nextNotev+0xca>
     d16:	8c 33       	cpi	r24, 0x3C	; 60
     d18:	09 f4       	brne	.+2      	; 0xd1c <_ZL8nextNotev+0x72>
     d1a:	60 c0       	rjmp	.+192    	; 0xddc <_ZL8nextNotev+0x132>
     d1c:	8e 33       	cpi	r24, 0x3E	; 62
     d1e:	81 f4       	brne	.+32     	; 0xd40 <_ZL8nextNotev+0x96>
     d20:	93 94       	inc	r9
     d22:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     d26:	20 91 5e 01 	lds	r18, 0x015E
     d2a:	30 91 5f 01 	lds	r19, 0x015F
     d2e:	2f 5f       	subi	r18, 0xFF	; 255
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	30 93 5f 01 	sts	0x015F, r19
     d36:	20 93 5e 01 	sts	0x015E, r18
     d3a:	85 36       	cpi	r24, 0x65	; 101
     d3c:	31 f7       	brne	.-52     	; 0xd0a <_ZL8nextNotev+0x60>
     d3e:	52 c0       	rjmp	.+164    	; 0xde4 <_ZL8nextNotev+0x13a>
     d40:	81 32       	cpi	r24, 0x21	; 33
     d42:	09 f0       	breq	.+2      	; 0xd46 <_ZL8nextNotev+0x9c>
     d44:	8b c0       	rjmp	.+278    	; 0xe5c <_ZL8nextNotev+0x1b2>
     d46:	80 92 0a 01 	sts	0x010A, r8
     d4a:	d0 92 09 01 	sts	0x0109, r13
     d4e:	c0 92 08 01 	sts	0x0108, r12
     d52:	f0 92 07 01 	sts	0x0107, r15
     d56:	e0 92 06 01 	sts	0x0106, r14
     d5a:	10 93 05 01 	sts	0x0105, r17
     d5e:	00 93 04 01 	sts	0x0104, r16
     d62:	50 92 03 01 	sts	0x0103, r5
     d66:	40 92 02 01 	sts	0x0102, r4
     d6a:	10 92 62 01 	sts	0x0162, r1
     d6e:	a4 e0       	ldi	r26, 0x04	; 4
     d70:	9a 2e       	mov	r9, r26
     d72:	d7 cf       	rjmp	.-82     	; 0xd22 <_ZL8nextNotev+0x78>
     d74:	83 36       	cpi	r24, 0x63	; 99
     d76:	a1 f1       	breq	.+104    	; 0xde0 <_ZL8nextNotev+0x136>
     d78:	0c f4       	brge	.+2      	; 0xd7c <_ZL8nextNotev+0xd2>
     d7a:	78 c0       	rjmp	.+240    	; 0xe6c <_ZL8nextNotev+0x1c2>
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	77 c0       	rjmp	.+238    	; 0xe70 <_ZL8nextNotev+0x1c6>
     d82:	8d 36       	cpi	r24, 0x6D	; 109
     d84:	c1 f1       	breq	.+112    	; 0xdf6 <_ZL8nextNotev+0x14c>
     d86:	94 f4       	brge	.+36     	; 0xdac <_ZL8nextNotev+0x102>
     d88:	87 36       	cpi	r24, 0x67	; 103
     d8a:	91 f1       	breq	.+100    	; 0xdf0 <_ZL8nextNotev+0x146>
     d8c:	74 f1       	brlt	.+92     	; 0xdea <_ZL8nextNotev+0x140>
     d8e:	8c 36       	cpi	r24, 0x6C	; 108
     d90:	09 f0       	breq	.+2      	; 0xd94 <_ZL8nextNotev+0xea>
     d92:	64 c0       	rjmp	.+200    	; 0xe5c <_ZL8nextNotev+0x1b2>
     d94:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZL9getNumberv>
     d98:	bc 01       	movw	r22, r24
     d9a:	90 93 07 01 	sts	0x0107, r25
     d9e:	80 93 06 01 	sts	0x0106, r24
     da2:	80 91 08 01 	lds	r24, 0x0108
     da6:	90 91 09 01 	lds	r25, 0x0109
     daa:	51 c0       	rjmp	.+162    	; 0xe4e <_ZL8nextNotev+0x1a4>
     dac:	82 37       	cpi	r24, 0x72	; 114
     dae:	c9 f1       	breq	.+114    	; 0xe22 <_ZL8nextNotev+0x178>
     db0:	4c f4       	brge	.+18     	; 0xdc4 <_ZL8nextNotev+0x11a>
     db2:	8f 36       	cpi	r24, 0x6F	; 111
     db4:	09 f0       	breq	.+2      	; 0xdb8 <_ZL8nextNotev+0x10e>
     db6:	52 c0       	rjmp	.+164    	; 0xe5c <_ZL8nextNotev+0x1b2>
     db8:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZL9getNumberv>
     dbc:	98 2e       	mov	r9, r24
     dbe:	80 93 0a 01 	sts	0x010A, r24
     dc2:	af cf       	rjmp	.-162    	; 0xd22 <_ZL8nextNotev+0x78>
     dc4:	84 37       	cpi	r24, 0x74	; 116
     dc6:	81 f1       	breq	.+96     	; 0xe28 <_ZL8nextNotev+0x17e>
     dc8:	86 37       	cpi	r24, 0x76	; 118
     dca:	09 f0       	breq	.+2      	; 0xdce <_ZL8nextNotev+0x124>
     dcc:	47 c0       	rjmp	.+142    	; 0xe5c <_ZL8nextNotev+0x1b2>
     dce:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZL9getNumberv>
     dd2:	90 93 03 01 	sts	0x0103, r25
     dd6:	80 93 02 01 	sts	0x0102, r24
     dda:	a3 cf       	rjmp	.-186    	; 0xd22 <_ZL8nextNotev+0x78>
     ddc:	9a 94       	dec	r9
     dde:	a1 cf       	rjmp	.-190    	; 0xd22 <_ZL8nextNotev+0x78>
     de0:	10 e0       	ldi	r17, 0x00	; 0
     de2:	20 c0       	rjmp	.+64     	; 0xe24 <_ZL8nextNotev+0x17a>
     de4:	10 e0       	ldi	r17, 0x00	; 0
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	43 c0       	rjmp	.+134    	; 0xe70 <_ZL8nextNotev+0x1c6>
     dea:	10 e0       	ldi	r17, 0x00	; 0
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	40 c0       	rjmp	.+128    	; 0xe70 <_ZL8nextNotev+0x1c6>
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	87 e0       	ldi	r24, 0x07	; 7
     df4:	3d c0       	rjmp	.+122    	; 0xe70 <_ZL8nextNotev+0x1c6>
     df6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     dfa:	8c 36       	cpi	r24, 0x6C	; 108
     dfc:	19 f4       	brne	.+6      	; 0xe04 <_ZL8nextNotev+0x15a>
     dfe:	10 92 62 01 	sts	0x0162, r1
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <_ZL8nextNotev+0x162>
     e04:	70 92 62 01 	sts	0x0162, r7
     e08:	10 92 61 01 	sts	0x0161, r1
     e0c:	20 91 5e 01 	lds	r18, 0x015E
     e10:	30 91 5f 01 	lds	r19, 0x015F
     e14:	2f 5f       	subi	r18, 0xFF	; 255
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	30 93 5f 01 	sts	0x015F, r19
     e1c:	20 93 5e 01 	sts	0x015E, r18
     e20:	80 cf       	rjmp	.-256    	; 0xd22 <_ZL8nextNotev+0x78>
     e22:	11 e0       	ldi	r17, 0x01	; 1
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	24 c0       	rjmp	.+72     	; 0xe70 <_ZL8nextNotev+0x1c6>
     e28:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZL9getNumberv>
     e2c:	bc 01       	movw	r22, r24
     e2e:	c5 01       	movw	r24, r10
     e30:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     e34:	66 9e       	mul	r6, r22
     e36:	c0 01       	movw	r24, r0
     e38:	67 9e       	mul	r6, r23
     e3a:	90 0d       	add	r25, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	90 93 09 01 	sts	0x0109, r25
     e42:	80 93 08 01 	sts	0x0108, r24
     e46:	60 91 06 01 	lds	r22, 0x0106
     e4a:	70 91 07 01 	lds	r23, 0x0107
     e4e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     e52:	70 93 05 01 	sts	0x0105, r23
     e56:	60 93 04 01 	sts	0x0104, r22
     e5a:	63 cf       	rjmp	.-314    	; 0xd22 <_ZL8nextNotev+0x78>
     e5c:	10 92 5f 01 	sts	0x015F, r1
     e60:	10 92 5e 01 	sts	0x015E, r1
     e64:	69 c0       	rjmp	.+210    	; 0xf38 <_ZL8nextNotev+0x28e>
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	89 e0       	ldi	r24, 0x09	; 9
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <_ZL8nextNotev+0x1c6>
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	8b e0       	ldi	r24, 0x0B	; 11
     e70:	08 2f       	mov	r16, r24
     e72:	9c e0       	ldi	r25, 0x0C	; 12
     e74:	99 9e       	mul	r9, r25
     e76:	00 0d       	add	r16, r0
     e78:	11 24       	eor	r1, r1
     e7a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     e7e:	98 2f       	mov	r25, r24
     e80:	97 7f       	andi	r25, 0xF7	; 247
     e82:	93 32       	cpi	r25, 0x23	; 35
     e84:	61 f4       	brne	.+24     	; 0xe9e <_ZL8nextNotev+0x1f4>
     e86:	20 91 5e 01 	lds	r18, 0x015E
     e8a:	30 91 5f 01 	lds	r19, 0x015F
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	30 93 5f 01 	sts	0x015F, r19
     e96:	20 93 5e 01 	sts	0x015E, r18
     e9a:	0f 5f       	subi	r16, 0xFF	; 255
     e9c:	ee cf       	rjmp	.-36     	; 0xe7a <_ZL8nextNotev+0x1d0>
     e9e:	8d 32       	cpi	r24, 0x2D	; 45
     ea0:	71 f4       	brne	.+28     	; 0xebe <_ZL8nextNotev+0x214>
     ea2:	20 91 5e 01 	lds	r18, 0x015E
     ea6:	30 91 5f 01 	lds	r19, 0x015F
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	30 93 5f 01 	sts	0x015F, r19
     eb2:	20 93 5e 01 	sts	0x015E, r18
     eb6:	01 50       	subi	r16, 0x01	; 1
     eb8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     ebc:	f0 cf       	rjmp	.-32     	; 0xe9e <_ZL8nextNotev+0x1f4>
     ebe:	60 91 04 01 	lds	r22, 0x0104
     ec2:	70 91 05 01 	lds	r23, 0x0105
     ec6:	81 53       	subi	r24, 0x31	; 49
     ec8:	88 30       	cpi	r24, 0x08	; 8
     eca:	50 f4       	brcc	.+20     	; 0xee0 <_ZL8nextNotev+0x236>
     ecc:	e0 90 08 01 	lds	r14, 0x0108
     ed0:	f0 90 09 01 	lds	r15, 0x0109
     ed4:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZL9getNumberv>
     ed8:	bc 01       	movw	r22, r24
     eda:	c7 01       	movw	r24, r14
     edc:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
     ee0:	7b 01       	movw	r14, r22
     ee2:	f6 94       	lsr	r15
     ee4:	e7 94       	ror	r14
     ee6:	69 83       	std	Y+1, r22	; 0x01
     ee8:	7a 83       	std	Y+2, r23	; 0x02
     eea:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZL16currentCharacterv>
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	7a 81       	ldd	r23, Y+2	; 0x02
     ef2:	8e 32       	cpi	r24, 0x2E	; 46
     ef4:	69 f4       	brne	.+26     	; 0xf10 <_ZL8nextNotev+0x266>
     ef6:	20 91 5e 01 	lds	r18, 0x015E
     efa:	30 91 5f 01 	lds	r19, 0x015F
     efe:	2f 5f       	subi	r18, 0xFF	; 255
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	30 93 5f 01 	sts	0x015F, r19
     f06:	20 93 5e 01 	sts	0x015E, r18
     f0a:	6e 0d       	add	r22, r14
     f0c:	7f 1d       	adc	r23, r15
     f0e:	e9 cf       	rjmp	.-46     	; 0xee2 <_ZL8nextNotev+0x238>
     f10:	80 91 62 01 	lds	r24, 0x0162
     f14:	88 23       	and	r24, r24
     f16:	39 f0       	breq	.+14     	; 0xf26 <_ZL8nextNotev+0x27c>
     f18:	9b 01       	movw	r18, r22
     f1a:	36 95       	lsr	r19
     f1c:	27 95       	ror	r18
     f1e:	20 93 61 01 	sts	0x0161, r18
     f22:	62 1b       	sub	r22, r18
     f24:	71 09       	sbc	r23, r1
     f26:	40 91 02 01 	lds	r20, 0x0102
     f2a:	11 23       	and	r17, r17
     f2c:	11 f0       	breq	.+4      	; 0xf32 <_ZL8nextNotev+0x288>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <_ZL8nextNotev+0x28a>
     f32:	80 2f       	mov	r24, r16
     f34:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN15OrangutanBuzzer8playNoteEhjh>
     f38:	22 96       	adiw	r28, 0x02	; 2
     f3a:	e0 e1       	ldi	r30, 0x10	; 16
     f3c:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__epilogue_restores__+0x4>

00000f40 <__vector_13>:
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	80 91 65 01 	lds	r24, 0x0165
     f66:	90 91 66 01 	lds	r25, 0x0166
     f6a:	9c 01       	movw	r18, r24
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	31 09       	sbc	r19, r1
     f70:	30 93 66 01 	sts	0x0166, r19
     f74:	20 93 65 01 	sts	0x0165, r18
     f78:	89 2b       	or	r24, r25
     f7a:	11 f5       	brne	.+68     	; 0xfc0 <__vector_13+0x80>
     f7c:	10 92 6f 00 	sts	0x006F, r1
     f80:	78 94       	sei
     f82:	80 91 81 00 	lds	r24, 0x0081
     f86:	88 7f       	andi	r24, 0xF8	; 248
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	80 93 81 00 	sts	0x0081, r24
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	97 e2       	ldi	r25, 0x27	; 39
     f92:	90 93 89 00 	sts	0x0089, r25
     f96:	80 93 88 00 	sts	0x0088, r24
     f9a:	10 92 8b 00 	sts	0x008B, r1
     f9e:	10 92 8a 00 	sts	0x008A, r1
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	80 93 0b 01 	sts	0x010B, r24
     fa8:	80 91 5e 01 	lds	r24, 0x015E
     fac:	90 91 5f 01 	lds	r25, 0x015F
     fb0:	89 2b       	or	r24, r25
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <__vector_13+0x80>
     fb4:	80 91 64 01 	lds	r24, 0x0164
     fb8:	81 11       	cpse	r24, r1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <__vector_13+0x80>
     fbc:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZL8nextNotev>
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	bf 91       	pop	r27
     fc6:	af 91       	pop	r26
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	7f 91       	pop	r23
     fce:	6f 91       	pop	r22
     fd0:	5f 91       	pop	r21
     fd2:	4f 91       	pop	r20
     fd4:	3f 91       	pop	r19
     fd6:	2f 91       	pop	r18
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <_ZN15OrangutanBuzzer9isPlayingEv>:
     fe2:	80 91 0b 01 	lds	r24, 0x010B
     fe6:	88 23       	and	r24, r24
     fe8:	49 f0       	breq	.+18     	; 0xffc <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	20 91 5e 01 	lds	r18, 0x015E
     ff0:	30 91 5f 01 	lds	r19, 0x015F
     ff4:	23 2b       	or	r18, r19
     ff6:	19 f4       	brne	.+6      	; 0xffe <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	08 95       	ret
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	08 95       	ret

00001000 <is_playing>:
    1000:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN15OrangutanBuzzer9isPlayingEv>
    1004:	08 95       	ret

00001006 <_ZN15OrangutanBuzzer4playEPKc>:
    1006:	10 92 6f 00 	sts	0x006F, r1
    100a:	90 93 5f 01 	sts	0x015F, r25
    100e:	80 93 5e 01 	sts	0x015E, r24
    1012:	10 92 63 01 	sts	0x0163, r1
    1016:	10 92 61 01 	sts	0x0161, r1
    101a:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZL8nextNotev>
    101e:	08 95       	ret

00001020 <play>:
    1020:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN15OrangutanBuzzer4playEPKc>
    1024:	08 95       	ret

00001026 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1026:	10 92 6f 00 	sts	0x006F, r1
    102a:	90 93 5f 01 	sts	0x015F, r25
    102e:	80 93 5e 01 	sts	0x015E, r24
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 63 01 	sts	0x0163, r24
    1038:	10 92 61 01 	sts	0x0161, r1
    103c:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZL8nextNotev>
    1040:	08 95       	ret

00001042 <play_from_program_space>:
    1042:	0e 94 13 08 	call	0x1026	; 0x1026 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1046:	08 95       	ret

00001048 <delay_us.constprop.0>:
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	6f 93       	push	r22
    104e:	64 e0       	ldi	r22, 0x04	; 4
    1050:	6a 95       	dec	r22
    1052:	f1 f7       	brne	.-4      	; 0x1050 <delay_us.constprop.0+0x8>
    1054:	6f 91       	pop	r22
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	c9 f7       	brne	.-14     	; 0x104c <delay_us.constprop.0+0x4>
    105a:	08 95       	ret

0000105c <_ZN12OrangutanLCD8busyWaitEv>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	1a b1       	in	r17, 0x0a	; 10
    1066:	57 98       	cbi	0x0a, 7	; 10
    1068:	5a 98       	cbi	0x0b, 2	; 11
    106a:	28 9a       	sbi	0x05, 0	; 5
    106c:	c0 e0       	ldi	r28, 0x00	; 0
    106e:	d0 e0       	ldi	r29, 0x00	; 0
    1070:	0e 94 24 08 	call	0x1048	; 0x1048 <delay_us.constprop.0>
    1074:	5c 9a       	sbi	0x0b, 4	; 11
    1076:	0e 94 24 08 	call	0x1048	; 0x1048 <delay_us.constprop.0>
    107a:	09 b1       	in	r16, 0x09	; 9
    107c:	5c 98       	cbi	0x0b, 4	; 11
    107e:	0e 94 24 08 	call	0x1048	; 0x1048 <delay_us.constprop.0>
    1082:	5c 9a       	sbi	0x0b, 4	; 11
    1084:	0e 94 24 08 	call	0x1048	; 0x1048 <delay_us.constprop.0>
    1088:	5c 98       	cbi	0x0b, 4	; 11
    108a:	24 96       	adiw	r28, 0x04	; 4
    108c:	07 ff       	sbrs	r16, 7
    108e:	10 c0       	rjmp	.+32     	; 0x10b0 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1090:	ae 01       	movw	r20, r28
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 91 67 01 	lds	r24, 0x0167
    109a:	90 91 68 01 	lds	r25, 0x0168
    109e:	a0 91 69 01 	lds	r26, 0x0169
    10a2:	b0 91 6a 01 	lds	r27, 0x016A
    10a6:	48 17       	cp	r20, r24
    10a8:	59 07       	cpc	r21, r25
    10aa:	6a 07       	cpc	r22, r26
    10ac:	7b 07       	cpc	r23, r27
    10ae:	00 f3       	brcs	.-64     	; 0x1070 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    10b0:	1a b9       	out	0x0a, r17	; 10
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	08 95       	ret

000010bc <_ZN12OrangutanLCD8sendDataEh>:
    10bc:	95 b1       	in	r25, 0x05	; 5
    10be:	28 2f       	mov	r18, r24
    10c0:	21 70       	andi	r18, 0x01	; 1
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	48 2f       	mov	r20, r24
    10ca:	46 70       	andi	r20, 0x06	; 6
    10cc:	68 e0       	ldi	r22, 0x08	; 8
    10ce:	46 9f       	mul	r20, r22
    10d0:	a0 01       	movw	r20, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	24 2b       	or	r18, r20
    10d6:	9d 7c       	andi	r25, 0xCD	; 205
    10d8:	29 2b       	or	r18, r25
    10da:	25 b9       	out	0x05, r18	; 5
    10dc:	9b b1       	in	r25, 0x0b	; 11
    10de:	88 70       	andi	r24, 0x08	; 8
    10e0:	82 95       	swap	r24
    10e2:	80 7f       	andi	r24, 0xF0	; 240
    10e4:	9f 77       	andi	r25, 0x7F	; 127
    10e6:	89 2b       	or	r24, r25
    10e8:	8b b9       	out	0x0b, r24	; 11
    10ea:	5c 9a       	sbi	0x0b, 4	; 11
    10ec:	0e 94 24 08 	call	0x1048	; 0x1048 <delay_us.constprop.0>
    10f0:	5c 98       	cbi	0x0b, 4	; 11
    10f2:	0e 94 24 08 	call	0x1048	; 0x1048 <delay_us.constprop.0>
    10f6:	08 95       	ret

000010f8 <_ZN12OrangutanLCD4sendEhhh>:
    10f8:	a0 e0       	ldi	r26, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x16>
    1104:	c8 2f       	mov	r28, r24
    1106:	d6 2e       	mov	r13, r22
    1108:	e4 2e       	mov	r14, r20
    110a:	80 91 29 02 	lds	r24, 0x0229
    110e:	81 11       	cpse	r24, r1
    1110:	05 c0       	rjmp	.+10     	; 0x111c <_ZN12OrangutanLCD4sendEhhh+0x24>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 29 02 	sts	0x0229, r24
    1118:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN12OrangutanLCD5init2Ev>
    111c:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN12OrangutanLCD8busyWaitEv>
    1120:	14 b1       	in	r17, 0x04	; 4
    1122:	d5 b1       	in	r29, 0x05	; 5
    1124:	fa b0       	in	r15, 0x0a	; 10
    1126:	0b b1       	in	r16, 0x0b	; 11
    1128:	28 98       	cbi	0x05, 0	; 5
    112a:	dd 20       	and	r13, r13
    112c:	11 f0       	breq	.+4      	; 0x1132 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    112e:	5a 9a       	sbi	0x0b, 2	; 11
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1132:	5a 98       	cbi	0x0b, 2	; 11
    1134:	94 b1       	in	r25, 0x04	; 4
    1136:	92 63       	ori	r25, 0x32	; 50
    1138:	94 b9       	out	0x04, r25	; 4
    113a:	57 9a       	sbi	0x0a, 7	; 10
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	e8 16       	cp	r14, r24
    1140:	29 f0       	breq	.+10     	; 0x114c <_ZN12OrangutanLCD4sendEhhh+0x54>
    1142:	8c 2f       	mov	r24, r28
    1144:	82 95       	swap	r24
    1146:	8f 70       	andi	r24, 0x0F	; 15
    1148:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZN12OrangutanLCD8sendDataEh>
    114c:	8c 2f       	mov	r24, r28
    114e:	8f 70       	andi	r24, 0x0F	; 15
    1150:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZN12OrangutanLCD8sendDataEh>
    1154:	fa b8       	out	0x0a, r15	; 10
    1156:	0b b9       	out	0x0b, r16	; 11
    1158:	14 b9       	out	0x04, r17	; 4
    115a:	d5 b9       	out	0x05, r29	; 5
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	e7 e0       	ldi	r30, 0x07	; 7
    1162:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x16>

00001166 <_ZN12OrangutanLCD8send_cmdEh>:
    1166:	42 e0       	ldi	r20, 0x02	; 2
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12OrangutanLCD4sendEhhh>
    116e:	08 95       	ret

00001170 <_ZN12OrangutanLCD9send_dataEh>:
    1170:	42 e0       	ldi	r20, 0x02	; 2
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12OrangutanLCD4sendEhhh>
    1178:	08 95       	ret

0000117a <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    117a:	a1 e0       	ldi	r26, 0x01	; 1
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 ec       	ldi	r30, 0xC3	; 195
    1180:	f8 e0       	ldi	r31, 0x08	; 8
    1182:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
    1186:	8c 01       	movw	r16, r24
    1188:	66 0f       	add	r22, r22
    118a:	66 0f       	add	r22, r22
    118c:	66 0f       	add	r22, r22
    118e:	e1 2c       	mov	r14, r1
    1190:	f1 2c       	mov	r15, r1
    1192:	8e 2d       	mov	r24, r14
    1194:	86 0f       	add	r24, r22
    1196:	80 64       	ori	r24, 0x40	; 64
    1198:	69 83       	std	Y+1, r22	; 0x01
    119a:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    119e:	f8 01       	movw	r30, r16
    11a0:	ee 0d       	add	r30, r14
    11a2:	ff 1d       	adc	r31, r15
    11a4:	84 91       	lpm	r24, Z
    11a6:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN12OrangutanLCD9send_dataEh>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	e8 1a       	sub	r14, r24
    11ae:	f8 0a       	sbc	r15, r24
    11b0:	69 81       	ldd	r22, Y+1	; 0x01
    11b2:	e8 e0       	ldi	r30, 0x08	; 8
    11b4:	ee 16       	cp	r14, r30
    11b6:	f1 04       	cpc	r15, r1
    11b8:	61 f7       	brne	.-40     	; 0x1192 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    11ba:	21 96       	adiw	r28, 0x01	; 1
    11bc:	e6 e0       	ldi	r30, 0x06	; 6
    11be:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000011c2 <lcd_load_custom_character>:
    11c2:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    11c6:	08 95       	ret

000011c8 <print_character>:
    11c8:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN12OrangutanLCD9send_dataEh>
    11cc:	08 95       	ret

000011ce <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12OrangutanLCD4sendEhhh>
    11d6:	08 95       	ret

000011d8 <_ZN12OrangutanLCD5init2Ev>:
    11d8:	80 e1       	ldi	r24, 0x10	; 16
    11da:	97 e2       	ldi	r25, 0x27	; 39
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	80 93 67 01 	sts	0x0167, r24
    11e4:	90 93 68 01 	sts	0x0168, r25
    11e8:	a0 93 69 01 	sts	0x0169, r26
    11ec:	b0 93 6a 01 	sts	0x016A, r27
    11f0:	52 9a       	sbi	0x0a, 2	; 10
    11f2:	20 9a       	sbi	0x04, 0	; 4
    11f4:	54 9a       	sbi	0x0a, 4	; 10
    11f6:	8e e1       	ldi	r24, 0x1E	; 30
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1204:	86 e0       	ldi	r24, 0x06	; 6
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN12OrangutanLCD13send_4bit_cmdEh>
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
    1236:	88 e2       	ldi	r24, 0x28	; 40
    1238:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    123c:	88 e0       	ldi	r24, 0x08	; 8
    123e:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    1248:	86 e0       	ldi	r24, 0x06	; 6
    124a:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    124e:	8c e0       	ldi	r24, 0x0C	; 12
    1250:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    1254:	08 95       	ret

00001256 <_ZN12OrangutanLCD5clearEv>:
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    125c:	80 91 6d 01 	lds	r24, 0x016D
    1260:	90 91 6e 01 	lds	r25, 0x016E
    1264:	89 2b       	or	r24, r25
    1266:	f9 f0       	breq	.+62     	; 0x12a6 <_ZN12OrangutanLCD5clearEv+0x50>
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	a0 e2       	ldi	r26, 0x20	; 32
    126c:	26 2f       	mov	r18, r22
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	70 91 0c 01 	lds	r23, 0x010C
    1274:	80 91 0d 01 	lds	r24, 0x010D
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	78 9f       	mul	r23, r24
    127e:	a0 01       	movw	r20, r0
    1280:	79 9f       	mul	r23, r25
    1282:	50 0d       	add	r21, r0
    1284:	11 24       	eor	r1, r1
    1286:	24 17       	cp	r18, r20
    1288:	35 07       	cpc	r19, r21
    128a:	4c f4       	brge	.+18     	; 0x129e <_ZN12OrangutanLCD5clearEv+0x48>
    128c:	e0 91 6d 01 	lds	r30, 0x016D
    1290:	f0 91 6e 01 	lds	r31, 0x016E
    1294:	e2 0f       	add	r30, r18
    1296:	f3 1f       	adc	r31, r19
    1298:	a0 83       	st	Z, r26
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	e7 cf       	rjmp	.-50     	; 0x126c <_ZN12OrangutanLCD5clearEv+0x16>
    129e:	10 92 6b 01 	sts	0x016B, r1
    12a2:	10 92 6c 01 	sts	0x016C, r1
    12a6:	08 95       	ret

000012a8 <clear>:
    12a8:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN12OrangutanLCD5clearEv>
    12ac:	08 95       	ret

000012ae <_ZN12OrangutanLCD5printEPKc>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	89 91       	ld	r24, Y+
    12b6:	88 23       	and	r24, r24
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <_ZN12OrangutanLCD5printEPKc+0x12>
    12ba:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN12OrangutanLCD9send_dataEh>
    12be:	fa cf       	rjmp	.-12     	; 0x12b4 <_ZN12OrangutanLCD5printEPKc+0x6>
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <print>:
    12c6:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN12OrangutanLCD5printEPKc>
    12ca:	08 95       	ret

000012cc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	ec 01       	movw	r28, r24
    12d2:	fe 01       	movw	r30, r28
    12d4:	84 91       	lpm	r24, Z
    12d6:	88 23       	and	r24, r24
    12d8:	21 f0       	breq	.+8      	; 0x12e2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    12da:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN12OrangutanLCD9send_dataEh>
    12de:	21 96       	adiw	r28, 0x01	; 1
    12e0:	f8 cf       	rjmp	.-16     	; 0x12d2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <print_from_program_space>:
    12e8:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    12ec:	08 95       	ret

000012ee <_ZN12OrangutanLCD5printEm>:
    12ee:	aa e0       	ldi	r26, 0x0A	; 10
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ed e7       	ldi	r30, 0x7D	; 125
    12f4:	f9 e0       	ldi	r31, 0x09	; 9
    12f6:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x14>
    12fa:	1a e0       	ldi	r17, 0x0A	; 10
    12fc:	5a e0       	ldi	r21, 0x0A	; 10
    12fe:	c5 2e       	mov	r12, r21
    1300:	d1 2c       	mov	r13, r1
    1302:	e1 2c       	mov	r14, r1
    1304:	f1 2c       	mov	r15, r1
    1306:	06 2f       	mov	r16, r22
    1308:	a7 01       	movw	r20, r14
    130a:	96 01       	movw	r18, r12
    130c:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
    1310:	ca 01       	movw	r24, r20
    1312:	b9 01       	movw	r22, r18
    1314:	11 50       	subi	r17, 0x01	; 1
    1316:	e1 e0       	ldi	r30, 0x01	; 1
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ec 0f       	add	r30, r28
    131c:	fd 1f       	adc	r31, r29
    131e:	e1 0f       	add	r30, r17
    1320:	f1 1d       	adc	r31, r1
    1322:	00 5d       	subi	r16, 0xD0	; 208
    1324:	2a e0       	ldi	r18, 0x0A	; 10
    1326:	62 9f       	mul	r22, r18
    1328:	00 19       	sub	r16, r0
    132a:	11 24       	eor	r1, r1
    132c:	00 83       	st	Z, r16
    132e:	61 15       	cp	r22, r1
    1330:	71 05       	cpc	r23, r1
    1332:	81 05       	cpc	r24, r1
    1334:	91 05       	cpc	r25, r1
    1336:	39 f7       	brne	.-50     	; 0x1306 <_ZN12OrangutanLCD5printEm+0x18>
    1338:	1a 30       	cpi	r17, 0x0A	; 10
    133a:	58 f4       	brcc	.+22     	; 0x1352 <_ZN12OrangutanLCD5printEm+0x64>
    133c:	e1 e0       	ldi	r30, 0x01	; 1
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ec 0f       	add	r30, r28
    1342:	fd 1f       	adc	r31, r29
    1344:	e1 0f       	add	r30, r17
    1346:	f1 1d       	adc	r31, r1
    1348:	80 81       	ld	r24, Z
    134a:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN12OrangutanLCD9send_dataEh>
    134e:	1f 5f       	subi	r17, 0xFF	; 255
    1350:	f3 cf       	rjmp	.-26     	; 0x1338 <_ZN12OrangutanLCD5printEm+0x4a>
    1352:	2a 96       	adiw	r28, 0x0a	; 10
    1354:	e8 e0       	ldi	r30, 0x08	; 8
    1356:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x14>

0000135a <_ZN12OrangutanLCD5printEl>:
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	6b 01       	movw	r12, r22
    1364:	7c 01       	movw	r14, r24
    1366:	97 ff       	sbrs	r25, 7
    1368:	0b c0       	rjmp	.+22     	; 0x1380 <_ZN12OrangutanLCD5printEl+0x26>
    136a:	f0 94       	com	r15
    136c:	e0 94       	com	r14
    136e:	d0 94       	com	r13
    1370:	c0 94       	com	r12
    1372:	c1 1c       	adc	r12, r1
    1374:	d1 1c       	adc	r13, r1
    1376:	e1 1c       	adc	r14, r1
    1378:	f1 1c       	adc	r15, r1
    137a:	8d e2       	ldi	r24, 0x2D	; 45
    137c:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN12OrangutanLCD9send_dataEh>
    1380:	c7 01       	movw	r24, r14
    1382:	b6 01       	movw	r22, r12
    1384:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN12OrangutanLCD5printEm>
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	cf 90       	pop	r12
    1390:	08 95       	ret

00001392 <print_long>:
    1392:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN12OrangutanLCD5printEl>
    1396:	08 95       	ret

00001398 <_ZN12OrangutanLCD6gotoXYEhh>:
    1398:	a5 e0       	ldi	r26, 0x05	; 5
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 ed       	ldi	r30, 0xD2	; 210
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x1e>
    13a4:	18 2f       	mov	r17, r24
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	80 ec       	ldi	r24, 0xC0	; 192
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	84 e9       	ldi	r24, 0x94	; 148
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	84 ed       	ldi	r24, 0xD4	; 212
    13b4:	8c 83       	std	Y+4, r24	; 0x04
    13b6:	fe 01       	movw	r30, r28
    13b8:	e6 0f       	add	r30, r22
    13ba:	f1 1d       	adc	r31, r1
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
    13be:	81 0f       	add	r24, r17
    13c0:	6d 83       	std	Y+5, r22	; 0x05
    13c2:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN12OrangutanLCD8send_cmdEh>
    13c6:	10 93 6b 01 	sts	0x016B, r17
    13ca:	6d 81       	ldd	r22, Y+5	; 0x05
    13cc:	60 93 6c 01 	sts	0x016C, r22
    13d0:	25 96       	adiw	r28, 0x05	; 5
    13d2:	e3 e0       	ldi	r30, 0x03	; 3
    13d4:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x1e>

000013d8 <lcd_goto_xy>:
    13d8:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN12OrangutanLCD6gotoXYEhh>
    13dc:	08 95       	ret

000013de <_ZN16OrangutanDigital9setOutputEhh>:
    13de:	88 30       	cpi	r24, 0x08	; 8
    13e0:	58 f4       	brcc	.+22     	; 0x13f8 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    13e6:	99 0f       	add	r25, r25
    13e8:	8a 95       	dec	r24
    13ea:	ea f7       	brpl	.-6      	; 0x13e6 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    13ec:	89 2f       	mov	r24, r25
    13ee:	aa e2       	ldi	r26, 0x2A	; 42
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	eb e2       	ldi	r30, 0x2B	; 43
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	21 c0       	rjmp	.+66     	; 0x143a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13f8:	8e 30       	cpi	r24, 0x0E	; 14
    13fa:	60 f4       	brcc	.+24     	; 0x1414 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    13fc:	98 ef       	ldi	r25, 0xF8	; 248
    13fe:	98 0f       	add	r25, r24
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1404:	88 0f       	add	r24, r24
    1406:	9a 95       	dec	r25
    1408:	ea f7       	brpl	.-6      	; 0x1404 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    140a:	a4 e2       	ldi	r26, 0x24	; 36
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e2       	ldi	r30, 0x25	; 37
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	13 c0       	rjmp	.+38     	; 0x143a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1414:	85 31       	cpi	r24, 0x15	; 21
    1416:	60 f4       	brcc	.+24     	; 0x1430 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1418:	92 ef       	ldi	r25, 0xF2	; 242
    141a:	98 0f       	add	r25, r24
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1420:	88 0f       	add	r24, r24
    1422:	9a 95       	dec	r25
    1424:	ea f7       	brpl	.-6      	; 0x1420 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1426:	a7 e2       	ldi	r26, 0x27	; 39
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e8 e2       	ldi	r30, 0x28	; 40
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	05 c0       	rjmp	.+10     	; 0x143a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e0 e0       	ldi	r30, 0x00	; 0
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	6f 3f       	cpi	r22, 0xFF	; 255
    143c:	19 f4       	brne	.+6      	; 0x1444 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    143e:	90 81       	ld	r25, Z
    1440:	98 27       	eor	r25, r24
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1444:	66 23       	and	r22, r22
    1446:	19 f0       	breq	.+6      	; 0x144e <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1448:	90 81       	ld	r25, Z
    144a:	98 2b       	or	r25, r24
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    144e:	20 81       	ld	r18, Z
    1450:	98 2f       	mov	r25, r24
    1452:	90 95       	com	r25
    1454:	92 23       	and	r25, r18
    1456:	90 83       	st	Z, r25
    1458:	9c 91       	ld	r25, X
    145a:	98 2b       	or	r25, r24
    145c:	9c 93       	st	X, r25
    145e:	08 95       	ret

00001460 <_ZN15OrangutanMotors5init2Ev>:
    1460:	83 ef       	ldi	r24, 0xF3	; 243
    1462:	80 93 b0 00 	sts	0x00B0, r24
    1466:	84 bd       	out	0x24, r24	; 36
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	80 93 b1 00 	sts	0x00B1, r24
    146e:	85 bd       	out	0x25, r24	; 37
    1470:	10 92 b4 00 	sts	0x00B4, r1
    1474:	10 92 b3 00 	sts	0x00B3, r1
    1478:	18 bc       	out	0x28, r1	; 40
    147a:	17 bc       	out	0x27, r1	; 39
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	86 e0       	ldi	r24, 0x06	; 6
    1480:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN16OrangutanDigital9setOutputEhh>
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	85 e0       	ldi	r24, 0x05	; 5
    1488:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN16OrangutanDigital9setOutputEhh>
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	8b e0       	ldi	r24, 0x0B	; 11
    1490:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN16OrangutanDigital9setOutputEhh>
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN16OrangutanDigital9setOutputEhh>
    149c:	08 95       	ret

0000149e <_ZN15OrangutanMotors4initEv>:
    149e:	80 91 2a 02 	lds	r24, 0x022A
    14a2:	81 11       	cpse	r24, r1
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <_ZN15OrangutanMotors4initEv+0x12>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 2a 02 	sts	0x022A, r24
    14ac:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN15OrangutanMotors5init2Ev>
    14b0:	08 95       	ret

000014b2 <_ZN15OrangutanMotors10setM1SpeedEi>:
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
    14b8:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN15OrangutanMotors4initEv>
    14bc:	d7 ff       	sbrs	r29, 7
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    14c0:	d1 95       	neg	r29
    14c2:	c1 95       	neg	r28
    14c4:	d1 09       	sbc	r29, r1
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	cf 3f       	cpi	r28, 0xFF	; 255
    14ce:	d1 05       	cpc	r29, r1
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    14d2:	14 f0       	brlt	.+4      	; 0x14d8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    14d4:	cf ef       	ldi	r28, 0xFF	; 255
    14d6:	d0 e0       	ldi	r29, 0x00	; 0
    14d8:	88 23       	and	r24, r24
    14da:	19 f0       	breq	.+6      	; 0x14e2 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    14dc:	18 bc       	out	0x28, r1	; 40
    14de:	c7 bd       	out	0x27, r28	; 39
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    14e2:	c8 bd       	out	0x28, r28	; 40
    14e4:	17 bc       	out	0x27, r1	; 39
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <_ZN15OrangutanMotors10setM2SpeedEi>:
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
    14f2:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN15OrangutanMotors4initEv>
    14f6:	d7 ff       	sbrs	r29, 7
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    14fa:	d1 95       	neg	r29
    14fc:	c1 95       	neg	r28
    14fe:	d1 09       	sbc	r29, r1
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	cf 3f       	cpi	r28, 0xFF	; 255
    1508:	d1 05       	cpc	r29, r1
    150a:	19 f0       	breq	.+6      	; 0x1512 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    150c:	14 f0       	brlt	.+4      	; 0x1512 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    150e:	cf ef       	ldi	r28, 0xFF	; 255
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	88 23       	and	r24, r24
    1514:	29 f0       	breq	.+10     	; 0x1520 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1516:	10 92 b4 00 	sts	0x00B4, r1
    151a:	c0 93 b3 00 	sts	0x00B3, r28
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1520:	c0 93 b4 00 	sts	0x00B4, r28
    1524:	10 92 b3 00 	sts	0x00B3, r1
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <_ZN15OrangutanMotors9setSpeedsEii>:
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	eb 01       	movw	r28, r22
    1534:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN15OrangutanMotors10setM1SpeedEi>
    1538:	ce 01       	movw	r24, r28
    153a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_ZN15OrangutanMotors10setM2SpeedEi>
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <set_motors>:
    1544:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN15OrangutanMotors9setSpeedsEii>
    1548:	08 95       	ret

0000154a <_ZN20OrangutanPushbuttons5init2Ev>:
    154a:	84 b1       	in	r24, 0x04	; 4
    154c:	8d 7c       	andi	r24, 0xCD	; 205
    154e:	84 b9       	out	0x04, r24	; 4
    1550:	85 b1       	in	r24, 0x05	; 5
    1552:	82 63       	ori	r24, 0x32	; 50
    1554:	85 b9       	out	0x05, r24	; 5
    1556:	85 e0       	ldi	r24, 0x05	; 5
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	6f 93       	push	r22
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	6a 95       	dec	r22
    1560:	f1 f7       	brne	.-4      	; 0x155e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1562:	6f 91       	pop	r22
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	c9 f7       	brne	.-14     	; 0x155a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1568:	08 95       	ret

0000156a <_ZN20OrangutanPushbuttons4initEv>:
    156a:	80 91 2b 02 	lds	r24, 0x022B
    156e:	81 11       	cpse	r24, r1
    1570:	05 c0       	rjmp	.+10     	; 0x157c <_ZN20OrangutanPushbuttons4initEv+0x12>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 2b 02 	sts	0x022B, r24
    1578:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN20OrangutanPushbuttons5init2Ev>
    157c:	08 95       	ret

0000157e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    157e:	cf 93       	push	r28
    1580:	c8 2f       	mov	r28, r24
    1582:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN20OrangutanPushbuttons4initEv>
    1586:	83 b1       	in	r24, 0x03	; 3
    1588:	8c 23       	and	r24, r28
    158a:	e9 f3       	breq	.-6      	; 0x1586 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    158c:	8a e0       	ldi	r24, 0x0A	; 10
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 30 0b 	call	0x1660	; 0x1660 <delay_ms>
    1594:	83 b1       	in	r24, 0x03	; 3
    1596:	8c 23       	and	r24, r28
    1598:	b1 f3       	breq	.-20     	; 0x1586 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    159a:	83 b1       	in	r24, 0x03	; 3
    159c:	8c 23       	and	r24, r28
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <wait_for_button_release>:
    15a2:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    15a6:	08 95       	ret

000015a8 <_ZN20OrangutanPushbuttons9isPressedEh>:
    15a8:	a1 e0       	ldi	r26, 0x01	; 1
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea ed       	ldi	r30, 0xDA	; 218
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN20OrangutanPushbuttons4initEv>
    15ba:	93 b1       	in	r25, 0x03	; 3
    15bc:	90 95       	com	r25
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	89 23       	and	r24, r25
    15c2:	21 96       	adiw	r28, 0x01	; 1
    15c4:	e2 e0       	ldi	r30, 0x02	; 2
    15c6:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000015ca <button_is_pressed>:
    15ca:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN20OrangutanPushbuttons9isPressedEh>
    15ce:	08 95       	ret

000015d0 <__vector_9>:
    15d0:	2f 92       	push	r2
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	2f b6       	in	r2, 0x3f	; 63
    15d8:	80 91 76 01 	lds	r24, 0x0176
    15dc:	90 91 77 01 	lds	r25, 0x0177
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	80 93 76 01 	sts	0x0176, r24
    15e6:	90 93 77 01 	sts	0x0177, r25
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	80 91 78 01 	lds	r24, 0x0178
    15f0:	89 1f       	adc	r24, r25
    15f2:	80 93 78 01 	sts	0x0178, r24
    15f6:	90 91 70 01 	lds	r25, 0x0170
    15fa:	9c 5f       	subi	r25, 0xFC	; 252
    15fc:	90 93 70 01 	sts	0x0170, r25
    1600:	80 91 6f 01 	lds	r24, 0x016F
    1604:	80 51       	subi	r24, 0x10	; 16
    1606:	97 42       	sbci	r25, 0x27	; 39
    1608:	c0 f0       	brcs	.+48     	; 0x163a <end>
    160a:	90 93 70 01 	sts	0x0170, r25
    160e:	80 93 6f 01 	sts	0x016F, r24
    1612:	80 91 71 01 	lds	r24, 0x0171
    1616:	90 91 72 01 	lds	r25, 0x0172
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	80 93 71 01 	sts	0x0171, r24
    1620:	90 93 72 01 	sts	0x0172, r25
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	80 91 73 01 	lds	r24, 0x0173
    162a:	89 1f       	adc	r24, r25
    162c:	80 93 73 01 	sts	0x0173, r24
    1630:	80 91 74 01 	lds	r24, 0x0174
    1634:	89 1f       	adc	r24, r25
    1636:	80 93 74 01 	sts	0x0174, r24

0000163a <end>:
    163a:	2f be       	out	0x3f, r2	; 63
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	2f 90       	pop	r2
    1642:	18 95       	reti

00001644 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1644:	28 ee       	ldi	r18, 0xE8	; 232
    1646:	33 e0       	ldi	r19, 0x03	; 3
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	48 f0       	brcs	.+18     	; 0x165e <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    164c:	f9 01       	movw	r30, r18
    164e:	6f 93       	push	r22
    1650:	64 e0       	ldi	r22, 0x04	; 4
    1652:	6a 95       	dec	r22
    1654:	f1 f7       	brne	.-4      	; 0x1652 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1656:	6f 91       	pop	r22
    1658:	31 97       	sbiw	r30, 0x01	; 1
    165a:	c9 f7       	brne	.-14     	; 0x164e <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    165c:	f5 cf       	rjmp	.-22     	; 0x1648 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    165e:	08 95       	ret

00001660 <delay_ms>:
    1660:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN13OrangutanTime17delayMillisecondsEj>
    1664:	08 95       	ret

00001666 <_ZN13OrangutanTime5init2Ev>:
    1666:	e0 e7       	ldi	r30, 0x70	; 112
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8e 7f       	andi	r24, 0xFE	; 254
    166e:	80 83       	st	Z, r24
    1670:	a0 eb       	ldi	r26, 0xB0	; 176
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	8c 91       	ld	r24, X
    1676:	83 60       	ori	r24, 0x03	; 3
    1678:	8c 93       	st	X, r24
    167a:	a1 eb       	ldi	r26, 0xB1	; 177
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	8c 91       	ld	r24, X
    1680:	80 7f       	andi	r24, 0xF0	; 240
    1682:	8c 93       	st	X, r24
    1684:	8c 91       	ld	r24, X
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	8c 93       	st	X, r24
    168a:	b8 9a       	sbi	0x17, 0	; 23
    168c:	80 81       	ld	r24, Z
    168e:	81 60       	ori	r24, 0x01	; 1
    1690:	80 83       	st	Z, r24
    1692:	78 94       	sei
    1694:	08 95       	ret

00001696 <_ZN13OrangutanTime4initEv>:
    1696:	80 91 2c 02 	lds	r24, 0x022C
    169a:	81 11       	cpse	r24, r1
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <_ZN13OrangutanTime4initEv+0x12>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 2c 02 	sts	0x022C, r24
    16a4:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZN13OrangutanTime5init2Ev>
    16a8:	08 95       	ret

000016aa <_ZN13OrangutanTime2msEv>:
    16aa:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN13OrangutanTime4initEv>
    16ae:	e0 e7       	ldi	r30, 0x70	; 112
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	80 83       	st	Z, r24
    16b8:	60 91 71 01 	lds	r22, 0x0171
    16bc:	70 91 72 01 	lds	r23, 0x0172
    16c0:	80 91 73 01 	lds	r24, 0x0173
    16c4:	90 91 74 01 	lds	r25, 0x0174
    16c8:	20 81       	ld	r18, Z
    16ca:	21 60       	ori	r18, 0x01	; 1
    16cc:	20 83       	st	Z, r18
    16ce:	08 95       	ret

000016d0 <get_ms>:
    16d0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN13OrangutanTime2msEv>
    16d4:	08 95       	ret

000016d6 <_ZN13OrangutanTime5resetEv>:
    16d6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN13OrangutanTime4initEv>
    16da:	e0 e7       	ldi	r30, 0x70	; 112
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	80 83       	st	Z, r24
    16e4:	10 92 71 01 	sts	0x0171, r1
    16e8:	10 92 72 01 	sts	0x0172, r1
    16ec:	10 92 73 01 	sts	0x0173, r1
    16f0:	10 92 74 01 	sts	0x0174, r1
    16f4:	10 92 70 01 	sts	0x0170, r1
    16f8:	10 92 6f 01 	sts	0x016F, r1
    16fc:	80 81       	ld	r24, Z
    16fe:	81 60       	ori	r24, 0x01	; 1
    1700:	80 83       	st	Z, r24
    1702:	08 95       	ret

00001704 <calibrate_line_sensors>:
    1704:	68 2f       	mov	r22, r24
    1706:	89 e7       	ldi	r24, 0x79	; 121
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16PololuQTRSensors9calibrateEh>
    170e:	08 95       	ret

00001710 <read_line>:
    1710:	46 2f       	mov	r20, r22
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	bc 01       	movw	r22, r24
    1716:	89 e7       	ldi	r24, 0x79	; 121
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 3b 10 	call	0x2076	; 0x2076 <_ZN16PololuQTRSensors8readLineEPjhh>
    171e:	08 95       	ret

00001720 <_ZN9Pololu3pi4initEjh>:
    1720:	0f 93       	push	r16
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	00 d0       	rcall	.+0      	; 0x1728 <_ZN9Pololu3pi4initEjh+0x8>
    1728:	00 d0       	rcall	.+0      	; 0x172a <_ZN9Pololu3pi4initEjh+0xa>
    172a:	1f 92       	push	r1
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	9c 01       	movw	r18, r24
    1732:	85 e0       	ldi	r24, 0x05	; 5
    1734:	e6 e3       	ldi	r30, 0x36	; 54
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	de 01       	movw	r26, r28
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	01 90       	ld	r0, Z+
    173e:	0d 92       	st	X+, r0
    1740:	8a 95       	dec	r24
    1742:	e1 f7       	brne	.-8      	; 0x173c <_ZN9Pololu3pi4initEjh+0x1c>
    1744:	66 23       	and	r22, r22
    1746:	11 f0       	breq	.+4      	; 0x174c <_ZN9Pololu3pi4initEjh+0x2c>
    1748:	0f ef       	ldi	r16, 0xFF	; 255
    174a:	01 c0       	rjmp	.+2      	; 0x174e <_ZN9Pololu3pi4initEjh+0x2e>
    174c:	03 e1       	ldi	r16, 0x13	; 19
    174e:	45 e0       	ldi	r20, 0x05	; 5
    1750:	be 01       	movw	r22, r28
    1752:	6f 5f       	subi	r22, 0xFF	; 255
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	89 e7       	ldi	r24, 0x79	; 121
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    175e:	89 e7       	ldi	r24, 0x79	; 121
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN16PololuQTRSensors11emittersOffEv>
    1766:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN13OrangutanTime5resetEv>
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	0f 91       	pop	r16
    177a:	08 95       	ret

0000177c <pololu_3pi_init>:
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	0e 94 90 0b 	call	0x1720	; 0x1720 <_ZN9Pololu3pi4initEjh>
    1782:	08 95       	ret

00001784 <_GLOBAL__sub_D_pololu_3pi_init>:
    1784:	89 e7       	ldi	r24, 0x79	; 121
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 b0 10 	call	0x2160	; 0x2160 <_ZN16PololuQTRSensorsD1Ev>
    178c:	08 95       	ret

0000178e <delay_us>:
    178e:	6f 93       	push	r22
    1790:	64 e0       	ldi	r22, 0x04	; 4
    1792:	6a 95       	dec	r22
    1794:	f1 f7       	brne	.-4      	; 0x1792 <delay_us+0x4>
    1796:	6f 91       	pop	r22
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	c9 f7       	brne	.-14     	; 0x178e <delay_us>
    179c:	08 95       	ret

0000179e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    179e:	fc 01       	movw	r30, r24
    17a0:	11 82       	std	Z+1, r1	; 0x01
    17a2:	10 82       	st	Z, r1
    17a4:	13 82       	std	Z+3, r1	; 0x03
    17a6:	12 82       	std	Z+2, r1	; 0x02
    17a8:	15 82       	std	Z+5, r1	; 0x05
    17aa:	14 82       	std	Z+4, r1	; 0x04
    17ac:	16 82       	std	Z+6, r1	; 0x06
    17ae:	68 30       	cpi	r22, 0x08	; 8
    17b0:	68 f4       	brcc	.+26     	; 0x17cc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    17b2:	89 e2       	ldi	r24, 0x29	; 41
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	8b e2       	ldi	r24, 0x2B	; 43
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	93 83       	std	Z+3, r25	; 0x03
    17c0:	82 83       	std	Z+2, r24	; 0x02
    17c2:	8a e2       	ldi	r24, 0x2A	; 42
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	95 83       	std	Z+5, r25	; 0x05
    17c8:	84 83       	std	Z+4, r24	; 0x04
    17ca:	1f c0       	rjmp	.+62     	; 0x180a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    17cc:	6e 30       	cpi	r22, 0x0E	; 14
    17ce:	70 f4       	brcc	.+28     	; 0x17ec <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    17d0:	83 e2       	ldi	r24, 0x23	; 35
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
    17d8:	85 e2       	ldi	r24, 0x25	; 37
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	93 83       	std	Z+3, r25	; 0x03
    17de:	82 83       	std	Z+2, r24	; 0x02
    17e0:	84 e2       	ldi	r24, 0x24	; 36
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	95 83       	std	Z+5, r25	; 0x05
    17e6:	84 83       	std	Z+4, r24	; 0x04
    17e8:	68 50       	subi	r22, 0x08	; 8
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    17ec:	65 31       	cpi	r22, 0x15	; 21
    17ee:	98 f4       	brcc	.+38     	; 0x1816 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    17f0:	86 e2       	ldi	r24, 0x26	; 38
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
    17f8:	88 e2       	ldi	r24, 0x28	; 40
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	93 83       	std	Z+3, r25	; 0x03
    17fe:	82 83       	std	Z+2, r24	; 0x02
    1800:	87 e2       	ldi	r24, 0x27	; 39
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	95 83       	std	Z+5, r25	; 0x05
    1806:	84 83       	std	Z+4, r24	; 0x04
    1808:	6e 50       	subi	r22, 0x0E	; 14
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    180e:	88 0f       	add	r24, r24
    1810:	6a 95       	dec	r22
    1812:	ea f7       	brpl	.-6      	; 0x180e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    1814:	86 83       	std	Z+6, r24	; 0x06
    1816:	08 95       	ret

00001818 <_ZN16PololuQTRSensors4initEhhh>:
    1818:	a7 e0       	ldi	r26, 0x07	; 7
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e1       	ldi	r30, 0x12	; 18
    181e:	fc e0       	ldi	r31, 0x0C	; 12
    1820:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__prologue_saves__+0x1c>
    1824:	8c 01       	movw	r16, r24
    1826:	fc 01       	movw	r30, r24
    1828:	11 82       	std	Z+1, r1	; 0x01
    182a:	10 82       	st	Z, r1
    182c:	13 82       	std	Z+3, r1	; 0x03
    182e:	12 82       	std	Z+2, r1	; 0x02
    1830:	15 82       	std	Z+5, r1	; 0x05
    1832:	14 82       	std	Z+4, r1	; 0x04
    1834:	17 82       	std	Z+7, r1	; 0x07
    1836:	16 82       	std	Z+6, r1	; 0x06
    1838:	61 31       	cpi	r22, 0x11	; 17
    183a:	18 f0       	brcs	.+6      	; 0x1842 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    183c:	80 e1       	ldi	r24, 0x10	; 16
    183e:	80 87       	std	Z+8, r24	; 0x08
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1842:	fc 01       	movw	r30, r24
    1844:	60 87       	std	Z+8, r22	; 0x08
    1846:	f8 01       	movw	r30, r16
    1848:	20 8b       	std	Z+16, r18	; 0x10
    184a:	64 2f       	mov	r22, r20
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	f8 01       	movw	r30, r16
    1858:	81 87       	std	Z+9, r24	; 0x09
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	93 87       	std	Z+11, r25	; 0x0b
    1860:	82 87       	std	Z+10, r24	; 0x0a
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	95 87       	std	Z+13, r25	; 0x0d
    1868:	84 87       	std	Z+12, r24	; 0x0c
    186a:	27 96       	adiw	r28, 0x07	; 7
    186c:	e4 e0       	ldi	r30, 0x04	; 4
    186e:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__epilogue_restores__+0x1c>

00001872 <_ZN16PololuQTRSensors11emittersOffEv>:
    1872:	fc 01       	movw	r30, r24
    1874:	a4 85       	ldd	r26, Z+12	; 0x0c
    1876:	b5 85       	ldd	r27, Z+13	; 0x0d
    1878:	10 97       	sbiw	r26, 0x00	; 0
    187a:	79 f0       	breq	.+30     	; 0x189a <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    187c:	8c 91       	ld	r24, X
    187e:	91 85       	ldd	r25, Z+9	; 0x09
    1880:	89 2b       	or	r24, r25
    1882:	8c 93       	st	X, r24
    1884:	a2 85       	ldd	r26, Z+10	; 0x0a
    1886:	b3 85       	ldd	r27, Z+11	; 0x0b
    1888:	9c 91       	ld	r25, X
    188a:	81 85       	ldd	r24, Z+9	; 0x09
    188c:	80 95       	com	r24
    188e:	89 23       	and	r24, r25
    1890:	8c 93       	st	X, r24
    1892:	88 ec       	ldi	r24, 0xC8	; 200
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 c7 0b 	call	0x178e	; 0x178e <delay_us>
    189a:	08 95       	ret

0000189c <_ZN16PololuQTRSensors10emittersOnEv>:
    189c:	fc 01       	movw	r30, r24
    189e:	a4 85       	ldd	r26, Z+12	; 0x0c
    18a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    18a2:	10 97       	sbiw	r26, 0x00	; 0
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    18a6:	8c 91       	ld	r24, X
    18a8:	91 85       	ldd	r25, Z+9	; 0x09
    18aa:	89 2b       	or	r24, r25
    18ac:	8c 93       	st	X, r24
    18ae:	a2 85       	ldd	r26, Z+10	; 0x0a
    18b0:	b3 85       	ldd	r27, Z+11	; 0x0b
    18b2:	8c 91       	ld	r24, X
    18b4:	91 85       	ldd	r25, Z+9	; 0x09
    18b6:	89 2b       	or	r24, r25
    18b8:	8c 93       	st	X, r24
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 c7 0b 	call	0x178e	; 0x178e <delay_us>
    18c2:	08 95       	ret

000018c4 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    18c4:	a7 e0       	ldi	r26, 0x07	; 7
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e8 e6       	ldi	r30, 0x68	; 104
    18ca:	fc e0       	ldi	r31, 0x0C	; 12
    18cc:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x6>
    18d0:	7c 01       	movw	r14, r24
    18d2:	4b 01       	movw	r8, r22
    18d4:	64 2f       	mov	r22, r20
    18d6:	39 01       	movw	r6, r18
    18d8:	40 2f       	mov	r20, r16
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN16PololuQTRSensors4initEhhh>
    18e0:	87 01       	movw	r16, r14
    18e2:	0f 5b       	subi	r16, 0xBF	; 191
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	f8 01       	movw	r30, r16
    18e8:	10 82       	st	Z, r1
    18ea:	67 01       	movw	r12, r14
    18ec:	f2 e4       	ldi	r31, 0x42	; 66
    18ee:	cf 0e       	add	r12, r31
    18f0:	d1 1c       	adc	r13, r1
    18f2:	f6 01       	movw	r30, r12
    18f4:	10 82       	st	Z, r1
    18f6:	57 01       	movw	r10, r14
    18f8:	f3 e4       	ldi	r31, 0x43	; 67
    18fa:	af 0e       	add	r10, r31
    18fc:	b1 1c       	adc	r11, r1
    18fe:	f5 01       	movw	r30, r10
    1900:	10 82       	st	Z, r1
    1902:	f7 01       	movw	r30, r14
    1904:	77 86       	std	Z+15, r7	; 0x0f
    1906:	66 86       	std	Z+14, r6	; 0x0e
    1908:	51 2c       	mov	r5, r1
    190a:	f7 01       	movw	r30, r14
    190c:	80 85       	ldd	r24, Z+8	; 0x08
    190e:	58 16       	cp	r5, r24
    1910:	50 f5       	brcc	.+84     	; 0x1966 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1912:	65 2c       	mov	r6, r5
    1914:	71 2c       	mov	r7, r1
    1916:	f4 01       	movw	r30, r8
    1918:	e6 0d       	add	r30, r6
    191a:	f7 1d       	adc	r31, r7
    191c:	60 81       	ld	r22, Z
    191e:	ce 01       	movw	r24, r28
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1926:	2f 81       	ldd	r18, Y+7	; 0x07
    1928:	f7 01       	movw	r30, r14
    192a:	e6 0d       	add	r30, r6
    192c:	f7 1d       	adc	r31, r7
    192e:	21 8b       	std	Z+17, r18	; 0x11
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	f3 01       	movw	r30, r6
    1936:	ee 0f       	add	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	ee 0d       	add	r30, r14
    193c:	ff 1d       	adc	r31, r15
    193e:	92 a3       	std	Z+34, r25	; 0x22
    1940:	81 a3       	std	Z+33, r24	; 0x21
    1942:	83 32       	cpi	r24, 0x23	; 35
    1944:	91 05       	cpc	r25, r1
    1946:	11 f4       	brne	.+4      	; 0x194c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1948:	f8 01       	movw	r30, r16
    194a:	08 c0       	rjmp	.+16     	; 0x195c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    194c:	86 32       	cpi	r24, 0x26	; 38
    194e:	91 05       	cpc	r25, r1
    1950:	11 f4       	brne	.+4      	; 0x1956 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1952:	f6 01       	movw	r30, r12
    1954:	03 c0       	rjmp	.+6      	; 0x195c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1956:	89 97       	sbiw	r24, 0x29	; 41
    1958:	21 f4       	brne	.+8      	; 0x1962 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    195a:	f5 01       	movw	r30, r10
    195c:	80 81       	ld	r24, Z
    195e:	82 2b       	or	r24, r18
    1960:	80 83       	st	Z, r24
    1962:	53 94       	inc	r5
    1964:	d2 cf       	rjmp	.-92     	; 0x190a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1966:	27 96       	adiw	r28, 0x07	; 7
    1968:	ef e0       	ldi	r30, 0x0F	; 15
    196a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x6>

0000196e <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ed eb       	ldi	r30, 0xBD	; 189
    1974:	fc e0       	ldi	r31, 0x0C	; 12
    1976:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__prologue_saves__+0xa>
    197a:	ec 01       	movw	r28, r24
    197c:	5b 01       	movw	r10, r22
    197e:	6c 01       	movw	r12, r24
    1980:	81 e4       	ldi	r24, 0x41	; 65
    1982:	c8 0e       	add	r12, r24
    1984:	d1 1c       	adc	r13, r1
    1986:	f6 01       	movw	r30, r12
    1988:	80 80       	ld	r8, Z
    198a:	7e 01       	movw	r14, r28
    198c:	f2 e4       	ldi	r31, 0x42	; 66
    198e:	ef 0e       	add	r14, r31
    1990:	f1 1c       	adc	r15, r1
    1992:	f7 01       	movw	r30, r14
    1994:	70 80       	ld	r7, Z
    1996:	8e 01       	movw	r16, r28
    1998:	0d 5b       	subi	r16, 0xBD	; 189
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	f8 01       	movw	r30, r16
    199e:	90 80       	ld	r9, Z
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	98 85       	ldd	r25, Y+8	; 0x08
    19a4:	89 17       	cp	r24, r25
    19a6:	48 f4       	brcc	.+18     	; 0x19ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    19a8:	f5 01       	movw	r30, r10
    19aa:	e8 0f       	add	r30, r24
    19ac:	f1 1d       	adc	r31, r1
    19ae:	e8 0f       	add	r30, r24
    19b0:	f1 1d       	adc	r31, r1
    19b2:	11 82       	std	Z+1, r1	; 0x01
    19b4:	10 82       	st	Z, r1
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	f4 cf       	rjmp	.-24     	; 0x19a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    19ba:	84 b1       	in	r24, 0x04	; 4
    19bc:	f6 01       	movw	r30, r12
    19be:	90 81       	ld	r25, Z
    19c0:	89 2b       	or	r24, r25
    19c2:	84 b9       	out	0x04, r24	; 4
    19c4:	87 b1       	in	r24, 0x07	; 7
    19c6:	f7 01       	movw	r30, r14
    19c8:	90 81       	ld	r25, Z
    19ca:	89 2b       	or	r24, r25
    19cc:	87 b9       	out	0x07, r24	; 7
    19ce:	8a b1       	in	r24, 0x0a	; 10
    19d0:	f8 01       	movw	r30, r16
    19d2:	90 81       	ld	r25, Z
    19d4:	89 2b       	or	r24, r25
    19d6:	8a b9       	out	0x0a, r24	; 10
    19d8:	85 b1       	in	r24, 0x05	; 5
    19da:	f6 01       	movw	r30, r12
    19dc:	90 81       	ld	r25, Z
    19de:	89 2b       	or	r24, r25
    19e0:	85 b9       	out	0x05, r24	; 5
    19e2:	88 b1       	in	r24, 0x08	; 8
    19e4:	f7 01       	movw	r30, r14
    19e6:	90 81       	ld	r25, Z
    19e8:	89 2b       	or	r24, r25
    19ea:	88 b9       	out	0x08, r24	; 8
    19ec:	8b b1       	in	r24, 0x0b	; 11
    19ee:	f8 01       	movw	r30, r16
    19f0:	90 81       	ld	r25, Z
    19f2:	89 2b       	or	r24, r25
    19f4:	8b b9       	out	0x0b, r24	; 11
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 c7 0b 	call	0x178e	; 0x178e <delay_us>
    19fe:	94 b1       	in	r25, 0x04	; 4
    1a00:	f6 01       	movw	r30, r12
    1a02:	80 81       	ld	r24, Z
    1a04:	80 95       	com	r24
    1a06:	89 23       	and	r24, r25
    1a08:	84 b9       	out	0x04, r24	; 4
    1a0a:	97 b1       	in	r25, 0x07	; 7
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 95       	com	r24
    1a12:	89 23       	and	r24, r25
    1a14:	87 b9       	out	0x07, r24	; 7
    1a16:	9a b1       	in	r25, 0x0a	; 10
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 95       	com	r24
    1a1e:	89 23       	and	r24, r25
    1a20:	8a b9       	out	0x0a, r24	; 10
    1a22:	95 b1       	in	r25, 0x05	; 5
    1a24:	f6 01       	movw	r30, r12
    1a26:	80 81       	ld	r24, Z
    1a28:	80 95       	com	r24
    1a2a:	89 23       	and	r24, r25
    1a2c:	85 b9       	out	0x05, r24	; 5
    1a2e:	98 b1       	in	r25, 0x08	; 8
    1a30:	f7 01       	movw	r30, r14
    1a32:	80 81       	ld	r24, Z
    1a34:	80 95       	com	r24
    1a36:	89 23       	and	r24, r25
    1a38:	88 b9       	out	0x08, r24	; 8
    1a3a:	9b b1       	in	r25, 0x0b	; 11
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 95       	com	r24
    1a42:	89 23       	and	r24, r25
    1a44:	8b b9       	out	0x0b, r24	; 11
    1a46:	e0 90 b0 00 	lds	r14, 0x00B0
    1a4a:	d0 90 b1 00 	lds	r13, 0x00B1
    1a4e:	80 91 b0 00 	lds	r24, 0x00B0
    1a52:	83 60       	ori	r24, 0x03	; 3
    1a54:	80 93 b0 00 	sts	0x00B0, r24
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	80 93 b1 00 	sts	0x00B1, r24
    1a5e:	40 91 b2 00 	lds	r20, 0x00B2
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a68:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a6a:	82 17       	cp	r24, r18
    1a6c:	93 07       	cpc	r25, r19
    1a6e:	20 f5       	brcc	.+72     	; 0x1ab8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1a70:	c0 90 b2 00 	lds	r12, 0x00B2
    1a74:	2c 2d       	mov	r18, r12
    1a76:	24 1b       	sub	r18, r20
    1a78:	82 0f       	add	r24, r18
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	03 b1       	in	r16, 0x03	; 3
    1a7e:	08 11       	cpse	r16, r8
    1a80:	32 c0       	rjmp	.+100    	; 0x1ae6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a82:	f6 b0       	in	r15, 0x06	; 6
    1a84:	f7 10       	cpse	r15, r7
    1a86:	2f c0       	rjmp	.+94     	; 0x1ae6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a88:	29 b1       	in	r18, 0x09	; 9
    1a8a:	29 11       	cpse	r18, r9
    1a8c:	2c c0       	rjmp	.+88     	; 0x1ae6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a8e:	10 c0       	rjmp	.+32     	; 0x1ab0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1a90:	21 2f       	mov	r18, r17
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	a9 01       	movw	r20, r18
    1a96:	44 0f       	add	r20, r20
    1a98:	55 1f       	adc	r21, r21
    1a9a:	f5 01       	movw	r30, r10
    1a9c:	e4 0f       	add	r30, r20
    1a9e:	f5 1f       	adc	r31, r21
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	67 2b       	or	r22, r23
    1aa6:	21 f1       	breq	.+72     	; 0x1af0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1aa8:	1f 5f       	subi	r17, 0xFF	; 255
    1aaa:	28 85       	ldd	r18, Y+8	; 0x08
    1aac:	12 17       	cp	r17, r18
    1aae:	80 f3       	brcs	.-32     	; 0x1a90 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1ab0:	7f 2c       	mov	r7, r15
    1ab2:	80 2e       	mov	r8, r16
    1ab4:	4c 2d       	mov	r20, r12
    1ab6:	d7 cf       	rjmp	.-82     	; 0x1a66 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1ab8:	e0 92 b0 00 	sts	0x00B0, r14
    1abc:	d0 92 b1 00 	sts	0x00B1, r13
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	88 85       	ldd	r24, Y+8	; 0x08
    1ac4:	28 17       	cp	r18, r24
    1ac6:	30 f5       	brcc	.+76     	; 0x1b14 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1ac8:	f5 01       	movw	r30, r10
    1aca:	e2 0f       	add	r30, r18
    1acc:	f1 1d       	adc	r31, r1
    1ace:	e2 0f       	add	r30, r18
    1ad0:	f1 1d       	adc	r31, r1
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	89 2b       	or	r24, r25
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1ada:	8e 85       	ldd	r24, Y+14	; 0x0e
    1adc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ade:	91 83       	std	Z+1, r25	; 0x01
    1ae0:	80 83       	st	Z, r24
    1ae2:	2f 5f       	subi	r18, 0xFF	; 255
    1ae4:	ee cf       	rjmp	.-36     	; 0x1ac2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1ae6:	03 b1       	in	r16, 0x03	; 3
    1ae8:	f6 b0       	in	r15, 0x06	; 6
    1aea:	99 b0       	in	r9, 0x09	; 9
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	dd cf       	rjmp	.-70     	; 0x1aaa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1af0:	de 01       	movw	r26, r28
    1af2:	a4 0f       	add	r26, r20
    1af4:	b5 1f       	adc	r27, r21
    1af6:	91 96       	adiw	r26, 0x21	; 33
    1af8:	0d 90       	ld	r0, X+
    1afa:	bc 91       	ld	r27, X
    1afc:	a0 2d       	mov	r26, r0
    1afe:	4c 91       	ld	r20, X
    1b00:	de 01       	movw	r26, r28
    1b02:	a2 0f       	add	r26, r18
    1b04:	b3 1f       	adc	r27, r19
    1b06:	51 96       	adiw	r26, 0x11	; 17
    1b08:	2c 91       	ld	r18, X
    1b0a:	42 23       	and	r20, r18
    1b0c:	69 f6       	brne	.-102    	; 0x1aa8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	ca cf       	rjmp	.-108    	; 0x1aa8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	ed e0       	ldi	r30, 0x0D	; 13
    1b1a:	0c 94 86 11 	jmp	0x230c	; 0x230c <__epilogue_restores__+0xa>

00001b1e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1b1e:	ef 92       	push	r14
    1b20:	ff 92       	push	r15
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	f0 90 7c 00 	lds	r15, 0x007C
    1b32:	00 91 7a 00 	lds	r16, 0x007A
    1b36:	47 b1       	in	r20, 0x07	; 7
    1b38:	18 b1       	in	r17, 0x08	; 8
    1b3a:	80 91 7a 00 	lds	r24, 0x007A
    1b3e:	86 fd       	sbrc	r24, 6
    1b40:	fc cf       	rjmp	.-8      	; 0x1b3a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 85       	ldd	r25, Z+8	; 0x08
    1b46:	89 17       	cp	r24, r25
    1b48:	48 f4       	brcc	.+18     	; 0x1b5c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1b4a:	d9 01       	movw	r26, r18
    1b4c:	a8 0f       	add	r26, r24
    1b4e:	b1 1d       	adc	r27, r1
    1b50:	a8 0f       	add	r26, r24
    1b52:	b1 1d       	adc	r27, r1
    1b54:	1d 92       	st	X+, r1
    1b56:	1c 92       	st	X, r1
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	f4 cf       	rjmp	.-24     	; 0x1b44 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1b5c:	97 b1       	in	r25, 0x07	; 7
    1b5e:	82 a1       	ldd	r24, Z+34	; 0x22
    1b60:	80 95       	com	r24
    1b62:	89 23       	and	r24, r25
    1b64:	87 b9       	out	0x07, r24	; 7
    1b66:	98 b1       	in	r25, 0x08	; 8
    1b68:	82 a1       	ldd	r24, Z+34	; 0x22
    1b6a:	80 95       	com	r24
    1b6c:	89 23       	and	r24, r25
    1b6e:	88 b9       	out	0x08, r24	; 8
    1b70:	87 e8       	ldi	r24, 0x87	; 135
    1b72:	80 93 7a 00 	sts	0x007A, r24
    1b76:	e1 2c       	mov	r14, r1
    1b78:	81 a1       	ldd	r24, Z+33	; 0x21
    1b7a:	e8 16       	cp	r14, r24
    1b7c:	10 f0       	brcs	.+4      	; 0x1b82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1b7e:	e1 2c       	mov	r14, r1
    1b80:	29 c0       	rjmp	.+82     	; 0x1bd4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	80 85       	ldd	r24, Z+8	; 0x08
    1b86:	58 17       	cp	r21, r24
    1b88:	18 f5       	brcc	.+70     	; 0x1bd0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1b8a:	a5 2f       	mov	r26, r21
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ef 01       	movw	r28, r30
    1b90:	ca 0f       	add	r28, r26
    1b92:	db 1f       	adc	r29, r27
    1b94:	89 89       	ldd	r24, Y+17	; 0x11
    1b96:	80 64       	ori	r24, 0x40	; 64
    1b98:	80 93 7c 00 	sts	0x007C, r24
    1b9c:	80 91 7a 00 	lds	r24, 0x007A
    1ba0:	80 64       	ori	r24, 0x40	; 64
    1ba2:	80 93 7a 00 	sts	0x007A, r24
    1ba6:	80 91 7a 00 	lds	r24, 0x007A
    1baa:	86 fd       	sbrc	r24, 6
    1bac:	fc cf       	rjmp	.-8      	; 0x1ba6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1bae:	60 91 78 00 	lds	r22, 0x0078
    1bb2:	70 91 79 00 	lds	r23, 0x0079
    1bb6:	aa 0f       	add	r26, r26
    1bb8:	bb 1f       	adc	r27, r27
    1bba:	a2 0f       	add	r26, r18
    1bbc:	b3 1f       	adc	r27, r19
    1bbe:	8d 91       	ld	r24, X+
    1bc0:	9c 91       	ld	r25, X
    1bc2:	11 97       	sbiw	r26, 0x01	; 1
    1bc4:	86 0f       	add	r24, r22
    1bc6:	97 1f       	adc	r25, r23
    1bc8:	8d 93       	st	X+, r24
    1bca:	9c 93       	st	X, r25
    1bcc:	5f 5f       	subi	r21, 0xFF	; 255
    1bce:	da cf       	rjmp	.-76     	; 0x1b84 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1bd0:	e3 94       	inc	r14
    1bd2:	d2 cf       	rjmp	.-92     	; 0x1b78 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1bd4:	80 85       	ldd	r24, Z+8	; 0x08
    1bd6:	e8 16       	cp	r14, r24
    1bd8:	a0 f4       	brcc	.+40     	; 0x1c02 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1bda:	e9 01       	movw	r28, r18
    1bdc:	ce 0d       	add	r28, r14
    1bde:	d1 1d       	adc	r29, r1
    1be0:	ce 0d       	add	r28, r14
    1be2:	d1 1d       	adc	r29, r1
    1be4:	61 a1       	ldd	r22, Z+33	; 0x21
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	cb 01       	movw	r24, r22
    1bea:	95 95       	asr	r25
    1bec:	87 95       	ror	r24
    1bee:	a8 81       	ld	r26, Y
    1bf0:	b9 81       	ldd	r27, Y+1	; 0x01
    1bf2:	8a 0f       	add	r24, r26
    1bf4:	9b 1f       	adc	r25, r27
    1bf6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
    1bfa:	79 83       	std	Y+1, r23	; 0x01
    1bfc:	68 83       	st	Y, r22
    1bfe:	e3 94       	inc	r14
    1c00:	e9 cf       	rjmp	.-46     	; 0x1bd4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1c02:	f0 92 7c 00 	sts	0x007C, r15
    1c06:	00 93 7a 00 	sts	0x007A, r16
    1c0a:	18 b9       	out	0x08, r17	; 8
    1c0c:	47 b9       	out	0x07, r20	; 7
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	e6 e0       	ldi	r30, 0x06	; 6
    1c14:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00001c18 <_ZN16PololuQTRSensors4readEPjh>:
    1c18:	a0 e2       	ldi	r26, 0x20	; 32
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e2 e1       	ldi	r30, 0x12	; 18
    1c1e:	fe e0       	ldi	r31, 0x0E	; 14
    1c20:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x16>
    1c24:	8c 01       	movw	r16, r24
    1c26:	7b 01       	movw	r14, r22
    1c28:	d4 2e       	mov	r13, r20
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	84 0f       	add	r24, r20
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	18 f4       	brcc	.+6      	; 0x1c38 <_ZN16PololuQTRSensors4readEPjh+0x20>
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN16PololuQTRSensors10emittersOnEv>
    1c38:	d8 01       	movw	r26, r16
    1c3a:	50 96       	adiw	r26, 0x10	; 16
    1c3c:	8c 91       	ld	r24, X
    1c3e:	b7 01       	movw	r22, r14
    1c40:	81 11       	cpse	r24, r1
    1c42:	10 c0       	rjmp	.+32     	; 0x1c64 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1c44:	c8 01       	movw	r24, r16
    1c46:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN16PololuQTRSensors11emittersOffEv>
    1c50:	b2 e0       	ldi	r27, 0x02	; 2
    1c52:	db 12       	cpse	r13, r27
    1c54:	3a c0       	rjmp	.+116    	; 0x1cca <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c56:	be 01       	movw	r22, r28
    1c58:	6f 5f       	subi	r22, 0xFF	; 255
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1c64:	c8 01       	movw	r24, r16
    1c66:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c6a:	c8 01       	movw	r24, r16
    1c6c:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN16PololuQTRSensors11emittersOffEv>
    1c70:	e2 e0       	ldi	r30, 0x02	; 2
    1c72:	de 12       	cpse	r13, r30
    1c74:	2a c0       	rjmp	.+84     	; 0x1cca <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c76:	be 01       	movw	r22, r28
    1c78:	6f 5f       	subi	r22, 0xFF	; 255
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	f8 01       	movw	r30, r16
    1c86:	80 85       	ldd	r24, Z+8	; 0x08
    1c88:	48 17       	cp	r20, r24
    1c8a:	f8 f4       	brcc	.+62     	; 0x1cca <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c8c:	84 2f       	mov	r24, r20
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	f7 01       	movw	r30, r14
    1c96:	e8 0f       	add	r30, r24
    1c98:	f9 1f       	adc	r31, r25
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	2c 0f       	add	r18, r28
    1ca0:	3d 1f       	adc	r19, r29
    1ca2:	82 0f       	add	r24, r18
    1ca4:	93 1f       	adc	r25, r19
    1ca6:	d8 01       	movw	r26, r16
    1ca8:	1e 96       	adiw	r26, 0x0e	; 14
    1caa:	2d 91       	ld	r18, X+
    1cac:	3c 91       	ld	r19, X
    1cae:	1f 97       	sbiw	r26, 0x0f	; 15
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	8d 91       	ld	r24, X+
    1cb4:	9c 91       	ld	r25, X
    1cb6:	28 1b       	sub	r18, r24
    1cb8:	39 0b       	sbc	r19, r25
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	82 0f       	add	r24, r18
    1cc0:	93 1f       	adc	r25, r19
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	4f 5f       	subi	r20, 0xFF	; 255
    1cc8:	dd cf       	rjmp	.-70     	; 0x1c84 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1cca:	a0 96       	adiw	r28, 0x20	; 32
    1ccc:	e7 e0       	ldi	r30, 0x07	; 7
    1cce:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x16>

00001cd2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1cd2:	2f 92       	push	r2
    1cd4:	3f 92       	push	r3
    1cd6:	5f 92       	push	r5
    1cd8:	6f 92       	push	r6
    1cda:	7f 92       	push	r7
    1cdc:	8f 92       	push	r8
    1cde:	9f 92       	push	r9
    1ce0:	af 92       	push	r10
    1ce2:	bf 92       	push	r11
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	c0 56       	subi	r28, 0x60	; 96
    1cfa:	d1 09       	sbc	r29, r1
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	8c 01       	movw	r16, r24
    1d08:	4b 01       	movw	r8, r22
    1d0a:	5a 01       	movw	r10, r20
    1d0c:	52 2e       	mov	r5, r18
    1d0e:	da 01       	movw	r26, r20
    1d10:	8d 91       	ld	r24, X+
    1d12:	9c 91       	ld	r25, X
    1d14:	89 2b       	or	r24, r25
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1d18:	f4 01       	movw	r30, r8
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	89 2b       	or	r24, r25
    1d20:	f1 f4       	brne	.+60     	; 0x1d5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1d22:	24 c0       	rjmp	.+72     	; 0x1d6c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1d24:	d8 01       	movw	r26, r16
    1d26:	18 96       	adiw	r26, 0x08	; 8
    1d28:	8c 91       	ld	r24, X
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	0e 94 a2 11 	call	0x2344	; 0x2344 <malloc>
    1d34:	f5 01       	movw	r30, r10
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1d3e:	b1 c0       	rjmp	.+354    	; 0x1ea2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	d8 01       	movw	r26, r16
    1d48:	18 96       	adiw	r26, 0x08	; 8
    1d4a:	8c 91       	ld	r24, X
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	28 17       	cp	r18, r24
    1d50:	39 07       	cpc	r19, r25
    1d52:	14 f7       	brge	.-60     	; 0x1d18 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1d54:	11 92       	st	Z+, r1
    1d56:	11 92       	st	Z+, r1
    1d58:	2f 5f       	subi	r18, 0xFF	; 255
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	f4 cf       	rjmp	.-24     	; 0x1d46 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1d5e:	e1 2c       	mov	r14, r1
    1d60:	f1 2c       	mov	r15, r1
    1d62:	6e 01       	movw	r12, r28
    1d64:	b1 e2       	ldi	r27, 0x21	; 33
    1d66:	cb 0e       	add	r12, r27
    1d68:	d1 1c       	adc	r13, r1
    1d6a:	21 c0       	rjmp	.+66     	; 0x1dae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	80 85       	ldd	r24, Z+8	; 0x08
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0e 94 a2 11 	call	0x2344	; 0x2344 <malloc>
    1d7a:	d4 01       	movw	r26, r8
    1d7c:	8d 93       	st	X+, r24
    1d7e:	9c 93       	st	X, r25
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1d84:	8e c0       	rjmp	.+284    	; 0x1ea2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1d86:	fc 01       	movw	r30, r24
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	d8 01       	movw	r26, r16
    1d8e:	18 96       	adiw	r26, 0x08	; 8
    1d90:	8c 91       	ld	r24, X
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	28 17       	cp	r18, r24
    1d96:	39 07       	cpc	r19, r25
    1d98:	14 f7       	brge	.-60     	; 0x1d5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1d9a:	d8 01       	movw	r26, r16
    1d9c:	1e 96       	adiw	r26, 0x0e	; 14
    1d9e:	8d 91       	ld	r24, X+
    1da0:	9c 91       	ld	r25, X
    1da2:	1f 97       	sbiw	r26, 0x0f	; 15
    1da4:	81 93       	st	Z+, r24
    1da6:	91 93       	st	Z+, r25
    1da8:	2f 5f       	subi	r18, 0xFF	; 255
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dac:	ef cf       	rjmp	.-34     	; 0x1d8c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1dae:	45 2d       	mov	r20, r5
    1db0:	be 01       	movw	r22, r28
    1db2:	6f 5b       	subi	r22, 0xBF	; 191
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	c8 01       	movw	r24, r16
    1db8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN16PololuQTRSensors4readEPjh>
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	60 84       	ldd	r6, Z+8	; 0x08
    1dc0:	71 2c       	mov	r7, r1
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ef 5b       	subi	r30, 0xBF	; 191
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	c6 01       	movw	r24, r12
    1dca:	9e 01       	movw	r18, r28
    1dcc:	2f 5f       	subi	r18, 0xFF	; 255
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	19 01       	movw	r2, r18
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	26 15       	cp	r18, r6
    1dd8:	37 05       	cpc	r19, r7
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1ddc:	e1 14       	cp	r14, r1
    1dde:	f1 04       	cpc	r15, r1
    1de0:	89 f0       	breq	.+34     	; 0x1e04 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1de2:	dc 01       	movw	r26, r24
    1de4:	6d 91       	ld	r22, X+
    1de6:	7c 91       	ld	r23, X
    1de8:	40 81       	ld	r20, Z
    1dea:	51 81       	ldd	r21, Z+1	; 0x01
    1dec:	64 17       	cp	r22, r20
    1dee:	75 07       	cpc	r23, r21
    1df0:	48 f0       	brcs	.+18     	; 0x1e04 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1df2:	d1 01       	movw	r26, r2
    1df4:	6d 91       	ld	r22, X+
    1df6:	7c 91       	ld	r23, X
    1df8:	40 81       	ld	r20, Z
    1dfa:	51 81       	ldd	r21, Z+1	; 0x01
    1dfc:	46 17       	cp	r20, r22
    1dfe:	57 07       	cpc	r21, r23
    1e00:	48 f0       	brcs	.+18     	; 0x1e14 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1e04:	40 81       	ld	r20, Z
    1e06:	51 81       	ldd	r21, Z+1	; 0x01
    1e08:	dc 01       	movw	r26, r24
    1e0a:	4d 93       	st	X+, r20
    1e0c:	5c 93       	st	X, r21
    1e0e:	e1 14       	cp	r14, r1
    1e10:	f1 04       	cpc	r15, r1
    1e12:	79 f7       	brne	.-34     	; 0x1df2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1e14:	40 81       	ld	r20, Z
    1e16:	51 81       	ldd	r21, Z+1	; 0x01
    1e18:	d1 01       	movw	r26, r2
    1e1a:	4d 93       	st	X+, r20
    1e1c:	5c 93       	st	X, r21
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	b2 e0       	ldi	r27, 0x02	; 2
    1e24:	2b 0e       	add	r2, r27
    1e26:	31 1c       	adc	r3, r1
    1e28:	32 96       	adiw	r30, 0x02	; 2
    1e2a:	02 96       	adiw	r24, 0x02	; 2
    1e2c:	d4 cf       	rjmp	.-88     	; 0x1dd6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1e2e:	ef ef       	ldi	r30, 0xFF	; 255
    1e30:	ee 1a       	sub	r14, r30
    1e32:	fe 0a       	sbc	r15, r30
    1e34:	fa e0       	ldi	r31, 0x0A	; 10
    1e36:	ef 16       	cp	r14, r31
    1e38:	f1 04       	cpc	r15, r1
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1e3c:	b8 cf       	rjmp	.-144    	; 0x1dae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e3e:	9e 01       	movw	r18, r28
    1e40:	2f 5f       	subi	r18, 0xFF	; 255
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	79 01       	movw	r14, r18
    1e46:	36 01       	movw	r6, r12
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	20 85       	ldd	r18, Z+8	; 0x08
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	2c f5       	brge	.+74     	; 0x1ea2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e58:	d7 01       	movw	r26, r14
    1e5a:	2d 91       	ld	r18, X+
    1e5c:	3d 91       	ld	r19, X+
    1e5e:	7d 01       	movw	r14, r26
    1e60:	b3 01       	movw	r22, r6
    1e62:	6c 19       	sub	r22, r12
    1e64:	7d 09       	sbc	r23, r13
    1e66:	d5 01       	movw	r26, r10
    1e68:	ed 91       	ld	r30, X+
    1e6a:	fc 91       	ld	r31, X
    1e6c:	e6 0f       	add	r30, r22
    1e6e:	f7 1f       	adc	r31, r23
    1e70:	40 81       	ld	r20, Z
    1e72:	51 81       	ldd	r21, Z+1	; 0x01
    1e74:	42 17       	cp	r20, r18
    1e76:	53 07       	cpc	r21, r19
    1e78:	10 f4       	brcc	.+4      	; 0x1e7e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1e7a:	31 83       	std	Z+1, r19	; 0x01
    1e7c:	20 83       	st	Z, r18
    1e7e:	f3 01       	movw	r30, r6
    1e80:	21 91       	ld	r18, Z+
    1e82:	31 91       	ld	r19, Z+
    1e84:	3f 01       	movw	r6, r30
    1e86:	d4 01       	movw	r26, r8
    1e88:	ed 91       	ld	r30, X+
    1e8a:	fc 91       	ld	r31, X
    1e8c:	e6 0f       	add	r30, r22
    1e8e:	f7 1f       	adc	r31, r23
    1e90:	40 81       	ld	r20, Z
    1e92:	51 81       	ldd	r21, Z+1	; 0x01
    1e94:	24 17       	cp	r18, r20
    1e96:	35 07       	cpc	r19, r21
    1e98:	10 f4       	brcc	.+4      	; 0x1e9e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1e9a:	31 83       	std	Z+1, r19	; 0x01
    1e9c:	20 83       	st	Z, r18
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	d5 cf       	rjmp	.-86     	; 0x1e4c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1ea2:	c0 5a       	subi	r28, 0xA0	; 160
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	7f 90       	pop	r7
    1eca:	6f 90       	pop	r6
    1ecc:	5f 90       	pop	r5
    1ece:	3f 90       	pop	r3
    1ed0:	2f 90       	pop	r2
    1ed2:	08 95       	ret

00001ed4 <_ZN16PololuQTRSensors9calibrateEh>:
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	ec 01       	movw	r28, r24
    1edc:	16 2f       	mov	r17, r22
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	86 0f       	add	r24, r22
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	18 f0       	brcs	.+6      	; 0x1eec <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1ee6:	66 23       	and	r22, r22
    1ee8:	59 f0       	breq	.+22     	; 0x1f00 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1eec:	21 e0       	ldi	r18, 0x01	; 1
    1eee:	ae 01       	movw	r20, r28
    1ef0:	4e 5f       	subi	r20, 0xFE	; 254
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	be 01       	movw	r22, r28
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1efc:	12 30       	cpi	r17, 0x02	; 2
    1efe:	51 f4       	brne	.+20     	; 0x1f14 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1f00:	ae 01       	movw	r20, r28
    1f02:	4a 5f       	subi	r20, 0xFA	; 250
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	be 01       	movw	r22, r28
    1f08:	6c 5f       	subi	r22, 0xFC	; 252
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	ce 01       	movw	r24, r28
    1f10:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	08 95       	ret

00001f1c <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	ff e0       	ldi	r31, 0x0F	; 15
    1f24:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__prologue_saves__+0x12>
    1f28:	ec 01       	movw	r28, r24
    1f2a:	8b 01       	movw	r16, r22
    1f2c:	b4 2e       	mov	r11, r20
    1f2e:	84 2f       	mov	r24, r20
    1f30:	8d 7f       	andi	r24, 0xFD	; 253
    1f32:	51 f4       	brne	.+20     	; 0x1f48 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	89 2b       	or	r24, r25
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    1f3c:	97 c0       	rjmp	.+302    	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f40:	9f 81       	ldd	r25, Y+7	; 0x07
    1f42:	89 2b       	or	r24, r25
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1f46:	92 c0       	rjmp	.+292    	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	8b 0d       	add	r24, r11
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	50 f4       	brcc	.+20     	; 0x1f64 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1f50:	88 81       	ld	r24, Y
    1f52:	99 81       	ldd	r25, Y+1	; 0x01
    1f54:	89 2b       	or	r24, r25
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    1f58:	89 c0       	rjmp	.+274    	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	89 2b       	or	r24, r25
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1f62:	84 c0       	rjmp	.+264    	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f64:	4b 2d       	mov	r20, r11
    1f66:	b8 01       	movw	r22, r16
    1f68:	ce 01       	movw	r24, r28
    1f6a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN16PololuQTRSensors4readEPjh>
    1f6e:	78 01       	movw	r14, r16
    1f70:	00 e0       	ldi	r16, 0x00	; 0
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	c1 2c       	mov	r12, r1
    1f76:	d1 2c       	mov	r13, r1
    1f78:	88 85       	ldd	r24, Y+8	; 0x08
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	c8 16       	cp	r12, r24
    1f7e:	d9 06       	cpc	r13, r25
    1f80:	0c f0       	brlt	.+2      	; 0x1f84 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    1f82:	74 c0       	rjmp	.+232    	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	b8 12       	cpse	r11, r24
    1f88:	0a c0       	rjmp	.+20     	; 0x1f9e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    1f8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8e:	e0 0f       	add	r30, r16
    1f90:	f1 1f       	adc	r31, r17
    1f92:	01 90       	ld	r0, Z+
    1f94:	f0 81       	ld	r31, Z
    1f96:	e0 2d       	mov	r30, r0
    1f98:	a8 81       	ld	r26, Y
    1f9a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f9c:	0d c0       	rjmp	.+26     	; 0x1fb8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa6:	b1 10       	cpse	r11, r1
    1fa8:	0c c0       	rjmp	.+24     	; 0x1fc2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1faa:	f9 01       	movw	r30, r18
    1fac:	e0 0f       	add	r30, r16
    1fae:	f1 1f       	adc	r31, r17
    1fb0:	01 90       	ld	r0, Z+
    1fb2:	f0 81       	ld	r31, Z
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	a0 0f       	add	r26, r16
    1fba:	b1 1f       	adc	r27, r17
    1fbc:	8d 91       	ld	r24, X+
    1fbe:	9c 91       	ld	r25, X
    1fc0:	28 c0       	rjmp	.+80     	; 0x2012 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e0 0f       	add	r30, r16
    1fc6:	f1 1f       	adc	r31, r17
    1fc8:	40 81       	ld	r20, Z
    1fca:	51 81       	ldd	r21, Z+1	; 0x01
    1fcc:	e8 81       	ld	r30, Y
    1fce:	f9 81       	ldd	r31, Y+1	; 0x01
    1fd0:	e0 0f       	add	r30, r16
    1fd2:	f1 1f       	adc	r31, r17
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fda:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fdc:	48 17       	cp	r20, r24
    1fde:	59 07       	cpc	r21, r25
    1fe0:	10 f4       	brcc	.+4      	; 0x1fe6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    1fe2:	cf 01       	movw	r24, r30
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1fe6:	8e 0f       	add	r24, r30
    1fe8:	9f 1f       	adc	r25, r31
    1fea:	84 1b       	sub	r24, r20
    1fec:	95 0b       	sbc	r25, r21
    1fee:	d9 01       	movw	r26, r18
    1ff0:	a0 0f       	add	r26, r16
    1ff2:	b1 1f       	adc	r27, r17
    1ff4:	2d 91       	ld	r18, X+
    1ff6:	3c 91       	ld	r19, X
    1ff8:	aa 81       	ldd	r26, Y+2	; 0x02
    1ffa:	bb 81       	ldd	r27, Y+3	; 0x03
    1ffc:	a0 0f       	add	r26, r16
    1ffe:	b1 1f       	adc	r27, r17
    2000:	4d 91       	ld	r20, X+
    2002:	5c 91       	ld	r21, X
    2004:	24 17       	cp	r18, r20
    2006:	35 07       	cpc	r19, r21
    2008:	20 f0       	brcs	.+8      	; 0x2012 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    200a:	e4 0f       	add	r30, r20
    200c:	f5 1f       	adc	r31, r21
    200e:	e2 1b       	sub	r30, r18
    2010:	f3 0b       	sbc	r31, r19
    2012:	e8 1b       	sub	r30, r24
    2014:	f9 0b       	sbc	r31, r25
    2016:	a9 f0       	breq	.+42     	; 0x2042 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2018:	d7 01       	movw	r26, r14
    201a:	2d 91       	ld	r18, X+
    201c:	3c 91       	ld	r19, X
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	28 1b       	sub	r18, r24
    2024:	39 0b       	sbc	r19, r25
    2026:	41 09       	sbc	r20, r1
    2028:	51 09       	sbc	r21, r1
    202a:	a8 ee       	ldi	r26, 0xE8	; 232
    202c:	b3 e0       	ldi	r27, 0x03	; 3
    202e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__muluhisi3>
    2032:	9f 01       	movw	r18, r30
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	0e 94 24 11 	call	0x2248	; 0x2248 <__divmodsi4>
    203c:	37 fd       	sbrc	r19, 7
    203e:	0a c0       	rjmp	.+20     	; 0x2054 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	29 3e       	cpi	r18, 0xE9	; 233
    2048:	b3 e0       	ldi	r27, 0x03	; 3
    204a:	3b 07       	cpc	r19, r27
    204c:	2c f0       	brlt	.+10     	; 0x2058 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    204e:	28 ee       	ldi	r18, 0xE8	; 232
    2050:	33 e0       	ldi	r19, 0x03	; 3
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	f7 01       	movw	r30, r14
    205a:	21 93       	st	Z+, r18
    205c:	31 93       	st	Z+, r19
    205e:	7f 01       	movw	r14, r30
    2060:	ff ef       	ldi	r31, 0xFF	; 255
    2062:	cf 1a       	sub	r12, r31
    2064:	df 0a       	sbc	r13, r31
    2066:	0e 5f       	subi	r16, 0xFE	; 254
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	86 cf       	rjmp	.-244    	; 0x1f78 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	e9 e0       	ldi	r30, 0x09	; 9
    2072:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__epilogue_restores__+0x12>

00002076 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e1 e4       	ldi	r30, 0x41	; 65
    207c:	f0 e1       	ldi	r31, 0x10	; 16
    207e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
    2082:	ec 01       	movw	r28, r24
    2084:	8b 01       	movw	r16, r22
    2086:	82 2e       	mov	r8, r18
    2088:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN16PololuQTRSensors14readCalibratedEPjh>
    208c:	28 84       	ldd	r2, Y+8	; 0x08
    208e:	e8 01       	movw	r28, r16
    2090:	41 2c       	mov	r4, r1
    2092:	51 2c       	mov	r5, r1
    2094:	32 01       	movw	r6, r4
    2096:	00 e0       	ldi	r16, 0x00	; 0
    2098:	10 e0       	ldi	r17, 0x00	; 0
    209a:	c1 2c       	mov	r12, r1
    209c:	d1 2c       	mov	r13, r1
    209e:	76 01       	movw	r14, r12
    20a0:	31 2c       	mov	r3, r1
    20a2:	91 2c       	mov	r9, r1
    20a4:	58 ee       	ldi	r21, 0xE8	; 232
    20a6:	a5 2e       	mov	r10, r21
    20a8:	53 e0       	ldi	r21, 0x03	; 3
    20aa:	b5 2e       	mov	r11, r21
    20ac:	92 14       	cp	r9, r2
    20ae:	21 f1       	breq	.+72     	; 0x20f8 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    20b0:	e9 91       	ld	r30, Y+
    20b2:	f9 91       	ld	r31, Y+
    20b4:	88 20       	and	r8, r8
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    20b8:	c5 01       	movw	r24, r10
    20ba:	8e 1b       	sub	r24, r30
    20bc:	9f 0b       	sbc	r25, r31
    20be:	fc 01       	movw	r30, r24
    20c0:	e9 3c       	cpi	r30, 0xC9	; 201
    20c2:	f1 05       	cpc	r31, r1
    20c4:	24 f4       	brge	.+8      	; 0x20ce <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    20c6:	e3 33       	cpi	r30, 0x33	; 51
    20c8:	f1 05       	cpc	r31, r1
    20ca:	74 f0       	brlt	.+28     	; 0x20e8 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    20ce:	33 24       	eor	r3, r3
    20d0:	33 94       	inc	r3
    20d2:	df 01       	movw	r26, r30
    20d4:	a3 01       	movw	r20, r6
    20d6:	92 01       	movw	r18, r4
    20d8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulshisi3>
    20dc:	c6 0e       	add	r12, r22
    20de:	d7 1e       	adc	r13, r23
    20e0:	e8 1e       	adc	r14, r24
    20e2:	f9 1e       	adc	r15, r25
    20e4:	0e 0f       	add	r16, r30
    20e6:	1f 1f       	adc	r17, r31
    20e8:	93 94       	inc	r9
    20ea:	98 ee       	ldi	r25, 0xE8	; 232
    20ec:	49 0e       	add	r4, r25
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	59 1e       	adc	r5, r25
    20f2:	61 1c       	adc	r6, r1
    20f4:	71 1c       	adc	r7, r1
    20f6:	da cf       	rjmp	.-76     	; 0x20ac <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    20f8:	31 10       	cpse	r3, r1
    20fa:	1e c0       	rjmp	.+60     	; 0x2138 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    20fc:	49 2d       	mov	r20, r9
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	41 50       	subi	r20, 0x01	; 1
    2102:	51 09       	sbc	r21, r1
    2104:	24 ef       	ldi	r18, 0xF4	; 244
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	42 9f       	mul	r20, r18
    210a:	c0 01       	movw	r24, r0
    210c:	43 9f       	mul	r20, r19
    210e:	90 0d       	add	r25, r0
    2110:	52 9f       	mul	r21, r18
    2112:	90 0d       	add	r25, r0
    2114:	11 24       	eor	r1, r1
    2116:	20 91 bd 01 	lds	r18, 0x01BD
    211a:	30 91 be 01 	lds	r19, 0x01BE
    211e:	28 17       	cp	r18, r24
    2120:	39 07       	cpc	r19, r25
    2122:	b4 f0       	brlt	.+44     	; 0x2150 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2124:	88 ee       	ldi	r24, 0xE8	; 232
    2126:	93 e0       	ldi	r25, 0x03	; 3
    2128:	48 9f       	mul	r20, r24
    212a:	90 01       	movw	r18, r0
    212c:	49 9f       	mul	r20, r25
    212e:	30 0d       	add	r19, r0
    2130:	58 9f       	mul	r21, r24
    2132:	30 0d       	add	r19, r0
    2134:	11 24       	eor	r1, r1
    2136:	0e c0       	rjmp	.+28     	; 0x2154 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2138:	98 01       	movw	r18, r16
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	c7 01       	movw	r24, r14
    2140:	b6 01       	movw	r22, r12
    2142:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
    2146:	30 93 be 01 	sts	0x01BE, r19
    214a:	20 93 bd 01 	sts	0x01BD, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	c9 01       	movw	r24, r18
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	e2 e1       	ldi	r30, 0x12	; 18
    215c:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00002160 <_ZN16PololuQTRSensorsD1Ev>:
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	ec 01       	movw	r28, r24
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	11 f0       	breq	.+4      	; 0x2172 <_ZN16PololuQTRSensorsD1Ev+0x12>
    216e:	0e 94 37 12 	call	0x246e	; 0x246e <free>
    2172:	8e 81       	ldd	r24, Y+6	; 0x06
    2174:	9f 81       	ldd	r25, Y+7	; 0x07
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	11 f0       	breq	.+4      	; 0x217e <_ZN16PololuQTRSensorsD1Ev+0x1e>
    217a:	0e 94 37 12 	call	0x246e	; 0x246e <free>
    217e:	88 81       	ld	r24, Y
    2180:	99 81       	ldd	r25, Y+1	; 0x01
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	11 f0       	breq	.+4      	; 0x218a <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2186:	0e 94 37 12 	call	0x246e	; 0x246e <free>
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	9d 81       	ldd	r25, Y+5	; 0x05
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	11 f0       	breq	.+4      	; 0x2196 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2192:	0e 94 37 12 	call	0x246e	; 0x246e <free>
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <__udivmodqi4>:
    219c:	99 1b       	sub	r25, r25
    219e:	79 e0       	ldi	r23, 0x09	; 9
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <__udivmodqi4_ep>

000021a2 <__udivmodqi4_loop>:
    21a2:	99 1f       	adc	r25, r25
    21a4:	96 17       	cp	r25, r22
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <__udivmodqi4_ep>
    21a8:	96 1b       	sub	r25, r22

000021aa <__udivmodqi4_ep>:
    21aa:	88 1f       	adc	r24, r24
    21ac:	7a 95       	dec	r23
    21ae:	c9 f7       	brne	.-14     	; 0x21a2 <__udivmodqi4_loop>
    21b0:	80 95       	com	r24
    21b2:	08 95       	ret

000021b4 <__udivmodhi4>:
    21b4:	aa 1b       	sub	r26, r26
    21b6:	bb 1b       	sub	r27, r27
    21b8:	51 e1       	ldi	r21, 0x11	; 17
    21ba:	07 c0       	rjmp	.+14     	; 0x21ca <__udivmodhi4_ep>

000021bc <__udivmodhi4_loop>:
    21bc:	aa 1f       	adc	r26, r26
    21be:	bb 1f       	adc	r27, r27
    21c0:	a6 17       	cp	r26, r22
    21c2:	b7 07       	cpc	r27, r23
    21c4:	10 f0       	brcs	.+4      	; 0x21ca <__udivmodhi4_ep>
    21c6:	a6 1b       	sub	r26, r22
    21c8:	b7 0b       	sbc	r27, r23

000021ca <__udivmodhi4_ep>:
    21ca:	88 1f       	adc	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	5a 95       	dec	r21
    21d0:	a9 f7       	brne	.-22     	; 0x21bc <__udivmodhi4_loop>
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	08 95       	ret

000021dc <__divmodhi4>:
    21dc:	97 fb       	bst	r25, 7
    21de:	07 2e       	mov	r0, r23
    21e0:	16 f4       	brtc	.+4      	; 0x21e6 <__divmodhi4+0xa>
    21e2:	00 94       	com	r0
    21e4:	07 d0       	rcall	.+14     	; 0x21f4 <__divmodhi4_neg1>
    21e6:	77 fd       	sbrc	r23, 7
    21e8:	09 d0       	rcall	.+18     	; 0x21fc <__divmodhi4_neg2>
    21ea:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__udivmodhi4>
    21ee:	07 fc       	sbrc	r0, 7
    21f0:	05 d0       	rcall	.+10     	; 0x21fc <__divmodhi4_neg2>
    21f2:	3e f4       	brtc	.+14     	; 0x2202 <__divmodhi4_exit>

000021f4 <__divmodhi4_neg1>:
    21f4:	90 95       	com	r25
    21f6:	81 95       	neg	r24
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	08 95       	ret

000021fc <__divmodhi4_neg2>:
    21fc:	70 95       	com	r23
    21fe:	61 95       	neg	r22
    2200:	7f 4f       	sbci	r23, 0xFF	; 255

00002202 <__divmodhi4_exit>:
    2202:	08 95       	ret

00002204 <__udivmodsi4>:
    2204:	a1 e2       	ldi	r26, 0x21	; 33
    2206:	1a 2e       	mov	r1, r26
    2208:	aa 1b       	sub	r26, r26
    220a:	bb 1b       	sub	r27, r27
    220c:	fd 01       	movw	r30, r26
    220e:	0d c0       	rjmp	.+26     	; 0x222a <__udivmodsi4_ep>

00002210 <__udivmodsi4_loop>:
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	ee 1f       	adc	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	a2 17       	cp	r26, r18
    221a:	b3 07       	cpc	r27, r19
    221c:	e4 07       	cpc	r30, r20
    221e:	f5 07       	cpc	r31, r21
    2220:	20 f0       	brcs	.+8      	; 0x222a <__udivmodsi4_ep>
    2222:	a2 1b       	sub	r26, r18
    2224:	b3 0b       	sbc	r27, r19
    2226:	e4 0b       	sbc	r30, r20
    2228:	f5 0b       	sbc	r31, r21

0000222a <__udivmodsi4_ep>:
    222a:	66 1f       	adc	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	1a 94       	dec	r1
    2234:	69 f7       	brne	.-38     	; 0x2210 <__udivmodsi4_loop>
    2236:	60 95       	com	r22
    2238:	70 95       	com	r23
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	9b 01       	movw	r18, r22
    2240:	ac 01       	movw	r20, r24
    2242:	bd 01       	movw	r22, r26
    2244:	cf 01       	movw	r24, r30
    2246:	08 95       	ret

00002248 <__divmodsi4>:
    2248:	05 2e       	mov	r0, r21
    224a:	97 fb       	bst	r25, 7
    224c:	1e f4       	brtc	.+6      	; 0x2254 <__divmodsi4+0xc>
    224e:	00 94       	com	r0
    2250:	0e 94 3b 11 	call	0x2276	; 0x2276 <__negsi2>
    2254:	57 fd       	sbrc	r21, 7
    2256:	07 d0       	rcall	.+14     	; 0x2266 <__divmodsi4_neg2>
    2258:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
    225c:	07 fc       	sbrc	r0, 7
    225e:	03 d0       	rcall	.+6      	; 0x2266 <__divmodsi4_neg2>
    2260:	4e f4       	brtc	.+18     	; 0x2274 <__divmodsi4_exit>
    2262:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__negsi2>

00002266 <__divmodsi4_neg2>:
    2266:	50 95       	com	r21
    2268:	40 95       	com	r20
    226a:	30 95       	com	r19
    226c:	21 95       	neg	r18
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	4f 4f       	sbci	r20, 0xFF	; 255
    2272:	5f 4f       	sbci	r21, 0xFF	; 255

00002274 <__divmodsi4_exit>:
    2274:	08 95       	ret

00002276 <__negsi2>:
    2276:	90 95       	com	r25
    2278:	80 95       	com	r24
    227a:	70 95       	com	r23
    227c:	61 95       	neg	r22
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	8f 4f       	sbci	r24, 0xFF	; 255
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	08 95       	ret

00002286 <__umulhisi3>:
    2286:	a2 9f       	mul	r26, r18
    2288:	b0 01       	movw	r22, r0
    228a:	b3 9f       	mul	r27, r19
    228c:	c0 01       	movw	r24, r0
    228e:	a3 9f       	mul	r26, r19
    2290:	70 0d       	add	r23, r0
    2292:	81 1d       	adc	r24, r1
    2294:	11 24       	eor	r1, r1
    2296:	91 1d       	adc	r25, r1
    2298:	b2 9f       	mul	r27, r18
    229a:	70 0d       	add	r23, r0
    229c:	81 1d       	adc	r24, r1
    229e:	11 24       	eor	r1, r1
    22a0:	91 1d       	adc	r25, r1
    22a2:	08 95       	ret

000022a4 <__muluhisi3>:
    22a4:	0e 94 43 11 	call	0x2286	; 0x2286 <__umulhisi3>
    22a8:	a5 9f       	mul	r26, r21
    22aa:	90 0d       	add	r25, r0
    22ac:	b4 9f       	mul	r27, r20
    22ae:	90 0d       	add	r25, r0
    22b0:	a4 9f       	mul	r26, r20
    22b2:	80 0d       	add	r24, r0
    22b4:	91 1d       	adc	r25, r1
    22b6:	11 24       	eor	r1, r1
    22b8:	08 95       	ret

000022ba <__mulshisi3>:
    22ba:	b7 ff       	sbrs	r27, 7
    22bc:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__muluhisi3>

000022c0 <__mulohisi3>:
    22c0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__muluhisi3>
    22c4:	82 1b       	sub	r24, r18
    22c6:	93 0b       	sbc	r25, r19
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <__tablejump2__>:
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	05 90       	lpm	r0, Z+
    233e:	f4 91       	lpm	r31, Z
    2340:	e0 2d       	mov	r30, r0
    2342:	09 94       	ijmp

00002344 <malloc>:
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	91 05       	cpc	r25, r1
    234c:	10 f4       	brcc	.+4      	; 0x2352 <malloc+0xe>
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	e0 91 2f 02 	lds	r30, 0x022F
    2356:	f0 91 30 02 	lds	r31, 0x0230
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	c0 e0       	ldi	r28, 0x00	; 0
    2360:	d0 e0       	ldi	r29, 0x00	; 0
    2362:	30 97       	sbiw	r30, 0x00	; 0
    2364:	11 f1       	breq	.+68     	; 0x23aa <malloc+0x66>
    2366:	40 81       	ld	r20, Z
    2368:	51 81       	ldd	r21, Z+1	; 0x01
    236a:	48 17       	cp	r20, r24
    236c:	59 07       	cpc	r21, r25
    236e:	c0 f0       	brcs	.+48     	; 0x23a0 <malloc+0x5c>
    2370:	48 17       	cp	r20, r24
    2372:	59 07       	cpc	r21, r25
    2374:	61 f4       	brne	.+24     	; 0x238e <malloc+0x4a>
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	93 81       	ldd	r25, Z+3	; 0x03
    237a:	20 97       	sbiw	r28, 0x00	; 0
    237c:	19 f0       	breq	.+6      	; 0x2384 <malloc+0x40>
    237e:	9b 83       	std	Y+3, r25	; 0x03
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	2b c0       	rjmp	.+86     	; 0x23da <malloc+0x96>
    2384:	90 93 30 02 	sts	0x0230, r25
    2388:	80 93 2f 02 	sts	0x022F, r24
    238c:	26 c0       	rjmp	.+76     	; 0x23da <malloc+0x96>
    238e:	21 15       	cp	r18, r1
    2390:	31 05       	cpc	r19, r1
    2392:	19 f0       	breq	.+6      	; 0x239a <malloc+0x56>
    2394:	42 17       	cp	r20, r18
    2396:	53 07       	cpc	r21, r19
    2398:	18 f4       	brcc	.+6      	; 0x23a0 <malloc+0x5c>
    239a:	9a 01       	movw	r18, r20
    239c:	be 01       	movw	r22, r28
    239e:	df 01       	movw	r26, r30
    23a0:	ef 01       	movw	r28, r30
    23a2:	02 80       	ldd	r0, Z+2	; 0x02
    23a4:	f3 81       	ldd	r31, Z+3	; 0x03
    23a6:	e0 2d       	mov	r30, r0
    23a8:	dc cf       	rjmp	.-72     	; 0x2362 <malloc+0x1e>
    23aa:	21 15       	cp	r18, r1
    23ac:	31 05       	cpc	r19, r1
    23ae:	09 f1       	breq	.+66     	; 0x23f2 <malloc+0xae>
    23b0:	28 1b       	sub	r18, r24
    23b2:	39 0b       	sbc	r19, r25
    23b4:	24 30       	cpi	r18, 0x04	; 4
    23b6:	31 05       	cpc	r19, r1
    23b8:	90 f4       	brcc	.+36     	; 0x23de <malloc+0x9a>
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	13 97       	sbiw	r26, 0x03	; 3
    23c2:	61 15       	cp	r22, r1
    23c4:	71 05       	cpc	r23, r1
    23c6:	21 f0       	breq	.+8      	; 0x23d0 <malloc+0x8c>
    23c8:	fb 01       	movw	r30, r22
    23ca:	93 83       	std	Z+3, r25	; 0x03
    23cc:	82 83       	std	Z+2, r24	; 0x02
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <malloc+0x94>
    23d0:	90 93 30 02 	sts	0x0230, r25
    23d4:	80 93 2f 02 	sts	0x022F, r24
    23d8:	fd 01       	movw	r30, r26
    23da:	32 96       	adiw	r30, 0x02	; 2
    23dc:	44 c0       	rjmp	.+136    	; 0x2466 <malloc+0x122>
    23de:	fd 01       	movw	r30, r26
    23e0:	e2 0f       	add	r30, r18
    23e2:	f3 1f       	adc	r31, r19
    23e4:	81 93       	st	Z+, r24
    23e6:	91 93       	st	Z+, r25
    23e8:	22 50       	subi	r18, 0x02	; 2
    23ea:	31 09       	sbc	r19, r1
    23ec:	2d 93       	st	X+, r18
    23ee:	3c 93       	st	X, r19
    23f0:	3a c0       	rjmp	.+116    	; 0x2466 <malloc+0x122>
    23f2:	20 91 2d 02 	lds	r18, 0x022D
    23f6:	30 91 2e 02 	lds	r19, 0x022E
    23fa:	23 2b       	or	r18, r19
    23fc:	41 f4       	brne	.+16     	; 0x240e <malloc+0xca>
    23fe:	20 91 10 01 	lds	r18, 0x0110
    2402:	30 91 11 01 	lds	r19, 0x0111
    2406:	30 93 2e 02 	sts	0x022E, r19
    240a:	20 93 2d 02 	sts	0x022D, r18
    240e:	20 91 0e 01 	lds	r18, 0x010E
    2412:	30 91 0f 01 	lds	r19, 0x010F
    2416:	21 15       	cp	r18, r1
    2418:	31 05       	cpc	r19, r1
    241a:	41 f4       	brne	.+16     	; 0x242c <malloc+0xe8>
    241c:	2d b7       	in	r18, 0x3d	; 61
    241e:	3e b7       	in	r19, 0x3e	; 62
    2420:	40 91 12 01 	lds	r20, 0x0112
    2424:	50 91 13 01 	lds	r21, 0x0113
    2428:	24 1b       	sub	r18, r20
    242a:	35 0b       	sbc	r19, r21
    242c:	e0 91 2d 02 	lds	r30, 0x022D
    2430:	f0 91 2e 02 	lds	r31, 0x022E
    2434:	e2 17       	cp	r30, r18
    2436:	f3 07       	cpc	r31, r19
    2438:	a0 f4       	brcc	.+40     	; 0x2462 <malloc+0x11e>
    243a:	2e 1b       	sub	r18, r30
    243c:	3f 0b       	sbc	r19, r31
    243e:	28 17       	cp	r18, r24
    2440:	39 07       	cpc	r19, r25
    2442:	78 f0       	brcs	.+30     	; 0x2462 <malloc+0x11e>
    2444:	ac 01       	movw	r20, r24
    2446:	4e 5f       	subi	r20, 0xFE	; 254
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	24 17       	cp	r18, r20
    244c:	35 07       	cpc	r19, r21
    244e:	48 f0       	brcs	.+18     	; 0x2462 <malloc+0x11e>
    2450:	4e 0f       	add	r20, r30
    2452:	5f 1f       	adc	r21, r31
    2454:	50 93 2e 02 	sts	0x022E, r21
    2458:	40 93 2d 02 	sts	0x022D, r20
    245c:	81 93       	st	Z+, r24
    245e:	91 93       	st	Z+, r25
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <malloc+0x122>
    2462:	e0 e0       	ldi	r30, 0x00	; 0
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	cf 01       	movw	r24, r30
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <free>:
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	09 f4       	brne	.+2      	; 0x247c <free+0xe>
    247a:	8c c0       	rjmp	.+280    	; 0x2594 <free+0x126>
    247c:	fc 01       	movw	r30, r24
    247e:	32 97       	sbiw	r30, 0x02	; 2
    2480:	13 82       	std	Z+3, r1	; 0x03
    2482:	12 82       	std	Z+2, r1	; 0x02
    2484:	00 91 2f 02 	lds	r16, 0x022F
    2488:	10 91 30 02 	lds	r17, 0x0230
    248c:	01 15       	cp	r16, r1
    248e:	11 05       	cpc	r17, r1
    2490:	81 f4       	brne	.+32     	; 0x24b2 <free+0x44>
    2492:	20 81       	ld	r18, Z
    2494:	31 81       	ldd	r19, Z+1	; 0x01
    2496:	82 0f       	add	r24, r18
    2498:	93 1f       	adc	r25, r19
    249a:	20 91 2d 02 	lds	r18, 0x022D
    249e:	30 91 2e 02 	lds	r19, 0x022E
    24a2:	28 17       	cp	r18, r24
    24a4:	39 07       	cpc	r19, r25
    24a6:	79 f5       	brne	.+94     	; 0x2506 <free+0x98>
    24a8:	f0 93 2e 02 	sts	0x022E, r31
    24ac:	e0 93 2d 02 	sts	0x022D, r30
    24b0:	71 c0       	rjmp	.+226    	; 0x2594 <free+0x126>
    24b2:	d8 01       	movw	r26, r16
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	ae 17       	cp	r26, r30
    24ba:	bf 07       	cpc	r27, r31
    24bc:	50 f4       	brcc	.+20     	; 0x24d2 <free+0x64>
    24be:	12 96       	adiw	r26, 0x02	; 2
    24c0:	2d 91       	ld	r18, X+
    24c2:	3c 91       	ld	r19, X
    24c4:	13 97       	sbiw	r26, 0x03	; 3
    24c6:	ad 01       	movw	r20, r26
    24c8:	21 15       	cp	r18, r1
    24ca:	31 05       	cpc	r19, r1
    24cc:	09 f1       	breq	.+66     	; 0x2510 <free+0xa2>
    24ce:	d9 01       	movw	r26, r18
    24d0:	f3 cf       	rjmp	.-26     	; 0x24b8 <free+0x4a>
    24d2:	9d 01       	movw	r18, r26
    24d4:	da 01       	movw	r26, r20
    24d6:	33 83       	std	Z+3, r19	; 0x03
    24d8:	22 83       	std	Z+2, r18	; 0x02
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	86 0f       	add	r24, r22
    24e0:	97 1f       	adc	r25, r23
    24e2:	82 17       	cp	r24, r18
    24e4:	93 07       	cpc	r25, r19
    24e6:	69 f4       	brne	.+26     	; 0x2502 <free+0x94>
    24e8:	ec 01       	movw	r28, r24
    24ea:	28 81       	ld	r18, Y
    24ec:	39 81       	ldd	r19, Y+1	; 0x01
    24ee:	26 0f       	add	r18, r22
    24f0:	37 1f       	adc	r19, r23
    24f2:	2e 5f       	subi	r18, 0xFE	; 254
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	31 83       	std	Z+1, r19	; 0x01
    24f8:	20 83       	st	Z, r18
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	93 83       	std	Z+3, r25	; 0x03
    2500:	82 83       	std	Z+2, r24	; 0x02
    2502:	45 2b       	or	r20, r21
    2504:	29 f4       	brne	.+10     	; 0x2510 <free+0xa2>
    2506:	f0 93 30 02 	sts	0x0230, r31
    250a:	e0 93 2f 02 	sts	0x022F, r30
    250e:	42 c0       	rjmp	.+132    	; 0x2594 <free+0x126>
    2510:	13 96       	adiw	r26, 0x03	; 3
    2512:	fc 93       	st	X, r31
    2514:	ee 93       	st	-X, r30
    2516:	12 97       	sbiw	r26, 0x02	; 2
    2518:	ed 01       	movw	r28, r26
    251a:	49 91       	ld	r20, Y+
    251c:	59 91       	ld	r21, Y+
    251e:	9e 01       	movw	r18, r28
    2520:	24 0f       	add	r18, r20
    2522:	35 1f       	adc	r19, r21
    2524:	e2 17       	cp	r30, r18
    2526:	f3 07       	cpc	r31, r19
    2528:	71 f4       	brne	.+28     	; 0x2546 <free+0xd8>
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	84 0f       	add	r24, r20
    2530:	95 1f       	adc	r25, r21
    2532:	02 96       	adiw	r24, 0x02	; 2
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	13 96       	adiw	r26, 0x03	; 3
    2540:	9c 93       	st	X, r25
    2542:	8e 93       	st	-X, r24
    2544:	12 97       	sbiw	r26, 0x02	; 2
    2546:	e0 e0       	ldi	r30, 0x00	; 0
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	d8 01       	movw	r26, r16
    254c:	12 96       	adiw	r26, 0x02	; 2
    254e:	8d 91       	ld	r24, X+
    2550:	9c 91       	ld	r25, X
    2552:	13 97       	sbiw	r26, 0x03	; 3
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	19 f0       	breq	.+6      	; 0x255e <free+0xf0>
    2558:	f8 01       	movw	r30, r16
    255a:	8c 01       	movw	r16, r24
    255c:	f6 cf       	rjmp	.-20     	; 0x254a <free+0xdc>
    255e:	8d 91       	ld	r24, X+
    2560:	9c 91       	ld	r25, X
    2562:	98 01       	movw	r18, r16
    2564:	2e 5f       	subi	r18, 0xFE	; 254
    2566:	3f 4f       	sbci	r19, 0xFF	; 255
    2568:	82 0f       	add	r24, r18
    256a:	93 1f       	adc	r25, r19
    256c:	20 91 2d 02 	lds	r18, 0x022D
    2570:	30 91 2e 02 	lds	r19, 0x022E
    2574:	28 17       	cp	r18, r24
    2576:	39 07       	cpc	r19, r25
    2578:	69 f4       	brne	.+26     	; 0x2594 <free+0x126>
    257a:	30 97       	sbiw	r30, 0x00	; 0
    257c:	29 f4       	brne	.+10     	; 0x2588 <free+0x11a>
    257e:	10 92 30 02 	sts	0x0230, r1
    2582:	10 92 2f 02 	sts	0x022F, r1
    2586:	02 c0       	rjmp	.+4      	; 0x258c <free+0x11e>
    2588:	13 82       	std	Z+3, r1	; 0x03
    258a:	12 82       	std	Z+2, r1	; 0x02
    258c:	10 93 2e 02 	sts	0x022E, r17
    2590:	00 93 2d 02 	sts	0x022D, r16
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	08 95       	ret

0000259e <__do_global_dtors>:
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	c5 e5       	ldi	r28, 0x55	; 85
    25a2:	d0 e0       	ldi	r29, 0x00	; 0
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <__do_global_dtors+0x10>
    25a6:	fe 01       	movw	r30, r28
    25a8:	0e 94 9c 11 	call	0x2338	; 0x2338 <__tablejump2__>
    25ac:	21 96       	adiw	r28, 0x01	; 1
    25ae:	c6 35       	cpi	r28, 0x56	; 86
    25b0:	d1 07       	cpc	r29, r17
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__do_global_dtors+0x8>
    25b4:	f8 94       	cli

000025b6 <__stop_program>:
    25b6:	ff cf       	rjmp	.-2      	; 0x25b6 <__stop_program>
