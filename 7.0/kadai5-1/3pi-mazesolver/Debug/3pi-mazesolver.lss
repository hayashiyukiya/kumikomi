
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000025ec  00002680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  00800166  00800166  000026e6  2**0
                  ALLOC
  3 .stab         00006f90  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001235a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001239c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  000123dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000138c  00000000  00000000  000124cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000767  00000000  00000000  00013858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000e92  00000000  00000000  00013fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000214  00000000  00000000  00014e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004ac  00000000  00000000  00015068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006c9  00000000  00000000  00015514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00015bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__dtors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_end>:
      aa:	dc 0b       	sbc	r29, r28

000000ac <__dtors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec ee       	ldi	r30, 0xEC	; 236
      c0:	f5 e2       	ldi	r31, 0x25	; 37
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 36       	cpi	r26, 0x66	; 102
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	a6 e6       	ldi	r26, 0x66	; 102
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a6 33       	cpi	r26, 0x36	; 54
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 3b 02 	call	0x476	; 0x476 <main>
      e2:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__do_global_dtors>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	88 e6       	ldi	r24, 0x68	; 104
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      fe:	62 e0       	ldi	r22, 0x02	; 2
     100:	8a e6       	ldi	r24, 0x6A	; 106
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	8b e6       	ldi	r24, 0x6B	; 107
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	8c e6       	ldi	r24, 0x6C	; 108
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	8d e6       	ldi	r24, 0x6D	; 109
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	8e e6       	ldi	r24, 0x6E	; 110
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     130:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <clear>

00000134 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2a 97       	sbiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	8c 01       	movw	r16, r24
     158:	7c 01       	movw	r14, r24
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	e8 0e       	add	r14, r24
     15e:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     164:	95 e6       	ldi	r25, 0x65	; 101
     166:	c9 2e       	mov	r12, r25
     168:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	e4 e1       	ldi	r30, 0x14	; 20
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	de 01       	movw	r26, r28
     170:	11 96       	adiw	r26, 0x01	; 1
     172:	8b 2d       	mov	r24, r11
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     17c:	f8 01       	movw	r30, r16
     17e:	81 91       	ld	r24, Z+
     180:	91 91       	ld	r25, Z+
     182:	8f 01       	movw	r16, r30
     184:	b6 01       	movw	r22, r12
     186:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ec 0f       	add	r30, r28
     190:	fd 1f       	adc	r31, r29
     192:	e6 0f       	add	r30, r22
     194:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     196:	80 81       	ld	r24, Z
     198:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     19c:	0e 15       	cp	r16, r14
     19e:	1f 05       	cpc	r17, r15
     1a0:	21 f7       	brne	.-56     	; 0x16a <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	08 95       	ret

000001c2 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1c2:	2f 92       	push	r2
     1c4:	3f 92       	push	r3
     1c6:	4f 92       	push	r4
     1c8:	5f 92       	push	r5
     1ca:	6f 92       	push	r6
     1cc:	7f 92       	push	r7
     1ce:	8f 92       	push	r8
     1d0:	9f 92       	push	r9
     1d2:	af 92       	push	r10
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1fc:	a1 2c       	mov	r10, r1
     1fe:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/6 + integral/3300 + derivative*2;
     200:	96 e0       	ldi	r25, 0x06	; 6
     202:	29 2e       	mov	r2, r25
     204:	31 2c       	mov	r3, r1
     206:	24 ee       	ldi	r18, 0xE4	; 228
     208:	42 2e       	mov	r4, r18
     20a:	2c e0       	ldi	r18, 0x0C	; 12
     20c:	52 2e       	mov	r5, r18
     20e:	61 2c       	mov	r6, r1
     210:	71 2c       	mov	r7, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     212:	33 e7       	ldi	r19, 0x73	; 115
     214:	83 2e       	mov	r8, r19
     216:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     222:	8c 01       	movw	r16, r24
     224:	00 5d       	subi	r16, 0xD0	; 208
     226:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     228:	c8 01       	movw	r24, r16
     22a:	01 2e       	mov	r0, r17
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	c8 0e       	add	r12, r24
     234:	d9 1e       	adc	r13, r25
     236:	ea 1e       	adc	r14, r26
     238:	fb 1e       	adc	r15, r27
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     23a:	c8 01       	movw	r24, r16
     23c:	8a 19       	sub	r24, r10
     23e:	9b 09       	sbc	r25, r11
     240:	5c 01       	movw	r10, r24
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/6 + integral/3300 + derivative*2;
     242:	aa 0c       	add	r10, r10
     244:	bb 1c       	adc	r11, r11
     246:	c8 01       	movw	r24, r16
     248:	b1 01       	movw	r22, r2
     24a:	0e 94 08 11 	call	0x2210	; 0x2210 <__divmodhi4>
     24e:	a6 0e       	add	r10, r22
     250:	b7 1e       	adc	r11, r23
     252:	c7 01       	movw	r24, r14
     254:	b6 01       	movw	r22, r12
     256:	a3 01       	movw	r20, r6
     258:	92 01       	movw	r18, r4
     25a:	0e 94 3e 11 	call	0x227c	; 0x227c <__divmodsi4>
     25e:	c5 01       	movw	r24, r10
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 115; // the maximum speed
		if(power_difference > max)
     264:	84 37       	cpi	r24, 0x74	; 116
     266:	91 05       	cpc	r25, r1
     268:	74 f4       	brge	.+28     	; 0x286 <follow_segment+0xc4>
			power_difference = max;
		if(power_difference < -max)
     26a:	8d 38       	cpi	r24, 0x8D	; 141
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	92 07       	cpc	r25, r18
     270:	1c f0       	brlt	.+6      	; 0x278 <follow_segment+0xb6>
			power_difference = -max;
		
		if(power_difference < 0)
     272:	97 fd       	sbrc	r25, 7
     274:	03 c0       	rjmp	.+6      	; 0x27c <follow_segment+0xba>
     276:	09 c0       	rjmp	.+18     	; 0x28a <follow_segment+0xc8>
		// to a negative value.
		const int max = 115; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     278:	8d e8       	ldi	r24, 0x8D	; 141
     27a:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     27c:	63 e7       	ldi	r22, 0x73	; 115
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	8d 58       	subi	r24, 0x8D	; 141
     282:	9f 4f       	sbci	r25, 0xFF	; 255
     284:	07 c0       	rjmp	.+14     	; 0x294 <follow_segment+0xd2>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 115; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     286:	83 e7       	ldi	r24, 0x73	; 115
     288:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     28a:	b4 01       	movw	r22, r8
     28c:	68 1b       	sub	r22, r24
     28e:	79 0b       	sbc	r23, r25
     290:	83 e7       	ldi	r24, 0x73	; 115
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	9c 81       	ldd	r25, Y+4	; 0x04
     29c:	84 36       	cpi	r24, 0x64	; 100
     29e:	91 05       	cpc	r25, r1
     2a0:	50 f4       	brcc	.+20     	; 0x2b6 <follow_segment+0xf4>
     2a2:	8d 81       	ldd	r24, Y+5	; 0x05
     2a4:	9e 81       	ldd	r25, Y+6	; 0x06
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	28 f4       	brcc	.+10     	; 0x2b6 <follow_segment+0xf4>
     2ac:	8f 81       	ldd	r24, Y+7	; 0x07
     2ae:	98 85       	ldd	r25, Y+8	; 0x08
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	60 f0       	brcs	.+24     	; 0x2ce <follow_segment+0x10c>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	89 3c       	cpi	r24, 0xC9	; 201
     2bc:	91 05       	cpc	r25, r1
     2be:	38 f4       	brcc	.+14     	; 0x2ce <follow_segment+0x10c>
     2c0:	89 85       	ldd	r24, Y+9	; 0x09
     2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	10 f4       	brcc	.+4      	; 0x2ce <follow_segment+0x10c>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2ca:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2cc:	a5 cf       	rjmp	.-182    	; 0x218 <follow_segment+0x56>
}
     2ce:	2a 96       	adiw	r28, 0x0a	; 10
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	bf 90       	pop	r11
     2ec:	af 90       	pop	r10
     2ee:	9f 90       	pop	r9
     2f0:	8f 90       	pop	r8
     2f2:	7f 90       	pop	r7
     2f4:	6f 90       	pop	r6
     2f6:	5f 90       	pop	r5
     2f8:	4f 90       	pop	r4
     2fa:	3f 90       	pop	r3
     2fc:	2f 90       	pop	r2
     2fe:	08 95       	ret

00000300 <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	2a 97       	sbiw	r28, 0x0a	; 10
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     318:	80 ed       	ldi	r24, 0xD0	; 208
     31a:	97 e0       	ldi	r25, 0x07	; 7
     31c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     320:	0e 94 75 00 	call	0xea	; 0xea <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     324:	82 ea       	ldi	r24, 0xA2	; 162
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 8b 09 	call	0x1316	; 0x1316 <print_from_program_space>
	lcd_goto_xy(0,1);
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     334:	89 e9       	ldi	r24, 0x99	; 153
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 8b 09 	call	0x1316	; 0x1316 <print_from_program_space>
	play_from_program_space(welcome);
     33c:	83 e8       	ldi	r24, 0x83	; 131
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 38 08 	call	0x1070	; 0x1070 <play_from_program_space>
	delay_ms(1000);
     344:	88 ee       	ldi	r24, 0xE8	; 232
     346:	93 e0       	ldi	r25, 0x03	; 3
     348:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>

	clear();
     34c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
	print_from_program_space(demo_name_line1);
     350:	84 e9       	ldi	r24, 0x94	; 148
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 8b 09 	call	0x1316	; 0x1316 <print_from_program_space>
	lcd_goto_xy(0,1);
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     360:	8d e8       	ldi	r24, 0x8D	; 141
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 8b 09 	call	0x1316	; 0x1316 <print_from_program_space>
	delay_ms(1000);
     368:	88 ee       	ldi	r24, 0xE8	; 232
     36a:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     36c:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     370:	80 e1       	ldi	r24, 0x10	; 16
     372:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <button_is_pressed>
     376:	81 11       	cpse	r24, r1
     378:	1a c0       	rjmp	.+52     	; 0x3ae <initialize+0xae>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     37a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <read_battery_millivolts_3pi>
     37e:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     380:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
		print_long(bat);
     384:	b8 01       	movw	r22, r16
     386:	11 0f       	add	r17, r17
     388:	88 0b       	sbc	r24, r24
     38a:	99 0b       	sbc	r25, r25
     38c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <print_long>
		print("mV");
     390:	8b e3       	ldi	r24, 0x3B	; 59
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>
		lcd_goto_xy(0,1);
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
		print("Press B");
     3a0:	8e e3       	ldi	r24, 0x3E	; 62
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>

		delay_ms(100);
     3a8:	84 e6       	ldi	r24, 0x64	; 100
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	df cf       	rjmp	.-66     	; 0x36c <initialize+0x6c>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3ae:	80 e1       	ldi	r24, 0x10	; 16
     3b0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <wait_for_button_release>
	delay_ms(1000);
     3b4:	88 ee       	ldi	r24, 0xE8	; 232
     3b6:	93 e0       	ldi	r25, 0x03	; 3
     3b8:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
     3bc:	0c ee       	ldi	r16, 0xEC	; 236
     3be:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3c0:	08 32       	cpi	r16, 0x28	; 40
     3c2:	11 05       	cpc	r17, r1
     3c4:	28 f0       	brcs	.+10     	; 0x3d0 <initialize+0xd0>
			set_motors(40,-40);
     3c6:	68 ed       	ldi	r22, 0xD8	; 216
     3c8:	7f ef       	ldi	r23, 0xFF	; 255
     3ca:	88 e2       	ldi	r24, 0x28	; 40
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <initialize+0xd8>
		else
			set_motors(-40,40);
     3d0:	68 e2       	ldi	r22, 0x28	; 40
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	88 ed       	ldi	r24, 0xD8	; 216
     3d6:	9f ef       	ldi	r25, 0xFF	; 255
     3d8:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 9c 0b 	call	0x1738	; 0x1738 <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     3e2:	84 e1       	ldi	r24, 0x14	; 20
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
     3ea:	0f 5f       	subi	r16, 0xFF	; 255
     3ec:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     3ee:	0c 33       	cpi	r16, 0x3C	; 60
     3f0:	11 05       	cpc	r17, r1
     3f2:	31 f7       	brne	.-52     	; 0x3c0 <initialize+0xc0>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     400:	80 e1       	ldi	r24, 0x10	; 16
     402:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <button_is_pressed>
     406:	81 11       	cpse	r24, r1
     408:	1a c0       	rjmp	.+52     	; 0x43e <initialize+0x13e>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 a2 0b 	call	0x1744	; 0x1744 <read_line>
     414:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     416:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
		print_long(position);
     41a:	b8 01       	movw	r22, r16
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <print_long>
		lcd_goto_xy(0,1);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
		display_readings(sensors);
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 9a 00 	call	0x134	; 0x134 <display_readings>

		delay_ms(100);
     434:	84 e6       	ldi	r24, 0x64	; 100
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
     43c:	e1 cf       	rjmp	.-62     	; 0x400 <initialize+0x100>
	}
	wait_for_button_release(BUTTON_B);
     43e:	80 e1       	ldi	r24, 0x10	; 16
     440:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <wait_for_button_release>

	clear();
     444:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>

	print("Go!");		
     448:	86 e4       	ldi	r24, 0x46	; 70
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     450:	86 e7       	ldi	r24, 0x76	; 118
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 38 08 	call	0x1070	; 0x1070 <play_from_program_space>
	while(is_playing());
     458:	0e 94 17 08 	call	0x102e	; 0x102e <is_playing>
     45c:	81 11       	cpse	r24, r1
     45e:	fc cf       	rjmp	.-8      	; 0x458 <initialize+0x158>
}
     460:	2a 96       	adiw	r28, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     476:	0e 94 80 01 	call	0x300	; 0x300 <initialize>

	// Call our maze solving routine.
	maze_solve();
     47a:	0e 94 b2 02 	call	0x564	; 0x564 <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     47e:	ff cf       	rjmp	.-2      	; 0x47e <main+0x8>

00000480 <display_path>:
void display_path()
{
	// Set the last character of the path to a 0 so that the print()
	// function can find the end of the string.  This is how strings
	// are normally terminated in C.
	path[path_length] = 0;
     480:	e0 91 c9 01 	lds	r30, 0x01C9
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	e6 53       	subi	r30, 0x36	; 54
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	10 82       	st	Z, r1

	clear();
     48c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
	print(path);
     490:	8a ec       	ldi	r24, 0xCA	; 202
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>

	if(path_length > 8)
     498:	80 91 c9 01 	lds	r24, 0x01C9
     49c:	89 30       	cpi	r24, 0x09	; 9
     49e:	40 f0       	brcs	.+16     	; 0x4b0 <display_path+0x30>
	{
		lcd_goto_xy(0,1);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
		print(path+8);
     4a8:	82 ed       	ldi	r24, 0xD2	; 210
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <print>
     4b0:	08 95       	ret

000004b2 <select_turn>:
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right)
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
     4b2:	81 11       	cpse	r24, r1
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <select_turn+0x10>
		return 'L';
	else if(found_straight)
     4b6:	61 11       	cpse	r22, r1
     4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <select_turn+0x14>
		return 'S';
	else if(found_right)
     4ba:	41 11       	cpse	r20, r1
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <select_turn+0x18>
		return 'R';
	else
		return 'B';
     4be:	82 e4       	ldi	r24, 0x42	; 66
     4c0:	08 95       	ret
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
		return 'L';
     4c2:	8c e4       	ldi	r24, 0x4C	; 76
     4c4:	08 95       	ret
	else if(found_straight)
		return 'S';
     4c6:	83 e5       	ldi	r24, 0x53	; 83
     4c8:	08 95       	ret
	else if(found_right)
		return 'R';
     4ca:	82 e5       	ldi	r24, 0x52	; 82
	else
		return 'B';
}
     4cc:	08 95       	ret

000004ce <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplify_path()
{
	// only simplify the path if the second-to-last turn was a 'B'
	if(path_length < 3 || path[path_length-2] != 'B')
     4ce:	40 91 c9 01 	lds	r20, 0x01C9
     4d2:	43 30       	cpi	r20, 0x03	; 3
     4d4:	08 f4       	brcc	.+2      	; 0x4d8 <simplify_path+0xa>
     4d6:	45 c0       	rjmp	.+138    	; 0x562 <simplify_path+0x94>
     4d8:	24 2f       	mov	r18, r20
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	26 53       	subi	r18, 0x36	; 54
     4de:	3e 4f       	sbci	r19, 0xFE	; 254
     4e0:	f9 01       	movw	r30, r18
     4e2:	32 97       	sbiw	r30, 0x02	; 2
     4e4:	80 81       	ld	r24, Z
     4e6:	82 34       	cpi	r24, 0x42	; 66
     4e8:	e1 f5       	brne	.+120    	; 0x562 <simplify_path+0x94>
     4ea:	f9 01       	movw	r30, r18
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
     4f4:	52 91       	ld	r21, -Z
     4f6:	5c 34       	cpi	r21, 0x4C	; 76
     4f8:	51 f0       	breq	.+20     	; 0x50e <simplify_path+0x40>
     4fa:	52 35       	cpi	r21, 0x52	; 82
     4fc:	29 f0       	breq	.+10     	; 0x508 <simplify_path+0x3a>
     4fe:	52 34       	cpi	r21, 0x42	; 66
     500:	41 f4       	brne	.+16     	; 0x512 <simplify_path+0x44>
			break;
		case 'L':
			total_angle += 270;
			break;
		case 'B':
			total_angle += 180;
     502:	8c 54       	subi	r24, 0x4C	; 76
     504:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     506:	05 c0       	rjmp	.+10     	; 0x512 <simplify_path+0x44>
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
		{
		case 'R':
			total_angle += 90;
     508:	86 5a       	subi	r24, 0xA6	; 166
     50a:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     50c:	02 c0       	rjmp	.+4      	; 0x512 <simplify_path+0x44>
		case 'L':
			total_angle += 270;
     50e:	82 5f       	subi	r24, 0xF2	; 242
     510:	9e 4f       	sbci	r25, 0xFE	; 254
	if(path_length < 3 || path[path_length-2] != 'B')
		return;

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
     512:	6f 5f       	subi	r22, 0xFF	; 255
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	64 30       	cpi	r22, 0x04	; 4
     518:	71 05       	cpc	r23, r1
     51a:	61 f7       	brne	.-40     	; 0x4f4 <simplify_path+0x26>
			break;
		}
	}

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;
     51c:	68 e6       	ldi	r22, 0x68	; 104
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	0e 94 08 11 	call	0x2210	; 0x2210 <__divmodhi4>

	// Replace all of those turns with a single one.
	switch(total_angle)
     524:	8a 35       	cpi	r24, 0x5A	; 90
     526:	91 05       	cpc	r25, r1
     528:	89 f0       	breq	.+34     	; 0x54c <simplify_path+0x7e>
     52a:	34 f4       	brge	.+12     	; 0x538 <simplify_path+0x6a>
     52c:	89 2b       	or	r24, r25
     52e:	b1 f4       	brne	.+44     	; 0x55c <simplify_path+0x8e>
	{
	case 0:
		path[path_length - 3] = 'S';
     530:	f9 01       	movw	r30, r18
     532:	33 97       	sbiw	r30, 0x03	; 3
     534:	83 e5       	ldi	r24, 0x53	; 83
     536:	11 c0       	rjmp	.+34     	; 0x55a <simplify_path+0x8c>

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;

	// Replace all of those turns with a single one.
	switch(total_angle)
     538:	84 3b       	cpi	r24, 0xB4	; 180
     53a:	91 05       	cpc	r25, r1
     53c:	59 f0       	breq	.+22     	; 0x554 <simplify_path+0x86>
     53e:	8e 30       	cpi	r24, 0x0E	; 14
     540:	91 40       	sbci	r25, 0x01	; 1
     542:	61 f4       	brne	.+24     	; 0x55c <simplify_path+0x8e>
		break;
	case 180:
		path[path_length - 3] = 'B';
		break;
	case 270:
		path[path_length - 3] = 'L';
     544:	f9 01       	movw	r30, r18
     546:	33 97       	sbiw	r30, 0x03	; 3
     548:	8c e4       	ldi	r24, 0x4C	; 76
     54a:	07 c0       	rjmp	.+14     	; 0x55a <simplify_path+0x8c>
	{
	case 0:
		path[path_length - 3] = 'S';
		break;
	case 90:
		path[path_length - 3] = 'R';
     54c:	f9 01       	movw	r30, r18
     54e:	33 97       	sbiw	r30, 0x03	; 3
     550:	82 e5       	ldi	r24, 0x52	; 82
     552:	03 c0       	rjmp	.+6      	; 0x55a <simplify_path+0x8c>
		break;
	case 180:
		path[path_length - 3] = 'B';
     554:	f9 01       	movw	r30, r18
     556:	33 97       	sbiw	r30, 0x03	; 3
     558:	82 e4       	ldi	r24, 0x42	; 66
		break;
	case 270:
		path[path_length - 3] = 'L';
     55a:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	path_length -= 2;
     55c:	42 50       	subi	r20, 0x02	; 2
     55e:	40 93 c9 01 	sts	0x01C9, r20
     562:	08 95       	ret

00000564 <maze_solve>:
}

// This function is called once, from main.c.
void maze_solve()
{
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	2f 97       	sbiw	r28, 0x0f	; 15
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
	
	int all_path_length = 0;   //all path. not simply path length
	int timer = 0;             //time when solve maze and run maze
	int timer_f = 0;           //time under floating point 
	
	time_reset();
     578:	0e 94 99 0b 	call	0x1732	; 0x1732 <time_reset>

// This function is called once, from main.c.
void maze_solve()
{
	
	int all_path_length = 0;   //all path. not simply path length
     57c:	00 e0       	ldi	r16, 0x00	; 0
     57e:	10 e0       	ldi	r17, 0x00	; 0
	
	// Loop until we have solved the maze.
	while(1)
	{
		// FIRST MAIN LOOP BODY  
		follow_segment();
     580:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Drive straight a bit.  This helps us in case we entered the
		// intersection at an angle.
		// Note that we are slowing down - this prevents the robot
		// from tipping forward too much.
		set_motors(55,55);
     584:	67 e3       	ldi	r22, 0x37	; 55
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	87 e3       	ldi	r24, 0x37	; 55
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		delay_ms(30);
     590:	8e e1       	ldi	r24, 0x1E	; 30
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
		unsigned char found_straight=0;
		unsigned char found_right=0;

		// Now read the sensors and check the intersection type.
		unsigned int sensors[5];
		read_line(sensors,IR_EMITTERS_ON);
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <read_line>

		// Check for left and right exits.
		if(sensors[0] > 100)
     5a2:	ff 24       	eor	r15, r15
     5a4:	f3 94       	inc	r15
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	85 36       	cpi	r24, 0x65	; 101
     5ac:	91 05       	cpc	r25, r1
     5ae:	08 f4       	brcc	.+2      	; 0x5b2 <maze_solve+0x4e>
     5b0:	f1 2c       	mov	r15, r1
			found_left = 1;
		if(sensors[4] > 100)
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	89 85       	ldd	r24, Y+9	; 0x09
     5b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b8:	85 36       	cpi	r24, 0x65	; 101
     5ba:	91 05       	cpc	r25, r1
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <maze_solve+0x5c>
     5be:	40 e0       	ldi	r20, 0x00	; 0
			found_right = 1;

		// Drive straight a bit more - this is enough to line up our
		// wheels with the intersection.
		set_motors(40,40);
     5c0:	68 e2       	ldi	r22, 0x28	; 40
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	88 e2       	ldi	r24, 0x28	; 40
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	4f 87       	std	Y+15, r20	; 0x0f
     5ca:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		delay_ms(148);
     5ce:	84 e9       	ldi	r24, 0x94	; 148
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>

		// Check for a straight exit.
		read_line(sensors,IR_EMITTERS_ON);
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	ce 01       	movw	r24, r28
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <read_line>
		if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200)
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	4f 85       	ldd	r20, Y+15	; 0x0f
     5e6:	89 3c       	cpi	r24, 0xC9	; 201
     5e8:	91 05       	cpc	r25, r1
     5ea:	60 f4       	brcc	.+24     	; 0x604 <maze_solve+0xa0>
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	89 3c       	cpi	r24, 0xC9	; 201
     5f2:	91 05       	cpc	r25, r1
     5f4:	a0 f4       	brcc	.+40     	; 0x61e <maze_solve+0xba>
     5f6:	8f 81       	ldd	r24, Y+7	; 0x07
     5f8:	98 85       	ldd	r25, Y+8	; 0x08
     5fa:	89 3c       	cpi	r24, 0xC9	; 201
     5fc:	91 05       	cpc	r25, r1
     5fe:	78 f4       	brcc	.+30     	; 0x61e <maze_solve+0xba>
		delay_ms(30);
		// These variables recod whether the robot has seen a line to the
		// left, straight ahead, and right, whil examining the current
		// intersection.
		unsigned char found_left=0;
		unsigned char found_straight=0;
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	0e c0       	rjmp	.+28     	; 0x620 <maze_solve+0xbc>
			found_straight = 1;

		// Check for the ending spot.
		// If all three middle sensors are on dark black, we have
		// solved the maze.
		if(sensors[1] > 590 && sensors[2] > 590 && sensors[3] > 590)
     604:	8f 34       	cpi	r24, 0x4F	; 79
     606:	92 40       	sbci	r25, 0x02	; 2
     608:	50 f0       	brcs	.+20     	; 0x61e <maze_solve+0xba>
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	9e 81       	ldd	r25, Y+6	; 0x06
     60e:	8f 34       	cpi	r24, 0x4F	; 79
     610:	92 40       	sbci	r25, 0x02	; 2
     612:	28 f0       	brcs	.+10     	; 0x61e <maze_solve+0xba>
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	98 85       	ldd	r25, Y+8	; 0x08
     618:	8f 34       	cpi	r24, 0x4F	; 79
     61a:	92 40       	sbci	r25, 0x02	; 2
     61c:	c0 f4       	brcc	.+48     	; 0x64e <maze_solve+0xea>
     61e:	61 e0       	ldi	r22, 0x01	; 1
			break;

		// Intersection identification is complete.
		// If the maze has been solved, we can follow the existing
		// path.  Otherwise, we need to learn the solution.
		unsigned char dir = select_turn(found_left, found_straight, found_right);
     620:	8f 2d       	mov	r24, r15
     622:	0e 94 59 02 	call	0x4b2	; 0x4b2 <select_turn>
     626:	f8 2e       	mov	r15, r24

		// Make the turn indicated by the path.
		turn(dir);
     628:	0e 94 03 04 	call	0x806	; 0x806 <turn>

		// Store the intersection in the path variable.
		path[path_length] = dir;
     62c:	90 91 c9 01 	lds	r25, 0x01C9
     630:	e9 2f       	mov	r30, r25
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	e6 53       	subi	r30, 0x36	; 54
     636:	fe 4f       	sbci	r31, 0xFE	; 254
     638:	f0 82       	st	Z, r15
		path_length ++;
     63a:	9f 5f       	subi	r25, 0xFF	; 255
     63c:	90 93 c9 01 	sts	0x01C9, r25
		all_path_length++;
     640:	0f 5f       	subi	r16, 0xFF	; 255
     642:	1f 4f       	sbci	r17, 0xFF	; 255
		// You should check to make sure that the path_length does not
		// exceed the bounds of the array.  We'll ignore that in this
		// example.

		// Simplify the learned path.
		simplify_path();
     644:	0e 94 67 02 	call	0x4ce	; 0x4ce <simplify_path>

		// Display the path on the LCD.
		display_path();
     648:	0e 94 40 02 	call	0x480	; 0x480 <display_path>
	}
     64c:	99 cf       	rjmp	.-206    	; 0x580 <maze_solve+0x1c>
	// times as we want to.
	while(1)
	{
		
		timer_f = get_ms() / 100;    //get time and ms change s
		timer = timer_f / 10;
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	28 2e       	mov	r2, r24
     652:	31 2c       	mov	r3, r1

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
		{
			if(get_ms() % 8000 < 2000){
     654:	90 e4       	ldi	r25, 0x40	; 64
     656:	49 2e       	mov	r4, r25
     658:	9f e1       	ldi	r25, 0x1F	; 31
     65a:	59 2e       	mov	r5, r25
     65c:	61 2c       	mov	r6, r1
     65e:	71 2c       	mov	r7, r1
			}
			else{
				clear();
				print("All Len");
				lcd_goto_xy(0,1);
				print_long(all_path_length);
     660:	c8 01       	movw	r24, r16
     662:	11 0f       	add	r17, r17
     664:	aa 0b       	sbc	r26, r26
     666:	bb 0b       	sbc	r27, r27
     668:	8b 87       	std	Y+11, r24	; 0x0b
     66a:	9c 87       	std	Y+12, r25	; 0x0c
     66c:	ad 87       	std	Y+13, r26	; 0x0d
     66e:	be 87       	std	Y+14, r27	; 0x0e
	// Now enter an infinite loop - we can re-run the maze as many
	// times as we want to.
	while(1)
	{
		
		timer_f = get_ms() / 100;    //get time and ms change s
     670:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_ms>
     674:	24 e6       	ldi	r18, 0x64	; 100
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     680:	89 01       	movw	r16, r18
     682:	9a 01       	movw	r18, r20
		timer = timer_f / 10;
     684:	c8 01       	movw	r24, r16
     686:	b1 01       	movw	r22, r2
     688:	0e 94 08 11 	call	0x2210	; 0x2210 <__divmodhi4>
     68c:	4b 01       	movw	r8, r22
		timer_f = timer_f - timer *10;
     68e:	46 ef       	ldi	r20, 0xF6	; 246
     690:	46 03       	mulsu	r20, r22
     692:	60 01       	movw	r12, r0
     694:	47 9f       	mul	r20, r23
     696:	d0 0c       	add	r13, r0
     698:	11 24       	eor	r1, r1
     69a:	c0 0e       	add	r12, r16
     69c:	d1 1e       	adc	r13, r17
		
		// Beep to show that we finished the maze.
		set_motors(0,0);
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		play(">>a32");
     6aa:	8a e4       	ldi	r24, 0x4A	; 74
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 27 08 	call	0x104e	; 0x104e <play>
			else if(get_ms() % 8000 < 4000){
				display_path();
			}
			else if(get_ms() % 8000 < 6000){
				clear();
				print_long(timer);
     6b2:	09 2c       	mov	r0, r9
     6b4:	00 0c       	add	r0, r0
     6b6:	aa 08       	sbc	r10, r10
     6b8:	bb 08       	sbc	r11, r11
				print(".");
				print_long(timer_f);
     6ba:	0d 2c       	mov	r0, r13
     6bc:	00 0c       	add	r0, r0
     6be:	ee 08       	sbc	r14, r14
     6c0:	ff 08       	sbc	r15, r15
		set_motors(0,0);
		play(">>a32");

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
     6c2:	80 e1       	ldi	r24, 0x10	; 16
     6c4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <button_is_pressed>
     6c8:	81 11       	cpse	r24, r1
     6ca:	59 c0       	rjmp	.+178    	; 0x77e <maze_solve+0x21a>
		{
			if(get_ms() % 8000 < 2000){
     6cc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_ms>
     6d0:	a3 01       	movw	r20, r6
     6d2:	92 01       	movw	r18, r4
     6d4:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     6d8:	60 3d       	cpi	r22, 0xD0	; 208
     6da:	77 40       	sbci	r23, 0x07	; 7
     6dc:	81 05       	cpc	r24, r1
     6de:	91 05       	cpc	r25, r1
     6e0:	68 f4       	brcc	.+26     	; 0x6fc <maze_solve+0x198>
				clear();
     6e2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
				print("Solved!");
     6e6:	80 e5       	ldi	r24, 0x50	; 80
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>
				lcd_goto_xy(0,1);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
				print("Press B");
     6f6:	8e e3       	ldi	r24, 0x3E	; 62
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	29 c0       	rjmp	.+82     	; 0x74e <maze_solve+0x1ea>
			}
			else if(get_ms() % 8000 < 4000){
     6fc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_ms>
     700:	a3 01       	movw	r20, r6
     702:	92 01       	movw	r18, r4
     704:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     708:	60 3a       	cpi	r22, 0xA0	; 160
     70a:	7f 40       	sbci	r23, 0x0F	; 15
     70c:	81 05       	cpc	r24, r1
     70e:	91 05       	cpc	r25, r1
     710:	18 f4       	brcc	.+6      	; 0x718 <maze_solve+0x1b4>
				display_path();
     712:	0e 94 40 02 	call	0x480	; 0x480 <display_path>
     716:	2e c0       	rjmp	.+92     	; 0x774 <maze_solve+0x210>
			}
			else if(get_ms() % 8000 < 6000){
     718:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <get_ms>
     71c:	a3 01       	movw	r20, r6
     71e:	92 01       	movw	r18, r4
     720:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     724:	60 37       	cpi	r22, 0x70	; 112
     726:	77 41       	sbci	r23, 0x17	; 23
     728:	81 05       	cpc	r24, r1
     72a:	91 05       	cpc	r25, r1
     72c:	98 f4       	brcc	.+38     	; 0x754 <maze_solve+0x1f0>
				clear();
     72e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
				print_long(timer);
     732:	c5 01       	movw	r24, r10
     734:	b4 01       	movw	r22, r8
     736:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <print_long>
				print(".");
     73a:	88 e5       	ldi	r24, 0x58	; 88
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>
				print_long(timer_f);
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <print_long>
				print("sec");
     74a:	8a e5       	ldi	r24, 0x5A	; 90
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>
     752:	10 c0       	rjmp	.+32     	; 0x774 <maze_solve+0x210>
			}
			else{
				clear();
     754:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clear>
				print("All Len");
     758:	8e e5       	ldi	r24, 0x5E	; 94
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <print>
				lcd_goto_xy(0,1);
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 03 0a 	call	0x1406	; 0x1406 <lcd_goto_xy>
				print_long(all_path_length);
     768:	6b 85       	ldd	r22, Y+11	; 0x0b
     76a:	7c 85       	ldd	r23, Y+12	; 0x0c
     76c:	8d 85       	ldd	r24, Y+13	; 0x0d
     76e:	9e 85       	ldd	r25, Y+14	; 0x0e
     770:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <print_long>
			}
			delay_ms(30);
     774:	8e e1       	ldi	r24, 0x1E	; 30
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
     77c:	a2 cf       	rjmp	.-188    	; 0x6c2 <maze_solve+0x15e>
		}
		while(button_is_pressed(BUTTON_B));
     77e:	80 e1       	ldi	r24, 0x10	; 16
     780:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <button_is_pressed>
     784:	81 11       	cpse	r24, r1
     786:	fb cf       	rjmp	.-10     	; 0x77e <maze_solve+0x21a>
	
		delay_ms(1000);
     788:	88 ee       	ldi	r24, 0xE8	; 232
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>

		// Re-run the maze.  It's not necessary to identify the
		// intersections, so this loop is really simple.
		int i;
		time_reset();
     790:	0e 94 99 0b 	call	0x1732	; 0x1732 <time_reset>
		for(i=0;i<path_length;i++)
     794:	0a ec       	ldi	r16, 0xCA	; 202
     796:	11 e0       	ldi	r17, 0x01	; 1
     798:	80 91 c9 01 	lds	r24, 0x01C9
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	98 01       	movw	r18, r16
     7a0:	2a 5c       	subi	r18, 0xCA	; 202
     7a2:	31 40       	sbci	r19, 0x01	; 1
     7a4:	28 17       	cp	r18, r24
     7a6:	39 07       	cpc	r19, r25
     7a8:	5c f5       	brge	.+86     	; 0x800 <maze_solve+0x29c>
		{
			// SECOND MAIN LOOP BODY  
			follow_segment();
     7aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>
     7ae:	78 01       	movw	r14, r16

			// Drive straight while slowing down, as before
			if(path[i] == 'S'){
     7b0:	f8 01       	movw	r30, r16
     7b2:	80 81       	ld	r24, Z
     7b4:	83 35       	cpi	r24, 0x53	; 83
     7b6:	49 f4       	brne	.+18     	; 0x7ca <maze_solve+0x266>
				set_motors(110,110);
     7b8:	6e e6       	ldi	r22, 0x6E	; 110
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	8e e6       	ldi	r24, 0x6E	; 110
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
				delay_ms(60);
     7c4:	8c e3       	ldi	r24, 0x3C	; 60
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	12 c0       	rjmp	.+36     	; 0x7ee <maze_solve+0x28a>
			}
			else{
				set_motors(55,55);
     7ca:	67 e3       	ldi	r22, 0x37	; 55
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	87 e3       	ldi	r24, 0x37	; 55
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
				delay_ms(30);
     7d6:	8e e1       	ldi	r24, 0x1E	; 30
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
				set_motors(40,40);
     7de:	68 e2       	ldi	r22, 0x28	; 40
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	88 e2       	ldi	r24, 0x28	; 40
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
				delay_ms(148);
     7ea:	84 e9       	ldi	r24, 0x94	; 148
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
     7f2:	0f 5f       	subi	r16, 0xFF	; 255
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			// Make a turn according to the instruction stored in
			// path[i].
			turn(path[i]);
     7f6:	d7 01       	movw	r26, r14
     7f8:	8c 91       	ld	r24, X
     7fa:	0e 94 03 04 	call	0x806	; 0x806 <turn>
     7fe:	cc cf       	rjmp	.-104    	; 0x798 <maze_solve+0x234>
		}
		
		// Follow the last segment up to the finish.
		follow_segment();
     800:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>
	
		// Now we should be at the finish!  Restart the loop.
	}
     804:	35 cf       	rjmp	.-406    	; 0x670 <maze_solve+0x10c>

00000806 <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     806:	8c 34       	cpi	r24, 0x4C	; 76
     808:	69 f0       	breq	.+26     	; 0x824 <turn+0x1e>
     80a:	82 35       	cpi	r24, 0x52	; 82
     80c:	81 f0       	breq	.+32     	; 0x82e <turn+0x28>
     80e:	82 34       	cpi	r24, 0x42	; 66
     810:	11 f5       	brne	.+68     	; 0x856 <turn+0x50>
		set_motors(100,100);
		delay_ms(20);
		break;
	case 'B':
		// Turn around.
		set_motors(120,-120);  //80
     812:	68 e8       	ldi	r22, 0x88	; 136
     814:	7f ef       	ldi	r23, 0xFF	; 255
     816:	88 e7       	ldi	r24, 0x78	; 120
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		delay_ms(260);         //400
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0d c0       	rjmp	.+26     	; 0x83e <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-120,120); //80
     824:	68 e7       	ldi	r22, 0x78	; 120
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	88 e8       	ldi	r24, 0x88	; 136
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	04 c0       	rjmp	.+8      	; 0x836 <turn+0x30>
		set_motors(100,100);
		delay_ms(20);        
		break;
	case 'R':
		// Turn right.
		set_motors(120,-120);  //80
     82e:	68 e8       	ldi	r22, 0x88	; 136
     830:	7f ef       	ldi	r23, 0xFF	; 255
     832:	88 e7       	ldi	r24, 0x78	; 120
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		delay_ms(130);
     83a:	82 e8       	ldi	r24, 0x82	; 130
     83c:	90 e0       	ldi	r25, 0x00	; 0
		delay_ms(20);
		break;
	case 'B':
		// Turn around.
		set_motors(120,-120);  //80
		delay_ms(260);         //400
     83e:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
		set_motors(100,100);
     842:	64 e6       	ldi	r22, 0x64	; 100
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	84 e6       	ldi	r24, 0x64	; 100
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <set_motors>
		delay_ms(20);
     84e:	84 e1       	ldi	r24, 0x14	; 20
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0c 94 47 0b 	jmp	0x168e	; 0x168e <delay_ms>
     856:	08 95       	ret

00000858 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     858:	ec e7       	ldi	r30, 0x7C	; 124
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	8f 7d       	andi	r24, 0xDF	; 223
     860:	80 83       	st	Z, r24
     862:	08 95       	ret

00000864 <_ZN15OrangutanAnalog7setModeEh>:
     864:	81 11       	cpse	r24, r1
     866:	03 c0       	rjmp	.+6      	; 0x86e <_ZN15OrangutanAnalog7setModeEh+0xa>
     868:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN15OrangutanAnalog7setModeEh.part.0>
     86c:	08 95       	ret
     86e:	80 91 7c 00 	lds	r24, 0x007C
     872:	80 62       	ori	r24, 0x20	; 32
     874:	80 93 7c 00 	sts	0x007C, r24
     878:	08 95       	ret

0000087a <_ZN15OrangutanAnalog7getModeEv>:
     87a:	80 91 7c 00 	lds	r24, 0x007C
     87e:	85 fb       	bst	r24, 5
     880:	88 27       	eor	r24, r24
     882:	80 f9       	bld	r24, 0
     884:	08 95       	ret

00000886 <_ZN15OrangutanAnalog16conversionResultEv>:
     886:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN15OrangutanAnalog7getModeEv>
     88a:	88 23       	and	r24, r24
     88c:	21 f0       	breq	.+8      	; 0x896 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     88e:	80 91 79 00 	lds	r24, 0x0079
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	08 95       	ret
     896:	80 91 78 00 	lds	r24, 0x0078
     89a:	90 91 79 00 	lds	r25, 0x0079
     89e:	08 95       	ret

000008a0 <_ZN15OrangutanAnalog15startConversionEhh>:
     8a0:	80 32       	cpi	r24, 0x20	; 32
     8a2:	a0 f4       	brcc	.+40     	; 0x8cc <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     8a4:	97 e8       	ldi	r25, 0x87	; 135
     8a6:	90 93 7a 00 	sts	0x007A, r25
     8aa:	90 91 7c 00 	lds	r25, 0x007C
     8ae:	66 23       	and	r22, r22
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     8b2:	90 6c       	ori	r25, 0xC0	; 192
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     8b6:	9f 77       	andi	r25, 0x7F	; 127
     8b8:	90 64       	ori	r25, 0x40	; 64
     8ba:	90 7e       	andi	r25, 0xE0	; 224
     8bc:	98 2b       	or	r25, r24
     8be:	90 93 7c 00 	sts	0x007C, r25
     8c2:	80 91 7a 00 	lds	r24, 0x007A
     8c6:	80 64       	ori	r24, 0x40	; 64
     8c8:	80 93 7a 00 	sts	0x007A, r24
     8cc:	08 95       	ret

000008ce <_ZN15OrangutanAnalog11readAverageEhj>:
     8ce:	a0 e0       	ldi	r26, 0x00	; 0
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	ed e6       	ldi	r30, 0x6D	; 109
     8d4:	f4 e0       	ldi	r31, 0x04	; 4
     8d6:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x14>
     8da:	eb 01       	movw	r28, r22
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN15OrangutanAnalog15startConversionEhh>
     8e2:	80 91 7a 00 	lds	r24, 0x007A
     8e6:	86 fd       	sbrc	r24, 6
     8e8:	fc cf       	rjmp	.-8      	; 0x8e2 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     8ea:	8e 01       	movw	r16, r28
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	76 01       	movw	r14, r12
     8f2:	80 91 7a 00 	lds	r24, 0x007A
     8f6:	80 64       	ori	r24, 0x40	; 64
     8f8:	80 93 7a 00 	sts	0x007A, r24
     8fc:	80 91 7a 00 	lds	r24, 0x007A
     900:	86 fd       	sbrc	r24, 6
     902:	fc cf       	rjmp	.-8      	; 0x8fc <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     904:	0e 94 43 04 	call	0x886	; 0x886 <_ZN15OrangutanAnalog16conversionResultEv>
     908:	c8 0e       	add	r12, r24
     90a:	d9 1e       	adc	r13, r25
     90c:	e1 1c       	adc	r14, r1
     90e:	f1 1c       	adc	r15, r1
     910:	01 50       	subi	r16, 0x01	; 1
     912:	11 09       	sbc	r17, r1
     914:	01 15       	cp	r16, r1
     916:	11 05       	cpc	r17, r1
     918:	61 f7       	brne	.-40     	; 0x8f2 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     91a:	ce 01       	movw	r24, r28
     91c:	96 95       	lsr	r25
     91e:	87 95       	ror	r24
     920:	c0 34       	cpi	r28, 0x40	; 64
     922:	d1 05       	cpc	r29, r1
     924:	38 f4       	brcc	.+14     	; 0x934 <__stack+0x35>
     926:	8c 0d       	add	r24, r12
     928:	9d 1d       	adc	r25, r13
     92a:	be 01       	movw	r22, r28
     92c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     930:	cb 01       	movw	r24, r22
     932:	0e c0       	rjmp	.+28     	; 0x950 <__stack+0x51>
     934:	a7 01       	movw	r20, r14
     936:	96 01       	movw	r18, r12
     938:	28 0f       	add	r18, r24
     93a:	39 1f       	adc	r19, r25
     93c:	41 1d       	adc	r20, r1
     93e:	51 1d       	adc	r21, r1
     940:	ca 01       	movw	r24, r20
     942:	b9 01       	movw	r22, r18
     944:	9e 01       	movw	r18, r28
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     94e:	c9 01       	movw	r24, r18
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	e8 e0       	ldi	r30, 0x08	; 8
     956:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x14>

0000095a <_ZN15OrangutanAnalog12toMillivoltsEj>:
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	a0 91 00 01 	lds	r26, 0x0100
     966:	b0 91 01 01 	lds	r27, 0x0101
     96a:	9c 01       	movw	r18, r24
     96c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__umulhisi3>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
     974:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN15OrangutanAnalog7getModeEv>
     978:	88 23       	and	r24, r24
     97a:	59 f0       	breq	.+22     	; 0x992 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	61 58       	subi	r22, 0x81	; 129
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	8f 4f       	sbci	r24, 0xFF	; 255
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	2f ef       	ldi	r18, 0xFF	; 255
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	61 50       	subi	r22, 0x01	; 1
     998:	7e 4f       	sbci	r23, 0xFE	; 254
     99a:	8f 4f       	sbci	r24, 0xFF	; 255
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	2f ef       	ldi	r18, 0xFF	; 255
     9a0:	33 e0       	ldi	r19, 0x03	; 3
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     9aa:	c9 01       	movw	r24, r18
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	08 95       	ret

000009b6 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     9b6:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN15OrangutanAnalog11readAverageEhj>
     9ba:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN15OrangutanAnalog12toMillivoltsEj>
     9be:	08 95       	ret

000009c0 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN15OrangutanAnalog7getModeEv>
     9ca:	18 2f       	mov	r17, r24
     9cc:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN15OrangutanAnalog7setModeEh.part.0>
     9d0:	6a e0       	ldi	r22, 0x0A	; 10
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	86 e0       	ldi	r24, 0x06	; 6
     9d6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     9da:	ec 01       	movw	r28, r24
     9dc:	81 2f       	mov	r24, r17
     9de:	0e 94 32 04 	call	0x864	; 0x864 <_ZN15OrangutanAnalog7setModeEh>
     9e2:	ce 01       	movw	r24, r28
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	8c 0f       	add	r24, r28
     9ea:	9d 1f       	adc	r25, r29
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	96 95       	lsr	r25
     9f0:	87 95       	ror	r24
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	08 95       	ret

000009fa <read_battery_millivolts_3pi>:
     9fa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     9fe:	08 95       	ret

00000a00 <_ZL16currentCharacterv>:
     a00:	90 91 6b 01 	lds	r25, 0x016B
     a04:	e0 91 66 01 	lds	r30, 0x0166
     a08:	f0 91 67 01 	lds	r31, 0x0167
     a0c:	99 23       	and	r25, r25
     a0e:	11 f0       	breq	.+4      	; 0xa14 <_ZL16currentCharacterv+0x14>
     a10:	84 91       	lpm	r24, Z
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <_ZL16currentCharacterv+0x16>
     a14:	80 81       	ld	r24, Z
     a16:	2f eb       	ldi	r18, 0xBF	; 191
     a18:	28 0f       	add	r18, r24
     a1a:	2a 31       	cpi	r18, 0x1A	; 26
     a1c:	10 f4       	brcc	.+4      	; 0xa22 <_ZL16currentCharacterv+0x22>
     a1e:	80 5e       	subi	r24, 0xE0	; 224
     a20:	08 95       	ret
     a22:	80 32       	cpi	r24, 0x20	; 32
     a24:	49 f4       	brne	.+18     	; 0xa38 <_ZL16currentCharacterv+0x38>
     a26:	9f 01       	movw	r18, r30
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	30 93 67 01 	sts	0x0167, r19
     a30:	20 93 66 01 	sts	0x0166, r18
     a34:	ef 2b       	or	r30, r31
     a36:	31 f7       	brne	.-52     	; 0xa04 <_ZL16currentCharacterv+0x4>
     a38:	08 95       	ret

00000a3a <_ZL9getNumberv>:
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     a44:	c0 e0       	ldi	r28, 0x00	; 0
     a46:	d0 e0       	ldi	r29, 0x00	; 0
     a48:	1a e0       	ldi	r17, 0x0A	; 10
     a4a:	90 ed       	ldi	r25, 0xD0	; 208
     a4c:	98 0f       	add	r25, r24
     a4e:	9a 30       	cpi	r25, 0x0A	; 10
     a50:	b8 f4       	brcc	.+46     	; 0xa80 <_ZL9getNumberv+0x46>
     a52:	9e 01       	movw	r18, r28
     a54:	12 9f       	mul	r17, r18
     a56:	e0 01       	movw	r28, r0
     a58:	13 9f       	mul	r17, r19
     a5a:	d0 0d       	add	r29, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	c8 0f       	add	r28, r24
     a60:	d1 1d       	adc	r29, r1
     a62:	87 fd       	sbrc	r24, 7
     a64:	da 95       	dec	r29
     a66:	e0 97       	sbiw	r28, 0x30	; 48
     a68:	80 91 66 01 	lds	r24, 0x0166
     a6c:	90 91 67 01 	lds	r25, 0x0167
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	90 93 67 01 	sts	0x0167, r25
     a76:	80 93 66 01 	sts	0x0166, r24
     a7a:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     a7e:	e5 cf       	rjmp	.-54     	; 0xa4a <_ZL9getNumberv+0x10>
     a80:	ce 01       	movw	r24, r28
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	08 95       	ret

00000a8a <_ZN15OrangutanBuzzer5init2Ev>:
     a8a:	10 92 6f 00 	sts	0x006F, r1
     a8e:	83 e2       	ldi	r24, 0x23	; 35
     a90:	80 93 80 00 	sts	0x0080, r24
     a94:	81 e1       	ldi	r24, 0x11	; 17
     a96:	80 93 81 00 	sts	0x0081, r24
     a9a:	10 92 82 00 	sts	0x0082, r1
     a9e:	80 e1       	ldi	r24, 0x10	; 16
     aa0:	97 e2       	ldi	r25, 0x27	; 39
     aa2:	90 93 89 00 	sts	0x0089, r25
     aa6:	80 93 88 00 	sts	0x0088, r24
     aaa:	10 92 8b 00 	sts	0x008B, r1
     aae:	10 92 8a 00 	sts	0x008A, r1
     ab2:	22 9a       	sbi	0x04, 2	; 4
     ab4:	78 94       	sei
     ab6:	08 95       	ret

00000ab8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     ab8:	8f 92       	push	r8
     aba:	9f 92       	push	r9
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	5c 01       	movw	r10, r24
     ad0:	8b 01       	movw	r16, r22
     ad2:	d4 2e       	mov	r13, r20
     ad4:	80 91 68 01 	lds	r24, 0x0168
     ad8:	81 11       	cpse	r24, r1
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 68 01 	sts	0x0168, r24
     ae2:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN15OrangutanBuzzer5init2Ev>
     ae6:	10 92 0b 01 	sts	0x010B, r1
     aea:	b7 fe       	sbrs	r11, 7
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     aee:	e8 94       	clt
     af0:	b7 f8       	bld	r11, 7
     af2:	2a e0       	ldi	r18, 0x0A	; 10
     af4:	f2 2e       	mov	r15, r18
     af6:	02 c0       	rjmp	.+4      	; 0xafc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     af8:	ff 24       	eor	r15, r15
     afa:	f3 94       	inc	r15
     afc:	e0 90 81 00 	lds	r14, 0x0081
     b00:	2e 2d       	mov	r18, r14
     b02:	28 7f       	andi	r18, 0xF8	; 248
     b04:	e2 2e       	mov	r14, r18
     b06:	48 ec       	ldi	r20, 0xC8	; 200
     b08:	f4 9e       	mul	r15, r20
     b0a:	c0 01       	movw	r24, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	8a 15       	cp	r24, r10
     b10:	9b 05       	cpc	r25, r11
     b12:	e0 f4       	brcc	.+56     	; 0xb4c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     b14:	e5 01       	movw	r28, r10
     b16:	51 e1       	ldi	r21, 0x11	; 17
     b18:	a5 16       	cp	r10, r21
     b1a:	57 e2       	ldi	r21, 0x27	; 39
     b1c:	b5 06       	cpc	r11, r21
     b1e:	10 f0       	brcs	.+4      	; 0xb24 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     b20:	c0 e1       	ldi	r28, 0x10	; 16
     b22:	d7 e2       	ldi	r29, 0x27	; 39
     b24:	be 01       	movw	r22, r28
     b26:	76 95       	lsr	r23
     b28:	67 95       	ror	r22
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	60 58       	subi	r22, 0x80	; 128
     b30:	79 46       	sbci	r23, 0x69	; 105
     b32:	87 46       	sbci	r24, 0x67	; 103
     b34:	9f 4f       	sbci	r25, 0xFF	; 255
     b36:	4e 01       	movw	r8, r28
     b38:	a1 2c       	mov	r10, r1
     b3a:	b1 2c       	mov	r11, r1
     b3c:	a5 01       	movw	r20, r10
     b3e:	94 01       	movw	r18, r8
     b40:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     b44:	59 01       	movw	r10, r18
     b46:	8e 2d       	mov	r24, r14
     b48:	81 60       	ori	r24, 0x01	; 1
     b4a:	24 c0       	rjmp	.+72     	; 0xb94 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     b4c:	c8 e2       	ldi	r28, 0x28	; 40
     b4e:	fc 9e       	mul	r15, r28
     b50:	c0 2d       	mov	r28, r0
     b52:	11 24       	eor	r1, r1
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	ca 15       	cp	r28, r10
     b58:	db 05       	cpc	r29, r11
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     b5c:	e5 01       	movw	r28, r10
     b5e:	be 01       	movw	r22, r28
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	9e 01       	movw	r18, r28
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	8a e0       	ldi	r24, 0x0A	; 10
     b6c:	f8 12       	cpse	r15, r24
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	60 5e       	subi	r22, 0xE0	; 224
     b76:	73 44       	sbci	r23, 0x43	; 67
     b78:	81 44       	sbci	r24, 0x41	; 65
     b7a:	9f 4f       	sbci	r25, 0xFF	; 255
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	60 53       	subi	r22, 0x30	; 48
     b84:	7d 4e       	sbci	r23, 0xED	; 237
     b86:	8c 4e       	sbci	r24, 0xEC	; 236
     b88:	9f 4f       	sbci	r25, 0xFF	; 255
     b8a:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     b8e:	59 01       	movw	r10, r18
     b90:	8e 2d       	mov	r24, r14
     b92:	82 60       	ori	r24, 0x02	; 2
     b94:	88 2e       	mov	r8, r24
     b96:	2a e0       	ldi	r18, 0x0A	; 10
     b98:	f2 12       	cpse	r15, r18
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     b9c:	ce 01       	movw	r24, r28
     b9e:	05 96       	adiw	r24, 0x05	; 5
     ba0:	6a e0       	ldi	r22, 0x0A	; 10
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     ba8:	eb 01       	movw	r28, r22
     baa:	c8 3e       	cpi	r28, 0xE8	; 232
     bac:	43 e0       	ldi	r20, 0x03	; 3
     bae:	d4 07       	cpc	r29, r20
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     bb2:	98 01       	movw	r18, r16
     bb4:	de 01       	movw	r26, r28
     bb6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__umulhisi3>
     bba:	28 ee       	ldi	r18, 0xE8	; 232
     bbc:	33 e0       	ldi	r19, 0x03	; 3
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 3e 11 	call	0x227c	; 0x227c <__divmodsi4>
     bc6:	89 01       	movw	r16, r18
     bc8:	10 92 6f 00 	sts	0x006F, r1
     bcc:	80 92 81 00 	sts	0x0081, r8
     bd0:	b0 92 89 00 	sts	0x0089, r11
     bd4:	a0 92 88 00 	sts	0x0088, r10
     bd8:	20 91 88 00 	lds	r18, 0x0088
     bdc:	30 91 89 00 	lds	r19, 0x0089
     be0:	4d 2d       	mov	r20, r13
     be2:	40 31       	cpi	r20, 0x10	; 16
     be4:	08 f0       	brcs	.+2      	; 0xbe8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     be6:	4f e0       	ldi	r20, 0x0F	; 15
     be8:	80 e1       	ldi	r24, 0x10	; 16
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	84 1b       	sub	r24, r20
     bee:	91 09       	sbc	r25, r1
     bf0:	a9 01       	movw	r20, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     bf4:	56 95       	lsr	r21
     bf6:	47 95       	ror	r20
     bf8:	8a 95       	dec	r24
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     bfc:	50 93 8b 00 	sts	0x008B, r21
     c00:	40 93 8a 00 	sts	0x008A, r20
     c04:	10 93 6e 01 	sts	0x016E, r17
     c08:	00 93 6d 01 	sts	0x016D, r16
     c0c:	86 b3       	in	r24, 0x16	; 22
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	86 bb       	out	0x16, r24	; 22
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 6f 00 	sts	0x006F, r24
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	bf 90       	pop	r11
     c28:	af 90       	pop	r10
     c2a:	9f 90       	pop	r9
     c2c:	8f 90       	pop	r8
     c2e:	08 95       	ret

00000c30 <_ZN15OrangutanBuzzer8playNoteEhjh>:
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	eb 01       	movw	r28, r22
     c36:	8f 3f       	cpi	r24, 0xFF	; 255
     c38:	11 f0       	breq	.+4      	; 0xc3e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     c3a:	41 11       	cpse	r20, r1
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	be 01       	movw	r22, r28
     c42:	88 ee       	ldi	r24, 0xE8	; 232
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	43 c0       	rjmp	.+134    	; 0xcce <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     c48:	81 31       	cpi	r24, 0x11	; 17
     c4a:	30 f0       	brcs	.+12     	; 0xc58 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     c4c:	50 ef       	ldi	r21, 0xF0	; 240
     c4e:	58 0f       	add	r21, r24
     c50:	50 36       	cpi	r21, 0x60	; 96
     c52:	18 f0       	brcs	.+6      	; 0xc5a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     c54:	5f e5       	ldi	r21, 0x5F	; 95
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	85 2f       	mov	r24, r21
     c5c:	6c e0       	ldi	r22, 0x0C	; 12
     c5e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__udivmodqi4>
     c62:	68 2f       	mov	r22, r24
     c64:	74 ef       	ldi	r23, 0xF4	; 244
     c66:	76 03       	mulsu	r23, r22
     c68:	90 01       	movw	r18, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	25 0f       	add	r18, r21
     c6e:	31 1d       	adc	r19, r1
     c70:	2c 30       	cpi	r18, 0x0C	; 12
     c72:	31 05       	cpc	r19, r1
     c74:	40 f4       	brcc	.+16     	; 0xc86 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     c76:	f9 01       	movw	r30, r18
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e2 5e       	subi	r30, 0xE2	; 226
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	20 81       	ld	r18, Z
     c82:	31 81       	ldd	r19, Z+1	; 0x01
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	87 30       	cpi	r24, 0x07	; 7
     c8c:	81 f0       	breq	.+32     	; 0xcae <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     c8e:	08 2e       	mov	r0, r24
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	28 f0       	brcs	.+10     	; 0xca8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     c9e:	c9 01       	movw	r24, r18
     ca0:	05 96       	adiw	r24, 0x05	; 5
     ca2:	6a e0       	ldi	r22, 0x0A	; 10
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	0c c0       	rjmp	.+24     	; 0xcc0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     ca8:	c9 01       	movw	r24, r18
     caa:	90 58       	subi	r25, 0x80	; 128
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     cae:	c9 01       	movw	r24, r18
     cb0:	36 e0       	ldi	r19, 0x06	; 6
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	3a 95       	dec	r19
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     cba:	02 96       	adiw	r24, 0x02	; 2
     cbc:	65 e0       	ldi	r22, 0x05	; 5
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     cc4:	cb 01       	movw	r24, r22
     cc6:	40 31       	cpi	r20, 0x10	; 16
     cc8:	08 f0       	brcs	.+2      	; 0xccc <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     cca:	4f e0       	ldi	r20, 0x0F	; 15
     ccc:	be 01       	movw	r22, r28
     cce:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <_ZL8nextNotev>:
     cd8:	a2 e0       	ldi	r26, 0x02	; 2
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e2 e7       	ldi	r30, 0x72	; 114
     cde:	f6 e0       	ldi	r31, 0x06	; 6
     ce0:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x4>
     ce4:	90 90 0a 01 	lds	r9, 0x010A
     ce8:	80 91 6a 01 	lds	r24, 0x016A
     cec:	88 23       	and	r24, r24
     cee:	21 f0       	breq	.+8      	; 0xcf8 <_ZL8nextNotev+0x20>
     cf0:	60 91 69 01 	lds	r22, 0x0169
     cf4:	61 11       	cpse	r22, r1
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <_ZL8nextNotev+0x4e>
     cf8:	77 24       	eor	r7, r7
     cfa:	73 94       	inc	r7
     cfc:	b0 ec       	ldi	r27, 0xC0	; 192
     cfe:	ab 2e       	mov	r10, r27
     d00:	bd e5       	ldi	r27, 0x5D	; 93
     d02:	bb 2e       	mov	r11, r27
     d04:	1a e0       	ldi	r17, 0x0A	; 10
     d06:	61 2e       	mov	r6, r17
     d08:	04 e0       	ldi	r16, 0x04	; 4
     d0a:	80 2e       	mov	r8, r16
     d0c:	80 ed       	ldi	r24, 0xD0	; 208
     d0e:	c8 2e       	mov	r12, r24
     d10:	87 e0       	ldi	r24, 0x07	; 7
     d12:	d8 2e       	mov	r13, r24
     d14:	94 e0       	ldi	r25, 0x04	; 4
     d16:	e9 2e       	mov	r14, r25
     d18:	f1 2c       	mov	r15, r1
     d1a:	04 ef       	ldi	r16, 0xF4	; 244
     d1c:	11 e0       	ldi	r17, 0x01	; 1
     d1e:	2f e0       	ldi	r18, 0x0F	; 15
     d20:	42 2e       	mov	r4, r18
     d22:	51 2c       	mov	r5, r1
     d24:	15 c0       	rjmp	.+42     	; 0xd50 <_ZL8nextNotev+0x78>
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	88 ee       	ldi	r24, 0xE8	; 232
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     d32:	10 92 69 01 	sts	0x0169, r1
     d36:	17 c1       	rjmp	.+558    	; 0xf66 <_ZL8nextNotev+0x28e>
     d38:	86 36       	cpi	r24, 0x66	; 102
     d3a:	d4 f5       	brge	.+116    	; 0xdb0 <_ZL8nextNotev+0xd8>
     d3c:	81 36       	cpi	r24, 0x61	; 97
     d3e:	09 f4       	brne	.+2      	; 0xd42 <_ZL8nextNotev+0x6a>
     d40:	a9 c0       	rjmp	.+338    	; 0xe94 <_ZL8nextNotev+0x1bc>
     d42:	7c f5       	brge	.+94     	; 0xda2 <_ZL8nextNotev+0xca>
     d44:	8c 33       	cpi	r24, 0x3C	; 60
     d46:	09 f4       	brne	.+2      	; 0xd4a <_ZL8nextNotev+0x72>
     d48:	60 c0       	rjmp	.+192    	; 0xe0a <_ZL8nextNotev+0x132>
     d4a:	8e 33       	cpi	r24, 0x3E	; 62
     d4c:	81 f4       	brne	.+32     	; 0xd6e <_ZL8nextNotev+0x96>
     d4e:	93 94       	inc	r9
     d50:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     d54:	20 91 66 01 	lds	r18, 0x0166
     d58:	30 91 67 01 	lds	r19, 0x0167
     d5c:	2f 5f       	subi	r18, 0xFF	; 255
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	30 93 67 01 	sts	0x0167, r19
     d64:	20 93 66 01 	sts	0x0166, r18
     d68:	85 36       	cpi	r24, 0x65	; 101
     d6a:	31 f7       	brne	.-52     	; 0xd38 <_ZL8nextNotev+0x60>
     d6c:	52 c0       	rjmp	.+164    	; 0xe12 <_ZL8nextNotev+0x13a>
     d6e:	81 32       	cpi	r24, 0x21	; 33
     d70:	09 f0       	breq	.+2      	; 0xd74 <_ZL8nextNotev+0x9c>
     d72:	8b c0       	rjmp	.+278    	; 0xe8a <_ZL8nextNotev+0x1b2>
     d74:	80 92 0a 01 	sts	0x010A, r8
     d78:	d0 92 09 01 	sts	0x0109, r13
     d7c:	c0 92 08 01 	sts	0x0108, r12
     d80:	f0 92 07 01 	sts	0x0107, r15
     d84:	e0 92 06 01 	sts	0x0106, r14
     d88:	10 93 05 01 	sts	0x0105, r17
     d8c:	00 93 04 01 	sts	0x0104, r16
     d90:	50 92 03 01 	sts	0x0103, r5
     d94:	40 92 02 01 	sts	0x0102, r4
     d98:	10 92 6a 01 	sts	0x016A, r1
     d9c:	a4 e0       	ldi	r26, 0x04	; 4
     d9e:	9a 2e       	mov	r9, r26
     da0:	d7 cf       	rjmp	.-82     	; 0xd50 <_ZL8nextNotev+0x78>
     da2:	83 36       	cpi	r24, 0x63	; 99
     da4:	a1 f1       	breq	.+104    	; 0xe0e <_ZL8nextNotev+0x136>
     da6:	0c f4       	brge	.+2      	; 0xdaa <_ZL8nextNotev+0xd2>
     da8:	78 c0       	rjmp	.+240    	; 0xe9a <_ZL8nextNotev+0x1c2>
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	77 c0       	rjmp	.+238    	; 0xe9e <_ZL8nextNotev+0x1c6>
     db0:	8d 36       	cpi	r24, 0x6D	; 109
     db2:	c1 f1       	breq	.+112    	; 0xe24 <_ZL8nextNotev+0x14c>
     db4:	94 f4       	brge	.+36     	; 0xdda <_ZL8nextNotev+0x102>
     db6:	87 36       	cpi	r24, 0x67	; 103
     db8:	91 f1       	breq	.+100    	; 0xe1e <_ZL8nextNotev+0x146>
     dba:	74 f1       	brlt	.+92     	; 0xe18 <_ZL8nextNotev+0x140>
     dbc:	8c 36       	cpi	r24, 0x6C	; 108
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <_ZL8nextNotev+0xea>
     dc0:	64 c0       	rjmp	.+200    	; 0xe8a <_ZL8nextNotev+0x1b2>
     dc2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZL9getNumberv>
     dc6:	bc 01       	movw	r22, r24
     dc8:	90 93 07 01 	sts	0x0107, r25
     dcc:	80 93 06 01 	sts	0x0106, r24
     dd0:	80 91 08 01 	lds	r24, 0x0108
     dd4:	90 91 09 01 	lds	r25, 0x0109
     dd8:	51 c0       	rjmp	.+162    	; 0xe7c <_ZL8nextNotev+0x1a4>
     dda:	82 37       	cpi	r24, 0x72	; 114
     ddc:	c9 f1       	breq	.+114    	; 0xe50 <_ZL8nextNotev+0x178>
     dde:	4c f4       	brge	.+18     	; 0xdf2 <_ZL8nextNotev+0x11a>
     de0:	8f 36       	cpi	r24, 0x6F	; 111
     de2:	09 f0       	breq	.+2      	; 0xde6 <_ZL8nextNotev+0x10e>
     de4:	52 c0       	rjmp	.+164    	; 0xe8a <_ZL8nextNotev+0x1b2>
     de6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZL9getNumberv>
     dea:	98 2e       	mov	r9, r24
     dec:	80 93 0a 01 	sts	0x010A, r24
     df0:	af cf       	rjmp	.-162    	; 0xd50 <_ZL8nextNotev+0x78>
     df2:	84 37       	cpi	r24, 0x74	; 116
     df4:	81 f1       	breq	.+96     	; 0xe56 <_ZL8nextNotev+0x17e>
     df6:	86 37       	cpi	r24, 0x76	; 118
     df8:	09 f0       	breq	.+2      	; 0xdfc <_ZL8nextNotev+0x124>
     dfa:	47 c0       	rjmp	.+142    	; 0xe8a <_ZL8nextNotev+0x1b2>
     dfc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZL9getNumberv>
     e00:	90 93 03 01 	sts	0x0103, r25
     e04:	80 93 02 01 	sts	0x0102, r24
     e08:	a3 cf       	rjmp	.-186    	; 0xd50 <_ZL8nextNotev+0x78>
     e0a:	9a 94       	dec	r9
     e0c:	a1 cf       	rjmp	.-190    	; 0xd50 <_ZL8nextNotev+0x78>
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	20 c0       	rjmp	.+64     	; 0xe52 <_ZL8nextNotev+0x17a>
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	43 c0       	rjmp	.+134    	; 0xe9e <_ZL8nextNotev+0x1c6>
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	85 e0       	ldi	r24, 0x05	; 5
     e1c:	40 c0       	rjmp	.+128    	; 0xe9e <_ZL8nextNotev+0x1c6>
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	3d c0       	rjmp	.+122    	; 0xe9e <_ZL8nextNotev+0x1c6>
     e24:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     e28:	8c 36       	cpi	r24, 0x6C	; 108
     e2a:	19 f4       	brne	.+6      	; 0xe32 <_ZL8nextNotev+0x15a>
     e2c:	10 92 6a 01 	sts	0x016A, r1
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <_ZL8nextNotev+0x162>
     e32:	70 92 6a 01 	sts	0x016A, r7
     e36:	10 92 69 01 	sts	0x0169, r1
     e3a:	20 91 66 01 	lds	r18, 0x0166
     e3e:	30 91 67 01 	lds	r19, 0x0167
     e42:	2f 5f       	subi	r18, 0xFF	; 255
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	30 93 67 01 	sts	0x0167, r19
     e4a:	20 93 66 01 	sts	0x0166, r18
     e4e:	80 cf       	rjmp	.-256    	; 0xd50 <_ZL8nextNotev+0x78>
     e50:	11 e0       	ldi	r17, 0x01	; 1
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	24 c0       	rjmp	.+72     	; 0xe9e <_ZL8nextNotev+0x1c6>
     e56:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZL9getNumberv>
     e5a:	bc 01       	movw	r22, r24
     e5c:	c5 01       	movw	r24, r10
     e5e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     e62:	66 9e       	mul	r6, r22
     e64:	c0 01       	movw	r24, r0
     e66:	67 9e       	mul	r6, r23
     e68:	90 0d       	add	r25, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	90 93 09 01 	sts	0x0109, r25
     e70:	80 93 08 01 	sts	0x0108, r24
     e74:	60 91 06 01 	lds	r22, 0x0106
     e78:	70 91 07 01 	lds	r23, 0x0107
     e7c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     e80:	70 93 05 01 	sts	0x0105, r23
     e84:	60 93 04 01 	sts	0x0104, r22
     e88:	63 cf       	rjmp	.-314    	; 0xd50 <_ZL8nextNotev+0x78>
     e8a:	10 92 67 01 	sts	0x0167, r1
     e8e:	10 92 66 01 	sts	0x0166, r1
     e92:	69 c0       	rjmp	.+210    	; 0xf66 <_ZL8nextNotev+0x28e>
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	89 e0       	ldi	r24, 0x09	; 9
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <_ZL8nextNotev+0x1c6>
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	8b e0       	ldi	r24, 0x0B	; 11
     e9e:	08 2f       	mov	r16, r24
     ea0:	9c e0       	ldi	r25, 0x0C	; 12
     ea2:	99 9e       	mul	r9, r25
     ea4:	00 0d       	add	r16, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     eac:	98 2f       	mov	r25, r24
     eae:	97 7f       	andi	r25, 0xF7	; 247
     eb0:	93 32       	cpi	r25, 0x23	; 35
     eb2:	61 f4       	brne	.+24     	; 0xecc <_ZL8nextNotev+0x1f4>
     eb4:	20 91 66 01 	lds	r18, 0x0166
     eb8:	30 91 67 01 	lds	r19, 0x0167
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	30 93 67 01 	sts	0x0167, r19
     ec4:	20 93 66 01 	sts	0x0166, r18
     ec8:	0f 5f       	subi	r16, 0xFF	; 255
     eca:	ee cf       	rjmp	.-36     	; 0xea8 <_ZL8nextNotev+0x1d0>
     ecc:	8d 32       	cpi	r24, 0x2D	; 45
     ece:	71 f4       	brne	.+28     	; 0xeec <_ZL8nextNotev+0x214>
     ed0:	20 91 66 01 	lds	r18, 0x0166
     ed4:	30 91 67 01 	lds	r19, 0x0167
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	30 93 67 01 	sts	0x0167, r19
     ee0:	20 93 66 01 	sts	0x0166, r18
     ee4:	01 50       	subi	r16, 0x01	; 1
     ee6:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     eea:	f0 cf       	rjmp	.-32     	; 0xecc <_ZL8nextNotev+0x1f4>
     eec:	60 91 04 01 	lds	r22, 0x0104
     ef0:	70 91 05 01 	lds	r23, 0x0105
     ef4:	81 53       	subi	r24, 0x31	; 49
     ef6:	88 30       	cpi	r24, 0x08	; 8
     ef8:	50 f4       	brcc	.+20     	; 0xf0e <_ZL8nextNotev+0x236>
     efa:	e0 90 08 01 	lds	r14, 0x0108
     efe:	f0 90 09 01 	lds	r15, 0x0109
     f02:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZL9getNumberv>
     f06:	bc 01       	movw	r22, r24
     f08:	c7 01       	movw	r24, r14
     f0a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     f0e:	7b 01       	movw	r14, r22
     f10:	f6 94       	lsr	r15
     f12:	e7 94       	ror	r14
     f14:	69 83       	std	Y+1, r22	; 0x01
     f16:	7a 83       	std	Y+2, r23	; 0x02
     f18:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZL16currentCharacterv>
     f1c:	69 81       	ldd	r22, Y+1	; 0x01
     f1e:	7a 81       	ldd	r23, Y+2	; 0x02
     f20:	8e 32       	cpi	r24, 0x2E	; 46
     f22:	69 f4       	brne	.+26     	; 0xf3e <_ZL8nextNotev+0x266>
     f24:	20 91 66 01 	lds	r18, 0x0166
     f28:	30 91 67 01 	lds	r19, 0x0167
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	30 93 67 01 	sts	0x0167, r19
     f34:	20 93 66 01 	sts	0x0166, r18
     f38:	6e 0d       	add	r22, r14
     f3a:	7f 1d       	adc	r23, r15
     f3c:	e9 cf       	rjmp	.-46     	; 0xf10 <_ZL8nextNotev+0x238>
     f3e:	80 91 6a 01 	lds	r24, 0x016A
     f42:	88 23       	and	r24, r24
     f44:	39 f0       	breq	.+14     	; 0xf54 <_ZL8nextNotev+0x27c>
     f46:	9b 01       	movw	r18, r22
     f48:	36 95       	lsr	r19
     f4a:	27 95       	ror	r18
     f4c:	20 93 69 01 	sts	0x0169, r18
     f50:	62 1b       	sub	r22, r18
     f52:	71 09       	sbc	r23, r1
     f54:	40 91 02 01 	lds	r20, 0x0102
     f58:	11 23       	and	r17, r17
     f5a:	11 f0       	breq	.+4      	; 0xf60 <_ZL8nextNotev+0x288>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <_ZL8nextNotev+0x28a>
     f60:	80 2f       	mov	r24, r16
     f62:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN15OrangutanBuzzer8playNoteEhjh>
     f66:	22 96       	adiw	r28, 0x02	; 2
     f68:	e0 e1       	ldi	r30, 0x10	; 16
     f6a:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x4>

00000f6e <__vector_13>:
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
     f90:	80 91 6d 01 	lds	r24, 0x016D
     f94:	90 91 6e 01 	lds	r25, 0x016E
     f98:	9c 01       	movw	r18, r24
     f9a:	21 50       	subi	r18, 0x01	; 1
     f9c:	31 09       	sbc	r19, r1
     f9e:	30 93 6e 01 	sts	0x016E, r19
     fa2:	20 93 6d 01 	sts	0x016D, r18
     fa6:	89 2b       	or	r24, r25
     fa8:	11 f5       	brne	.+68     	; 0xfee <__vector_13+0x80>
     faa:	10 92 6f 00 	sts	0x006F, r1
     fae:	78 94       	sei
     fb0:	80 91 81 00 	lds	r24, 0x0081
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	80 93 81 00 	sts	0x0081, r24
     fbc:	80 e1       	ldi	r24, 0x10	; 16
     fbe:	97 e2       	ldi	r25, 0x27	; 39
     fc0:	90 93 89 00 	sts	0x0089, r25
     fc4:	80 93 88 00 	sts	0x0088, r24
     fc8:	10 92 8b 00 	sts	0x008B, r1
     fcc:	10 92 8a 00 	sts	0x008A, r1
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 0b 01 	sts	0x010B, r24
     fd6:	80 91 66 01 	lds	r24, 0x0166
     fda:	90 91 67 01 	lds	r25, 0x0167
     fde:	89 2b       	or	r24, r25
     fe0:	31 f0       	breq	.+12     	; 0xfee <__vector_13+0x80>
     fe2:	80 91 6c 01 	lds	r24, 0x016C
     fe6:	81 11       	cpse	r24, r1
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <__vector_13+0x80>
     fea:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZL8nextNotev>
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1010:	80 91 0b 01 	lds	r24, 0x010B
    1014:	88 23       	and	r24, r24
    1016:	49 f0       	breq	.+18     	; 0x102a <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	20 91 66 01 	lds	r18, 0x0166
    101e:	30 91 67 01 	lds	r19, 0x0167
    1022:	23 2b       	or	r18, r19
    1024:	19 f4       	brne	.+6      	; 0x102c <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	08 95       	ret

0000102e <is_playing>:
    102e:	0e 94 08 08 	call	0x1010	; 0x1010 <_ZN15OrangutanBuzzer9isPlayingEv>
    1032:	08 95       	ret

00001034 <_ZN15OrangutanBuzzer4playEPKc>:
    1034:	10 92 6f 00 	sts	0x006F, r1
    1038:	90 93 67 01 	sts	0x0167, r25
    103c:	80 93 66 01 	sts	0x0166, r24
    1040:	10 92 6b 01 	sts	0x016B, r1
    1044:	10 92 69 01 	sts	0x0169, r1
    1048:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZL8nextNotev>
    104c:	08 95       	ret

0000104e <play>:
    104e:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN15OrangutanBuzzer4playEPKc>
    1052:	08 95       	ret

00001054 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1054:	10 92 6f 00 	sts	0x006F, r1
    1058:	90 93 67 01 	sts	0x0167, r25
    105c:	80 93 66 01 	sts	0x0166, r24
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	80 93 6b 01 	sts	0x016B, r24
    1066:	10 92 69 01 	sts	0x0169, r1
    106a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZL8nextNotev>
    106e:	08 95       	ret

00001070 <play_from_program_space>:
    1070:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1074:	08 95       	ret

00001076 <delay_us.constprop.0>:
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	6f 93       	push	r22
    107c:	64 e0       	ldi	r22, 0x04	; 4
    107e:	6a 95       	dec	r22
    1080:	f1 f7       	brne	.-4      	; 0x107e <delay_us.constprop.0+0x8>
    1082:	6f 91       	pop	r22
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	c9 f7       	brne	.-14     	; 0x107a <delay_us.constprop.0+0x4>
    1088:	08 95       	ret

0000108a <_ZN12OrangutanLCD8busyWaitEv>:
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	1a b1       	in	r17, 0x0a	; 10
    1094:	57 98       	cbi	0x0a, 7	; 10
    1096:	5a 98       	cbi	0x0b, 2	; 11
    1098:	28 9a       	sbi	0x05, 0	; 5
    109a:	c0 e0       	ldi	r28, 0x00	; 0
    109c:	d0 e0       	ldi	r29, 0x00	; 0
    109e:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10a2:	5c 9a       	sbi	0x0b, 4	; 11
    10a4:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10a8:	09 b1       	in	r16, 0x09	; 9
    10aa:	5c 98       	cbi	0x0b, 4	; 11
    10ac:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10b0:	5c 9a       	sbi	0x0b, 4	; 11
    10b2:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10b6:	5c 98       	cbi	0x0b, 4	; 11
    10b8:	24 96       	adiw	r28, 0x04	; 4
    10ba:	07 ff       	sbrs	r16, 7
    10bc:	10 c0       	rjmp	.+32     	; 0x10de <_ZN12OrangutanLCD8busyWaitEv+0x54>
    10be:	ae 01       	movw	r20, r28
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 91 6f 01 	lds	r24, 0x016F
    10c8:	90 91 70 01 	lds	r25, 0x0170
    10cc:	a0 91 71 01 	lds	r26, 0x0171
    10d0:	b0 91 72 01 	lds	r27, 0x0172
    10d4:	48 17       	cp	r20, r24
    10d6:	59 07       	cpc	r21, r25
    10d8:	6a 07       	cpc	r22, r26
    10da:	7b 07       	cpc	r23, r27
    10dc:	00 f3       	brcs	.-64     	; 0x109e <_ZN12OrangutanLCD8busyWaitEv+0x14>
    10de:	1a b9       	out	0x0a, r17	; 10
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <_ZN12OrangutanLCD8sendDataEh>:
    10ea:	95 b1       	in	r25, 0x05	; 5
    10ec:	28 2f       	mov	r18, r24
    10ee:	21 70       	andi	r18, 0x01	; 1
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	48 2f       	mov	r20, r24
    10f8:	46 70       	andi	r20, 0x06	; 6
    10fa:	68 e0       	ldi	r22, 0x08	; 8
    10fc:	46 9f       	mul	r20, r22
    10fe:	a0 01       	movw	r20, r0
    1100:	11 24       	eor	r1, r1
    1102:	24 2b       	or	r18, r20
    1104:	9d 7c       	andi	r25, 0xCD	; 205
    1106:	29 2b       	or	r18, r25
    1108:	25 b9       	out	0x05, r18	; 5
    110a:	9b b1       	in	r25, 0x0b	; 11
    110c:	88 70       	andi	r24, 0x08	; 8
    110e:	82 95       	swap	r24
    1110:	80 7f       	andi	r24, 0xF0	; 240
    1112:	9f 77       	andi	r25, 0x7F	; 127
    1114:	89 2b       	or	r24, r25
    1116:	8b b9       	out	0x0b, r24	; 11
    1118:	5c 9a       	sbi	0x0b, 4	; 11
    111a:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    111e:	5c 98       	cbi	0x0b, 4	; 11
    1120:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    1124:	08 95       	ret

00001126 <_ZN12OrangutanLCD4sendEhhh>:
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e9 e9       	ldi	r30, 0x99	; 153
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__+0x16>
    1132:	c8 2f       	mov	r28, r24
    1134:	d6 2e       	mov	r13, r22
    1136:	e4 2e       	mov	r14, r20
    1138:	80 91 2e 02 	lds	r24, 0x022E
    113c:	81 11       	cpse	r24, r1
    113e:	05 c0       	rjmp	.+10     	; 0x114a <_ZN12OrangutanLCD4sendEhhh+0x24>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 2e 02 	sts	0x022E, r24
    1146:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN12OrangutanLCD5init2Ev>
    114a:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN12OrangutanLCD8busyWaitEv>
    114e:	14 b1       	in	r17, 0x04	; 4
    1150:	d5 b1       	in	r29, 0x05	; 5
    1152:	fa b0       	in	r15, 0x0a	; 10
    1154:	0b b1       	in	r16, 0x0b	; 11
    1156:	28 98       	cbi	0x05, 0	; 5
    1158:	dd 20       	and	r13, r13
    115a:	11 f0       	breq	.+4      	; 0x1160 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    115c:	5a 9a       	sbi	0x0b, 2	; 11
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1160:	5a 98       	cbi	0x0b, 2	; 11
    1162:	94 b1       	in	r25, 0x04	; 4
    1164:	92 63       	ori	r25, 0x32	; 50
    1166:	94 b9       	out	0x04, r25	; 4
    1168:	57 9a       	sbi	0x0a, 7	; 10
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	e8 16       	cp	r14, r24
    116e:	29 f0       	breq	.+10     	; 0x117a <_ZN12OrangutanLCD4sendEhhh+0x54>
    1170:	8c 2f       	mov	r24, r28
    1172:	82 95       	swap	r24
    1174:	8f 70       	andi	r24, 0x0F	; 15
    1176:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD8sendDataEh>
    117a:	8c 2f       	mov	r24, r28
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD8sendDataEh>
    1182:	fa b8       	out	0x0a, r15	; 10
    1184:	0b b9       	out	0x0b, r16	; 11
    1186:	14 b9       	out	0x04, r17	; 4
    1188:	d5 b9       	out	0x05, r29	; 5
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	e7 e0       	ldi	r30, 0x07	; 7
    1190:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__+0x16>

00001194 <_ZN12OrangutanLCD8send_cmdEh>:
    1194:	42 e0       	ldi	r20, 0x02	; 2
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN12OrangutanLCD4sendEhhh>
    119c:	08 95       	ret

0000119e <_ZN12OrangutanLCD9send_dataEh>:
    119e:	42 e0       	ldi	r20, 0x02	; 2
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN12OrangutanLCD4sendEhhh>
    11a6:	08 95       	ret

000011a8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    11a8:	a1 e0       	ldi	r26, 0x01	; 1
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea ed       	ldi	r30, 0xDA	; 218
    11ae:	f8 e0       	ldi	r31, 0x08	; 8
    11b0:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__prologue_saves__+0x18>
    11b4:	8c 01       	movw	r16, r24
    11b6:	66 0f       	add	r22, r22
    11b8:	66 0f       	add	r22, r22
    11ba:	66 0f       	add	r22, r22
    11bc:	e1 2c       	mov	r14, r1
    11be:	f1 2c       	mov	r15, r1
    11c0:	8e 2d       	mov	r24, r14
    11c2:	86 0f       	add	r24, r22
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	69 83       	std	Y+1, r22	; 0x01
    11c8:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    11cc:	f8 01       	movw	r30, r16
    11ce:	ee 0d       	add	r30, r14
    11d0:	ff 1d       	adc	r31, r15
    11d2:	84 91       	lpm	r24, Z
    11d4:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	e8 1a       	sub	r14, r24
    11dc:	f8 0a       	sbc	r15, r24
    11de:	69 81       	ldd	r22, Y+1	; 0x01
    11e0:	e8 e0       	ldi	r30, 0x08	; 8
    11e2:	ee 16       	cp	r14, r30
    11e4:	f1 04       	cpc	r15, r1
    11e6:	61 f7       	brne	.-40     	; 0x11c0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    11e8:	21 96       	adiw	r28, 0x01	; 1
    11ea:	e6 e0       	ldi	r30, 0x06	; 6
    11ec:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

000011f0 <lcd_load_custom_character>:
    11f0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    11f4:	08 95       	ret

000011f6 <print_character>:
    11f6:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    11fa:	08 95       	ret

000011fc <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN12OrangutanLCD4sendEhhh>
    1204:	08 95       	ret

00001206 <_ZN12OrangutanLCD5init2Ev>:
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	97 e2       	ldi	r25, 0x27	; 39
    120a:	a0 e0       	ldi	r26, 0x00	; 0
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	80 93 6f 01 	sts	0x016F, r24
    1212:	90 93 70 01 	sts	0x0170, r25
    1216:	a0 93 71 01 	sts	0x0171, r26
    121a:	b0 93 72 01 	sts	0x0172, r27
    121e:	52 9a       	sbi	0x0a, 2	; 10
    1220:	20 9a       	sbi	0x04, 0	; 4
    1222:	54 9a       	sbi	0x0a, 4	; 10
    1224:	8e e1       	ldi	r24, 0x1E	; 30
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1232:	86 e0       	ldi	r24, 0x06	; 6
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
    1264:	88 e2       	ldi	r24, 0x28	; 40
    1266:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    126a:	88 e0       	ldi	r24, 0x08	; 8
    126c:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1276:	86 e0       	ldi	r24, 0x06	; 6
    1278:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    127c:	8c e0       	ldi	r24, 0x0C	; 12
    127e:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1282:	08 95       	ret

00001284 <_ZN12OrangutanLCD5clearEv>:
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    128a:	80 91 75 01 	lds	r24, 0x0175
    128e:	90 91 76 01 	lds	r25, 0x0176
    1292:	89 2b       	or	r24, r25
    1294:	f9 f0       	breq	.+62     	; 0x12d4 <_ZN12OrangutanLCD5clearEv+0x50>
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	a0 e2       	ldi	r26, 0x20	; 32
    129a:	26 2f       	mov	r18, r22
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	70 91 0c 01 	lds	r23, 0x010C
    12a2:	80 91 0d 01 	lds	r24, 0x010D
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	78 9f       	mul	r23, r24
    12ac:	a0 01       	movw	r20, r0
    12ae:	79 9f       	mul	r23, r25
    12b0:	50 0d       	add	r21, r0
    12b2:	11 24       	eor	r1, r1
    12b4:	24 17       	cp	r18, r20
    12b6:	35 07       	cpc	r19, r21
    12b8:	4c f4       	brge	.+18     	; 0x12cc <_ZN12OrangutanLCD5clearEv+0x48>
    12ba:	e0 91 75 01 	lds	r30, 0x0175
    12be:	f0 91 76 01 	lds	r31, 0x0176
    12c2:	e2 0f       	add	r30, r18
    12c4:	f3 1f       	adc	r31, r19
    12c6:	a0 83       	st	Z, r26
    12c8:	6f 5f       	subi	r22, 0xFF	; 255
    12ca:	e7 cf       	rjmp	.-50     	; 0x129a <_ZN12OrangutanLCD5clearEv+0x16>
    12cc:	10 92 73 01 	sts	0x0173, r1
    12d0:	10 92 74 01 	sts	0x0174, r1
    12d4:	08 95       	ret

000012d6 <clear>:
    12d6:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN12OrangutanLCD5clearEv>
    12da:	08 95       	ret

000012dc <_ZN12OrangutanLCD5printEPKc>:
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	89 91       	ld	r24, Y+
    12e4:	88 23       	and	r24, r24
    12e6:	19 f0       	breq	.+6      	; 0x12ee <_ZN12OrangutanLCD5printEPKc+0x12>
    12e8:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    12ec:	fa cf       	rjmp	.-12     	; 0x12e2 <_ZN12OrangutanLCD5printEPKc+0x6>
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <print>:
    12f4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN12OrangutanLCD5printEPKc>
    12f8:	08 95       	ret

000012fa <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	fe 01       	movw	r30, r28
    1302:	84 91       	lpm	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	21 f0       	breq	.+8      	; 0x1310 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    1308:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    130c:	21 96       	adiw	r28, 0x01	; 1
    130e:	f8 cf       	rjmp	.-16     	; 0x1300 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <print_from_program_space>:
    1316:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    131a:	08 95       	ret

0000131c <_ZN12OrangutanLCD5printEm>:
    131c:	aa e0       	ldi	r26, 0x0A	; 10
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e9       	ldi	r30, 0x94	; 148
    1322:	f9 e0       	ldi	r31, 0x09	; 9
    1324:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x14>
    1328:	1a e0       	ldi	r17, 0x0A	; 10
    132a:	5a e0       	ldi	r21, 0x0A	; 10
    132c:	c5 2e       	mov	r12, r21
    132e:	d1 2c       	mov	r13, r1
    1330:	e1 2c       	mov	r14, r1
    1332:	f1 2c       	mov	r15, r1
    1334:	06 2f       	mov	r16, r22
    1336:	a7 01       	movw	r20, r14
    1338:	96 01       	movw	r18, r12
    133a:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
    133e:	ca 01       	movw	r24, r20
    1340:	b9 01       	movw	r22, r18
    1342:	11 50       	subi	r17, 0x01	; 1
    1344:	e1 e0       	ldi	r30, 0x01	; 1
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	ec 0f       	add	r30, r28
    134a:	fd 1f       	adc	r31, r29
    134c:	e1 0f       	add	r30, r17
    134e:	f1 1d       	adc	r31, r1
    1350:	00 5d       	subi	r16, 0xD0	; 208
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    1354:	62 9f       	mul	r22, r18
    1356:	00 19       	sub	r16, r0
    1358:	11 24       	eor	r1, r1
    135a:	00 83       	st	Z, r16
    135c:	61 15       	cp	r22, r1
    135e:	71 05       	cpc	r23, r1
    1360:	81 05       	cpc	r24, r1
    1362:	91 05       	cpc	r25, r1
    1364:	39 f7       	brne	.-50     	; 0x1334 <_ZN12OrangutanLCD5printEm+0x18>
    1366:	1a 30       	cpi	r17, 0x0A	; 10
    1368:	58 f4       	brcc	.+22     	; 0x1380 <_ZN12OrangutanLCD5printEm+0x64>
    136a:	e1 e0       	ldi	r30, 0x01	; 1
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ec 0f       	add	r30, r28
    1370:	fd 1f       	adc	r31, r29
    1372:	e1 0f       	add	r30, r17
    1374:	f1 1d       	adc	r31, r1
    1376:	80 81       	ld	r24, Z
    1378:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    137c:	1f 5f       	subi	r17, 0xFF	; 255
    137e:	f3 cf       	rjmp	.-26     	; 0x1366 <_ZN12OrangutanLCD5printEm+0x4a>
    1380:	2a 96       	adiw	r28, 0x0a	; 10
    1382:	e8 e0       	ldi	r30, 0x08	; 8
    1384:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x14>

00001388 <_ZN12OrangutanLCD5printEl>:
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	6b 01       	movw	r12, r22
    1392:	7c 01       	movw	r14, r24
    1394:	97 ff       	sbrs	r25, 7
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <_ZN12OrangutanLCD5printEl+0x26>
    1398:	f0 94       	com	r15
    139a:	e0 94       	com	r14
    139c:	d0 94       	com	r13
    139e:	c0 94       	com	r12
    13a0:	c1 1c       	adc	r12, r1
    13a2:	d1 1c       	adc	r13, r1
    13a4:	e1 1c       	adc	r14, r1
    13a6:	f1 1c       	adc	r15, r1
    13a8:	8d e2       	ldi	r24, 0x2D	; 45
    13aa:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    13ae:	c7 01       	movw	r24, r14
    13b0:	b6 01       	movw	r22, r12
    13b2:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN12OrangutanLCD5printEm>
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	08 95       	ret

000013c0 <print_long>:
    13c0:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN12OrangutanLCD5printEl>
    13c4:	08 95       	ret

000013c6 <_ZN12OrangutanLCD6gotoXYEhh>:
    13c6:	a5 e0       	ldi	r26, 0x05	; 5
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e9 ee       	ldi	r30, 0xE9	; 233
    13cc:	f9 e0       	ldi	r31, 0x09	; 9
    13ce:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x1e>
    13d2:	18 2f       	mov	r17, r24
    13d4:	80 e8       	ldi	r24, 0x80	; 128
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	80 ec       	ldi	r24, 0xC0	; 192
    13da:	8a 83       	std	Y+2, r24	; 0x02
    13dc:	84 e9       	ldi	r24, 0x94	; 148
    13de:	8b 83       	std	Y+3, r24	; 0x03
    13e0:	84 ed       	ldi	r24, 0xD4	; 212
    13e2:	8c 83       	std	Y+4, r24	; 0x04
    13e4:	fe 01       	movw	r30, r28
    13e6:	e6 0f       	add	r30, r22
    13e8:	f1 1d       	adc	r31, r1
    13ea:	81 81       	ldd	r24, Z+1	; 0x01
    13ec:	81 0f       	add	r24, r17
    13ee:	6d 83       	std	Y+5, r22	; 0x05
    13f0:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    13f4:	10 93 73 01 	sts	0x0173, r17
    13f8:	6d 81       	ldd	r22, Y+5	; 0x05
    13fa:	60 93 74 01 	sts	0x0174, r22
    13fe:	25 96       	adiw	r28, 0x05	; 5
    1400:	e3 e0       	ldi	r30, 0x03	; 3
    1402:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x1e>

00001406 <lcd_goto_xy>:
    1406:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN12OrangutanLCD6gotoXYEhh>
    140a:	08 95       	ret

0000140c <_ZN16OrangutanDigital9setOutputEhh>:
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	58 f4       	brcc	.+22     	; 0x1426 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1414:	99 0f       	add	r25, r25
    1416:	8a 95       	dec	r24
    1418:	ea f7       	brpl	.-6      	; 0x1414 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    141a:	89 2f       	mov	r24, r25
    141c:	aa e2       	ldi	r26, 0x2A	; 42
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	eb e2       	ldi	r30, 0x2B	; 43
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	21 c0       	rjmp	.+66     	; 0x1468 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1426:	8e 30       	cpi	r24, 0x0E	; 14
    1428:	60 f4       	brcc	.+24     	; 0x1442 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    142a:	98 ef       	ldi	r25, 0xF8	; 248
    142c:	98 0f       	add	r25, r24
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1432:	88 0f       	add	r24, r24
    1434:	9a 95       	dec	r25
    1436:	ea f7       	brpl	.-6      	; 0x1432 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1438:	a4 e2       	ldi	r26, 0x24	; 36
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e2       	ldi	r30, 0x25	; 37
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	13 c0       	rjmp	.+38     	; 0x1468 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1442:	85 31       	cpi	r24, 0x15	; 21
    1444:	60 f4       	brcc	.+24     	; 0x145e <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1446:	92 ef       	ldi	r25, 0xF2	; 242
    1448:	98 0f       	add	r25, r24
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    144e:	88 0f       	add	r24, r24
    1450:	9a 95       	dec	r25
    1452:	ea f7       	brpl	.-6      	; 0x144e <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1454:	a7 e2       	ldi	r26, 0x27	; 39
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 e2       	ldi	r30, 0x28	; 40
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e0 e0       	ldi	r30, 0x00	; 0
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	6f 3f       	cpi	r22, 0xFF	; 255
    146a:	19 f4       	brne	.+6      	; 0x1472 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    146c:	90 81       	ld	r25, Z
    146e:	98 27       	eor	r25, r24
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1472:	66 23       	and	r22, r22
    1474:	19 f0       	breq	.+6      	; 0x147c <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1476:	90 81       	ld	r25, Z
    1478:	98 2b       	or	r25, r24
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    147c:	20 81       	ld	r18, Z
    147e:	98 2f       	mov	r25, r24
    1480:	90 95       	com	r25
    1482:	92 23       	and	r25, r18
    1484:	90 83       	st	Z, r25
    1486:	9c 91       	ld	r25, X
    1488:	98 2b       	or	r25, r24
    148a:	9c 93       	st	X, r25
    148c:	08 95       	ret

0000148e <_ZN15OrangutanMotors5init2Ev>:
    148e:	83 ef       	ldi	r24, 0xF3	; 243
    1490:	80 93 b0 00 	sts	0x00B0, r24
    1494:	84 bd       	out	0x24, r24	; 36
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	80 93 b1 00 	sts	0x00B1, r24
    149c:	85 bd       	out	0x25, r24	; 37
    149e:	10 92 b4 00 	sts	0x00B4, r1
    14a2:	10 92 b3 00 	sts	0x00B3, r1
    14a6:	18 bc       	out	0x28, r1	; 40
    14a8:	17 bc       	out	0x27, r1	; 39
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	86 e0       	ldi	r24, 0x06	; 6
    14ae:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN16OrangutanDigital9setOutputEhh>
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	85 e0       	ldi	r24, 0x05	; 5
    14b6:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN16OrangutanDigital9setOutputEhh>
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	8b e0       	ldi	r24, 0x0B	; 11
    14be:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN16OrangutanDigital9setOutputEhh>
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN16OrangutanDigital9setOutputEhh>
    14ca:	08 95       	ret

000014cc <_ZN15OrangutanMotors4initEv>:
    14cc:	80 91 2f 02 	lds	r24, 0x022F
    14d0:	81 11       	cpse	r24, r1
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <_ZN15OrangutanMotors4initEv+0x12>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 2f 02 	sts	0x022F, r24
    14da:	0e 94 47 0a 	call	0x148e	; 0x148e <_ZN15OrangutanMotors5init2Ev>
    14de:	08 95       	ret

000014e0 <_ZN15OrangutanMotors10setM1SpeedEi>:
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	ec 01       	movw	r28, r24
    14e6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN15OrangutanMotors4initEv>
    14ea:	d7 ff       	sbrs	r29, 7
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    14ee:	d1 95       	neg	r29
    14f0:	c1 95       	neg	r28
    14f2:	d1 09       	sbc	r29, r1
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	cf 3f       	cpi	r28, 0xFF	; 255
    14fc:	d1 05       	cpc	r29, r1
    14fe:	19 f0       	breq	.+6      	; 0x1506 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1500:	14 f0       	brlt	.+4      	; 0x1506 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1502:	cf ef       	ldi	r28, 0xFF	; 255
    1504:	d0 e0       	ldi	r29, 0x00	; 0
    1506:	88 23       	and	r24, r24
    1508:	19 f0       	breq	.+6      	; 0x1510 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    150a:	18 bc       	out	0x28, r1	; 40
    150c:	c7 bd       	out	0x27, r28	; 39
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1510:	c8 bd       	out	0x28, r28	; 40
    1512:	17 bc       	out	0x27, r1	; 39
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <_ZN15OrangutanMotors10setM2SpeedEi>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    1520:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN15OrangutanMotors4initEv>
    1524:	d7 ff       	sbrs	r29, 7
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1528:	d1 95       	neg	r29
    152a:	c1 95       	neg	r28
    152c:	d1 09       	sbc	r29, r1
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	cf 3f       	cpi	r28, 0xFF	; 255
    1536:	d1 05       	cpc	r29, r1
    1538:	19 f0       	breq	.+6      	; 0x1540 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    153a:	14 f0       	brlt	.+4      	; 0x1540 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    153c:	cf ef       	ldi	r28, 0xFF	; 255
    153e:	d0 e0       	ldi	r29, 0x00	; 0
    1540:	88 23       	and	r24, r24
    1542:	29 f0       	breq	.+10     	; 0x154e <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1544:	10 92 b4 00 	sts	0x00B4, r1
    1548:	c0 93 b3 00 	sts	0x00B3, r28
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    154e:	c0 93 b4 00 	sts	0x00B4, r28
    1552:	10 92 b3 00 	sts	0x00B3, r1
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <_ZN15OrangutanMotors9setSpeedsEii>:
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	eb 01       	movw	r28, r22
    1562:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN15OrangutanMotors10setM1SpeedEi>
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN15OrangutanMotors10setM2SpeedEi>
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <set_motors>:
    1572:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN15OrangutanMotors9setSpeedsEii>
    1576:	08 95       	ret

00001578 <_ZN20OrangutanPushbuttons5init2Ev>:
    1578:	84 b1       	in	r24, 0x04	; 4
    157a:	8d 7c       	andi	r24, 0xCD	; 205
    157c:	84 b9       	out	0x04, r24	; 4
    157e:	85 b1       	in	r24, 0x05	; 5
    1580:	82 63       	ori	r24, 0x32	; 50
    1582:	85 b9       	out	0x05, r24	; 5
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	6f 93       	push	r22
    158a:	64 e0       	ldi	r22, 0x04	; 4
    158c:	6a 95       	dec	r22
    158e:	f1 f7       	brne	.-4      	; 0x158c <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1590:	6f 91       	pop	r22
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	c9 f7       	brne	.-14     	; 0x1588 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1596:	08 95       	ret

00001598 <_ZN20OrangutanPushbuttons4initEv>:
    1598:	80 91 30 02 	lds	r24, 0x0230
    159c:	81 11       	cpse	r24, r1
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <_ZN20OrangutanPushbuttons4initEv+0x12>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 30 02 	sts	0x0230, r24
    15a6:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN20OrangutanPushbuttons5init2Ev>
    15aa:	08 95       	ret

000015ac <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    15ac:	cf 93       	push	r28
    15ae:	c8 2f       	mov	r28, r24
    15b0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <_ZN20OrangutanPushbuttons4initEv>
    15b4:	83 b1       	in	r24, 0x03	; 3
    15b6:	8c 23       	and	r24, r28
    15b8:	e9 f3       	breq	.-6      	; 0x15b4 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    15ba:	8a e0       	ldi	r24, 0x0A	; 10
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 47 0b 	call	0x168e	; 0x168e <delay_ms>
    15c2:	83 b1       	in	r24, 0x03	; 3
    15c4:	8c 23       	and	r24, r28
    15c6:	b1 f3       	breq	.-20     	; 0x15b4 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    15c8:	83 b1       	in	r24, 0x03	; 3
    15ca:	8c 23       	and	r24, r28
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <wait_for_button_release>:
    15d0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    15d4:	08 95       	ret

000015d6 <_ZN20OrangutanPushbuttons9isPressedEh>:
    15d6:	a1 e0       	ldi	r26, 0x01	; 1
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e1 ef       	ldi	r30, 0xF1	; 241
    15dc:	fa e0       	ldi	r31, 0x0A	; 10
    15de:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__prologue_saves__+0x20>
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <_ZN20OrangutanPushbuttons4initEv>
    15e8:	93 b1       	in	r25, 0x03	; 3
    15ea:	90 95       	com	r25
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	89 23       	and	r24, r25
    15f0:	21 96       	adiw	r28, 0x01	; 1
    15f2:	e2 e0       	ldi	r30, 0x02	; 2
    15f4:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__epilogue_restores__+0x20>

000015f8 <button_is_pressed>:
    15f8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_ZN20OrangutanPushbuttons9isPressedEh>
    15fc:	08 95       	ret

000015fe <__vector_9>:
    15fe:	2f 92       	push	r2
    1600:	8f 93       	push	r24
    1602:	9f 93       	push	r25
    1604:	2f b6       	in	r2, 0x3f	; 63
    1606:	80 91 7e 01 	lds	r24, 0x017E
    160a:	90 91 7f 01 	lds	r25, 0x017F
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	80 93 7e 01 	sts	0x017E, r24
    1614:	90 93 7f 01 	sts	0x017F, r25
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	80 91 80 01 	lds	r24, 0x0180
    161e:	89 1f       	adc	r24, r25
    1620:	80 93 80 01 	sts	0x0180, r24
    1624:	90 91 78 01 	lds	r25, 0x0178
    1628:	9c 5f       	subi	r25, 0xFC	; 252
    162a:	90 93 78 01 	sts	0x0178, r25
    162e:	80 91 77 01 	lds	r24, 0x0177
    1632:	80 51       	subi	r24, 0x10	; 16
    1634:	97 42       	sbci	r25, 0x27	; 39
    1636:	c0 f0       	brcs	.+48     	; 0x1668 <end>
    1638:	90 93 78 01 	sts	0x0178, r25
    163c:	80 93 77 01 	sts	0x0177, r24
    1640:	80 91 79 01 	lds	r24, 0x0179
    1644:	90 91 7a 01 	lds	r25, 0x017A
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	80 93 79 01 	sts	0x0179, r24
    164e:	90 93 7a 01 	sts	0x017A, r25
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	80 91 7b 01 	lds	r24, 0x017B
    1658:	89 1f       	adc	r24, r25
    165a:	80 93 7b 01 	sts	0x017B, r24
    165e:	80 91 7c 01 	lds	r24, 0x017C
    1662:	89 1f       	adc	r24, r25
    1664:	80 93 7c 01 	sts	0x017C, r24

00001668 <end>:
    1668:	2f be       	out	0x3f, r2	; 63
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	2f 90       	pop	r2
    1670:	18 95       	reti

00001672 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1672:	28 ee       	ldi	r18, 0xE8	; 232
    1674:	33 e0       	ldi	r19, 0x03	; 3
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	48 f0       	brcs	.+18     	; 0x168c <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    167a:	f9 01       	movw	r30, r18
    167c:	6f 93       	push	r22
    167e:	64 e0       	ldi	r22, 0x04	; 4
    1680:	6a 95       	dec	r22
    1682:	f1 f7       	brne	.-4      	; 0x1680 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1684:	6f 91       	pop	r22
    1686:	31 97       	sbiw	r30, 0x01	; 1
    1688:	c9 f7       	brne	.-14     	; 0x167c <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    168a:	f5 cf       	rjmp	.-22     	; 0x1676 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    168c:	08 95       	ret

0000168e <delay_ms>:
    168e:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZN13OrangutanTime17delayMillisecondsEj>
    1692:	08 95       	ret

00001694 <_ZN13OrangutanTime5init2Ev>:
    1694:	e0 e7       	ldi	r30, 0x70	; 112
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8e 7f       	andi	r24, 0xFE	; 254
    169c:	80 83       	st	Z, r24
    169e:	a0 eb       	ldi	r26, 0xB0	; 176
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	8c 91       	ld	r24, X
    16a4:	83 60       	ori	r24, 0x03	; 3
    16a6:	8c 93       	st	X, r24
    16a8:	a1 eb       	ldi	r26, 0xB1	; 177
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	8c 91       	ld	r24, X
    16ae:	80 7f       	andi	r24, 0xF0	; 240
    16b0:	8c 93       	st	X, r24
    16b2:	8c 91       	ld	r24, X
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	8c 93       	st	X, r24
    16b8:	b8 9a       	sbi	0x17, 0	; 23
    16ba:	80 81       	ld	r24, Z
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	80 83       	st	Z, r24
    16c0:	78 94       	sei
    16c2:	08 95       	ret

000016c4 <_ZN13OrangutanTime4initEv>:
    16c4:	80 91 31 02 	lds	r24, 0x0231
    16c8:	81 11       	cpse	r24, r1
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <_ZN13OrangutanTime4initEv+0x12>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 31 02 	sts	0x0231, r24
    16d2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN13OrangutanTime5init2Ev>
    16d6:	08 95       	ret

000016d8 <_ZN13OrangutanTime2msEv>:
    16d8:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN13OrangutanTime4initEv>
    16dc:	e0 e7       	ldi	r30, 0x70	; 112
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8e 7f       	andi	r24, 0xFE	; 254
    16e4:	80 83       	st	Z, r24
    16e6:	60 91 79 01 	lds	r22, 0x0179
    16ea:	70 91 7a 01 	lds	r23, 0x017A
    16ee:	80 91 7b 01 	lds	r24, 0x017B
    16f2:	90 91 7c 01 	lds	r25, 0x017C
    16f6:	20 81       	ld	r18, Z
    16f8:	21 60       	ori	r18, 0x01	; 1
    16fa:	20 83       	st	Z, r18
    16fc:	08 95       	ret

000016fe <get_ms>:
    16fe:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <_ZN13OrangutanTime2msEv>
    1702:	08 95       	ret

00001704 <_ZN13OrangutanTime5resetEv>:
    1704:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN13OrangutanTime4initEv>
    1708:	e0 e7       	ldi	r30, 0x70	; 112
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8e 7f       	andi	r24, 0xFE	; 254
    1710:	80 83       	st	Z, r24
    1712:	10 92 79 01 	sts	0x0179, r1
    1716:	10 92 7a 01 	sts	0x017A, r1
    171a:	10 92 7b 01 	sts	0x017B, r1
    171e:	10 92 7c 01 	sts	0x017C, r1
    1722:	10 92 78 01 	sts	0x0178, r1
    1726:	10 92 77 01 	sts	0x0177, r1
    172a:	80 81       	ld	r24, Z
    172c:	81 60       	ori	r24, 0x01	; 1
    172e:	80 83       	st	Z, r24
    1730:	08 95       	ret

00001732 <time_reset>:
    1732:	0e 94 82 0b 	call	0x1704	; 0x1704 <_ZN13OrangutanTime5resetEv>
    1736:	08 95       	ret

00001738 <calibrate_line_sensors>:
    1738:	68 2f       	mov	r22, r24
    173a:	81 e8       	ldi	r24, 0x81	; 129
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN16PololuQTRSensors9calibrateEh>
    1742:	08 95       	ret

00001744 <read_line>:
    1744:	46 2f       	mov	r20, r22
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	bc 01       	movw	r22, r24
    174a:	81 e8       	ldi	r24, 0x81	; 129
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN16PololuQTRSensors8readLineEPjhh>
    1752:	08 95       	ret

00001754 <_ZN9Pololu3pi4initEjh>:
    1754:	0f 93       	push	r16
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	00 d0       	rcall	.+0      	; 0x175c <_ZN9Pololu3pi4initEjh+0x8>
    175c:	00 d0       	rcall	.+0      	; 0x175e <_ZN9Pololu3pi4initEjh+0xa>
    175e:	1f 92       	push	r1
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	9c 01       	movw	r18, r24
    1766:	85 e0       	ldi	r24, 0x05	; 5
    1768:	e6 e3       	ldi	r30, 0x36	; 54
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	de 01       	movw	r26, r28
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	01 90       	ld	r0, Z+
    1772:	0d 92       	st	X+, r0
    1774:	8a 95       	dec	r24
    1776:	e1 f7       	brne	.-8      	; 0x1770 <_ZN9Pololu3pi4initEjh+0x1c>
    1778:	66 23       	and	r22, r22
    177a:	11 f0       	breq	.+4      	; 0x1780 <_ZN9Pololu3pi4initEjh+0x2c>
    177c:	0f ef       	ldi	r16, 0xFF	; 255
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <_ZN9Pololu3pi4initEjh+0x2e>
    1780:	03 e1       	ldi	r16, 0x13	; 19
    1782:	45 e0       	ldi	r20, 0x05	; 5
    1784:	be 01       	movw	r22, r28
    1786:	6f 5f       	subi	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	81 e8       	ldi	r24, 0x81	; 129
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1792:	81 e8       	ldi	r24, 0x81	; 129
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN16PololuQTRSensors11emittersOffEv>
    179a:	0e 94 82 0b 	call	0x1704	; 0x1704 <_ZN13OrangutanTime5resetEv>
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <pololu_3pi_init>:
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <_ZN9Pololu3pi4initEjh>
    17b6:	08 95       	ret

000017b8 <_GLOBAL__sub_D_pololu_3pi_init>:
    17b8:	81 e8       	ldi	r24, 0x81	; 129
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN16PololuQTRSensorsD1Ev>
    17c0:	08 95       	ret

000017c2 <delay_us>:
    17c2:	6f 93       	push	r22
    17c4:	64 e0       	ldi	r22, 0x04	; 4
    17c6:	6a 95       	dec	r22
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <delay_us+0x4>
    17ca:	6f 91       	pop	r22
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	c9 f7       	brne	.-14     	; 0x17c2 <delay_us>
    17d0:	08 95       	ret

000017d2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    17d2:	fc 01       	movw	r30, r24
    17d4:	11 82       	std	Z+1, r1	; 0x01
    17d6:	10 82       	st	Z, r1
    17d8:	13 82       	std	Z+3, r1	; 0x03
    17da:	12 82       	std	Z+2, r1	; 0x02
    17dc:	15 82       	std	Z+5, r1	; 0x05
    17de:	14 82       	std	Z+4, r1	; 0x04
    17e0:	16 82       	std	Z+6, r1	; 0x06
    17e2:	68 30       	cpi	r22, 0x08	; 8
    17e4:	68 f4       	brcc	.+26     	; 0x1800 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    17e6:	89 e2       	ldi	r24, 0x29	; 41
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
    17ee:	8b e2       	ldi	r24, 0x2B	; 43
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	93 83       	std	Z+3, r25	; 0x03
    17f4:	82 83       	std	Z+2, r24	; 0x02
    17f6:	8a e2       	ldi	r24, 0x2A	; 42
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	95 83       	std	Z+5, r25	; 0x05
    17fc:	84 83       	std	Z+4, r24	; 0x04
    17fe:	1f c0       	rjmp	.+62     	; 0x183e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1800:	6e 30       	cpi	r22, 0x0E	; 14
    1802:	70 f4       	brcc	.+28     	; 0x1820 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    1804:	83 e2       	ldi	r24, 0x23	; 35
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	80 83       	st	Z, r24
    180c:	85 e2       	ldi	r24, 0x25	; 37
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	93 83       	std	Z+3, r25	; 0x03
    1812:	82 83       	std	Z+2, r24	; 0x02
    1814:	84 e2       	ldi	r24, 0x24	; 36
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	95 83       	std	Z+5, r25	; 0x05
    181a:	84 83       	std	Z+4, r24	; 0x04
    181c:	68 50       	subi	r22, 0x08	; 8
    181e:	0f c0       	rjmp	.+30     	; 0x183e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1820:	65 31       	cpi	r22, 0x15	; 21
    1822:	98 f4       	brcc	.+38     	; 0x184a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    1824:	86 e2       	ldi	r24, 0x26	; 38
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	88 e2       	ldi	r24, 0x28	; 40
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	93 83       	std	Z+3, r25	; 0x03
    1832:	82 83       	std	Z+2, r24	; 0x02
    1834:	87 e2       	ldi	r24, 0x27	; 39
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	95 83       	std	Z+5, r25	; 0x05
    183a:	84 83       	std	Z+4, r24	; 0x04
    183c:	6e 50       	subi	r22, 0x0E	; 14
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1842:	88 0f       	add	r24, r24
    1844:	6a 95       	dec	r22
    1846:	ea f7       	brpl	.-6      	; 0x1842 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    1848:	86 83       	std	Z+6, r24	; 0x06
    184a:	08 95       	ret

0000184c <_ZN16PololuQTRSensors4initEhhh>:
    184c:	a7 e0       	ldi	r26, 0x07	; 7
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ec e2       	ldi	r30, 0x2C	; 44
    1852:	fc e0       	ldi	r31, 0x0C	; 12
    1854:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x1c>
    1858:	8c 01       	movw	r16, r24
    185a:	fc 01       	movw	r30, r24
    185c:	11 82       	std	Z+1, r1	; 0x01
    185e:	10 82       	st	Z, r1
    1860:	13 82       	std	Z+3, r1	; 0x03
    1862:	12 82       	std	Z+2, r1	; 0x02
    1864:	15 82       	std	Z+5, r1	; 0x05
    1866:	14 82       	std	Z+4, r1	; 0x04
    1868:	17 82       	std	Z+7, r1	; 0x07
    186a:	16 82       	std	Z+6, r1	; 0x06
    186c:	61 31       	cpi	r22, 0x11	; 17
    186e:	18 f0       	brcs	.+6      	; 0x1876 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	80 87       	std	Z+8, r24	; 0x08
    1874:	02 c0       	rjmp	.+4      	; 0x187a <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1876:	fc 01       	movw	r30, r24
    1878:	60 87       	std	Z+8, r22	; 0x08
    187a:	f8 01       	movw	r30, r16
    187c:	20 8b       	std	Z+16, r18	; 0x10
    187e:	64 2f       	mov	r22, r20
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1888:	8f 81       	ldd	r24, Y+7	; 0x07
    188a:	f8 01       	movw	r30, r16
    188c:	81 87       	std	Z+9, r24	; 0x09
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	93 87       	std	Z+11, r25	; 0x0b
    1894:	82 87       	std	Z+10, r24	; 0x0a
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	95 87       	std	Z+13, r25	; 0x0d
    189c:	84 87       	std	Z+12, r24	; 0x0c
    189e:	27 96       	adiw	r28, 0x07	; 7
    18a0:	e4 e0       	ldi	r30, 0x04	; 4
    18a2:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x1c>

000018a6 <_ZN16PololuQTRSensors11emittersOffEv>:
    18a6:	fc 01       	movw	r30, r24
    18a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    18aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    18ac:	10 97       	sbiw	r26, 0x00	; 0
    18ae:	79 f0       	breq	.+30     	; 0x18ce <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    18b0:	8c 91       	ld	r24, X
    18b2:	91 85       	ldd	r25, Z+9	; 0x09
    18b4:	89 2b       	or	r24, r25
    18b6:	8c 93       	st	X, r24
    18b8:	a2 85       	ldd	r26, Z+10	; 0x0a
    18ba:	b3 85       	ldd	r27, Z+11	; 0x0b
    18bc:	9c 91       	ld	r25, X
    18be:	81 85       	ldd	r24, Z+9	; 0x09
    18c0:	80 95       	com	r24
    18c2:	89 23       	and	r24, r25
    18c4:	8c 93       	st	X, r24
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <delay_us>
    18ce:	08 95       	ret

000018d0 <_ZN16PololuQTRSensors10emittersOnEv>:
    18d0:	fc 01       	movw	r30, r24
    18d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    18d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    18d6:	10 97       	sbiw	r26, 0x00	; 0
    18d8:	71 f0       	breq	.+28     	; 0x18f6 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    18da:	8c 91       	ld	r24, X
    18dc:	91 85       	ldd	r25, Z+9	; 0x09
    18de:	89 2b       	or	r24, r25
    18e0:	8c 93       	st	X, r24
    18e2:	a2 85       	ldd	r26, Z+10	; 0x0a
    18e4:	b3 85       	ldd	r27, Z+11	; 0x0b
    18e6:	8c 91       	ld	r24, X
    18e8:	91 85       	ldd	r25, Z+9	; 0x09
    18ea:	89 2b       	or	r24, r25
    18ec:	8c 93       	st	X, r24
    18ee:	88 ec       	ldi	r24, 0xC8	; 200
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <delay_us>
    18f6:	08 95       	ret

000018f8 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    18f8:	a7 e0       	ldi	r26, 0x07	; 7
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e2 e8       	ldi	r30, 0x82	; 130
    18fe:	fc e0       	ldi	r31, 0x0C	; 12
    1900:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__prologue_saves__+0x6>
    1904:	7c 01       	movw	r14, r24
    1906:	4b 01       	movw	r8, r22
    1908:	64 2f       	mov	r22, r20
    190a:	39 01       	movw	r6, r18
    190c:	40 2f       	mov	r20, r16
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN16PololuQTRSensors4initEhhh>
    1914:	87 01       	movw	r16, r14
    1916:	0f 5b       	subi	r16, 0xBF	; 191
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	f8 01       	movw	r30, r16
    191c:	10 82       	st	Z, r1
    191e:	67 01       	movw	r12, r14
    1920:	f2 e4       	ldi	r31, 0x42	; 66
    1922:	cf 0e       	add	r12, r31
    1924:	d1 1c       	adc	r13, r1
    1926:	f6 01       	movw	r30, r12
    1928:	10 82       	st	Z, r1
    192a:	57 01       	movw	r10, r14
    192c:	f3 e4       	ldi	r31, 0x43	; 67
    192e:	af 0e       	add	r10, r31
    1930:	b1 1c       	adc	r11, r1
    1932:	f5 01       	movw	r30, r10
    1934:	10 82       	st	Z, r1
    1936:	f7 01       	movw	r30, r14
    1938:	77 86       	std	Z+15, r7	; 0x0f
    193a:	66 86       	std	Z+14, r6	; 0x0e
    193c:	51 2c       	mov	r5, r1
    193e:	f7 01       	movw	r30, r14
    1940:	80 85       	ldd	r24, Z+8	; 0x08
    1942:	58 16       	cp	r5, r24
    1944:	50 f5       	brcc	.+84     	; 0x199a <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1946:	65 2c       	mov	r6, r5
    1948:	71 2c       	mov	r7, r1
    194a:	f4 01       	movw	r30, r8
    194c:	e6 0d       	add	r30, r6
    194e:	f7 1d       	adc	r31, r7
    1950:	60 81       	ld	r22, Z
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    195a:	2f 81       	ldd	r18, Y+7	; 0x07
    195c:	f7 01       	movw	r30, r14
    195e:	e6 0d       	add	r30, r6
    1960:	f7 1d       	adc	r31, r7
    1962:	21 8b       	std	Z+17, r18	; 0x11
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	f3 01       	movw	r30, r6
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	ee 0d       	add	r30, r14
    1970:	ff 1d       	adc	r31, r15
    1972:	92 a3       	std	Z+34, r25	; 0x22
    1974:	81 a3       	std	Z+33, r24	; 0x21
    1976:	83 32       	cpi	r24, 0x23	; 35
    1978:	91 05       	cpc	r25, r1
    197a:	11 f4       	brne	.+4      	; 0x1980 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    197c:	f8 01       	movw	r30, r16
    197e:	08 c0       	rjmp	.+16     	; 0x1990 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1980:	86 32       	cpi	r24, 0x26	; 38
    1982:	91 05       	cpc	r25, r1
    1984:	11 f4       	brne	.+4      	; 0x198a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1986:	f6 01       	movw	r30, r12
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    198a:	89 97       	sbiw	r24, 0x29	; 41
    198c:	21 f4       	brne	.+8      	; 0x1996 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    198e:	f5 01       	movw	r30, r10
    1990:	80 81       	ld	r24, Z
    1992:	82 2b       	or	r24, r18
    1994:	80 83       	st	Z, r24
    1996:	53 94       	inc	r5
    1998:	d2 cf       	rjmp	.-92     	; 0x193e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    199a:	27 96       	adiw	r28, 0x07	; 7
    199c:	ef e0       	ldi	r30, 0x0F	; 15
    199e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__epilogue_restores__+0x6>

000019a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    19a2:	a0 e0       	ldi	r26, 0x00	; 0
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e7 ed       	ldi	r30, 0xD7	; 215
    19a8:	fc e0       	ldi	r31, 0x0C	; 12
    19aa:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0xa>
    19ae:	ec 01       	movw	r28, r24
    19b0:	5b 01       	movw	r10, r22
    19b2:	6c 01       	movw	r12, r24
    19b4:	81 e4       	ldi	r24, 0x41	; 65
    19b6:	c8 0e       	add	r12, r24
    19b8:	d1 1c       	adc	r13, r1
    19ba:	f6 01       	movw	r30, r12
    19bc:	80 80       	ld	r8, Z
    19be:	7e 01       	movw	r14, r28
    19c0:	f2 e4       	ldi	r31, 0x42	; 66
    19c2:	ef 0e       	add	r14, r31
    19c4:	f1 1c       	adc	r15, r1
    19c6:	f7 01       	movw	r30, r14
    19c8:	70 80       	ld	r7, Z
    19ca:	8e 01       	movw	r16, r28
    19cc:	0d 5b       	subi	r16, 0xBD	; 189
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	f8 01       	movw	r30, r16
    19d2:	90 80       	ld	r9, Z
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	98 85       	ldd	r25, Y+8	; 0x08
    19d8:	89 17       	cp	r24, r25
    19da:	48 f4       	brcc	.+18     	; 0x19ee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    19dc:	f5 01       	movw	r30, r10
    19de:	e8 0f       	add	r30, r24
    19e0:	f1 1d       	adc	r31, r1
    19e2:	e8 0f       	add	r30, r24
    19e4:	f1 1d       	adc	r31, r1
    19e6:	11 82       	std	Z+1, r1	; 0x01
    19e8:	10 82       	st	Z, r1
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	f4 cf       	rjmp	.-24     	; 0x19d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    19ee:	84 b1       	in	r24, 0x04	; 4
    19f0:	f6 01       	movw	r30, r12
    19f2:	90 81       	ld	r25, Z
    19f4:	89 2b       	or	r24, r25
    19f6:	84 b9       	out	0x04, r24	; 4
    19f8:	87 b1       	in	r24, 0x07	; 7
    19fa:	f7 01       	movw	r30, r14
    19fc:	90 81       	ld	r25, Z
    19fe:	89 2b       	or	r24, r25
    1a00:	87 b9       	out	0x07, r24	; 7
    1a02:	8a b1       	in	r24, 0x0a	; 10
    1a04:	f8 01       	movw	r30, r16
    1a06:	90 81       	ld	r25, Z
    1a08:	89 2b       	or	r24, r25
    1a0a:	8a b9       	out	0x0a, r24	; 10
    1a0c:	85 b1       	in	r24, 0x05	; 5
    1a0e:	f6 01       	movw	r30, r12
    1a10:	90 81       	ld	r25, Z
    1a12:	89 2b       	or	r24, r25
    1a14:	85 b9       	out	0x05, r24	; 5
    1a16:	88 b1       	in	r24, 0x08	; 8
    1a18:	f7 01       	movw	r30, r14
    1a1a:	90 81       	ld	r25, Z
    1a1c:	89 2b       	or	r24, r25
    1a1e:	88 b9       	out	0x08, r24	; 8
    1a20:	8b b1       	in	r24, 0x0b	; 11
    1a22:	f8 01       	movw	r30, r16
    1a24:	90 81       	ld	r25, Z
    1a26:	89 2b       	or	r24, r25
    1a28:	8b b9       	out	0x0b, r24	; 11
    1a2a:	8a e0       	ldi	r24, 0x0A	; 10
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <delay_us>
    1a32:	94 b1       	in	r25, 0x04	; 4
    1a34:	f6 01       	movw	r30, r12
    1a36:	80 81       	ld	r24, Z
    1a38:	80 95       	com	r24
    1a3a:	89 23       	and	r24, r25
    1a3c:	84 b9       	out	0x04, r24	; 4
    1a3e:	97 b1       	in	r25, 0x07	; 7
    1a40:	f7 01       	movw	r30, r14
    1a42:	80 81       	ld	r24, Z
    1a44:	80 95       	com	r24
    1a46:	89 23       	and	r24, r25
    1a48:	87 b9       	out	0x07, r24	; 7
    1a4a:	9a b1       	in	r25, 0x0a	; 10
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 95       	com	r24
    1a52:	89 23       	and	r24, r25
    1a54:	8a b9       	out	0x0a, r24	; 10
    1a56:	95 b1       	in	r25, 0x05	; 5
    1a58:	f6 01       	movw	r30, r12
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 95       	com	r24
    1a5e:	89 23       	and	r24, r25
    1a60:	85 b9       	out	0x05, r24	; 5
    1a62:	98 b1       	in	r25, 0x08	; 8
    1a64:	f7 01       	movw	r30, r14
    1a66:	80 81       	ld	r24, Z
    1a68:	80 95       	com	r24
    1a6a:	89 23       	and	r24, r25
    1a6c:	88 b9       	out	0x08, r24	; 8
    1a6e:	9b b1       	in	r25, 0x0b	; 11
    1a70:	f8 01       	movw	r30, r16
    1a72:	80 81       	ld	r24, Z
    1a74:	80 95       	com	r24
    1a76:	89 23       	and	r24, r25
    1a78:	8b b9       	out	0x0b, r24	; 11
    1a7a:	e0 90 b0 00 	lds	r14, 0x00B0
    1a7e:	d0 90 b1 00 	lds	r13, 0x00B1
    1a82:	80 91 b0 00 	lds	r24, 0x00B0
    1a86:	83 60       	ori	r24, 0x03	; 3
    1a88:	80 93 b0 00 	sts	0x00B0, r24
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	80 93 b1 00 	sts	0x00B1, r24
    1a92:	40 91 b2 00 	lds	r20, 0x00B2
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a9c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a9e:	82 17       	cp	r24, r18
    1aa0:	93 07       	cpc	r25, r19
    1aa2:	20 f5       	brcc	.+72     	; 0x1aec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1aa4:	c0 90 b2 00 	lds	r12, 0x00B2
    1aa8:	2c 2d       	mov	r18, r12
    1aaa:	24 1b       	sub	r18, r20
    1aac:	82 0f       	add	r24, r18
    1aae:	91 1d       	adc	r25, r1
    1ab0:	03 b1       	in	r16, 0x03	; 3
    1ab2:	08 11       	cpse	r16, r8
    1ab4:	32 c0       	rjmp	.+100    	; 0x1b1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1ab6:	f6 b0       	in	r15, 0x06	; 6
    1ab8:	f7 10       	cpse	r15, r7
    1aba:	2f c0       	rjmp	.+94     	; 0x1b1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1abc:	29 b1       	in	r18, 0x09	; 9
    1abe:	29 11       	cpse	r18, r9
    1ac0:	2c c0       	rjmp	.+88     	; 0x1b1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1ac2:	10 c0       	rjmp	.+32     	; 0x1ae4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1ac4:	21 2f       	mov	r18, r17
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	a9 01       	movw	r20, r18
    1aca:	44 0f       	add	r20, r20
    1acc:	55 1f       	adc	r21, r21
    1ace:	f5 01       	movw	r30, r10
    1ad0:	e4 0f       	add	r30, r20
    1ad2:	f5 1f       	adc	r31, r21
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	67 2b       	or	r22, r23
    1ada:	21 f1       	breq	.+72     	; 0x1b24 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1adc:	1f 5f       	subi	r17, 0xFF	; 255
    1ade:	28 85       	ldd	r18, Y+8	; 0x08
    1ae0:	12 17       	cp	r17, r18
    1ae2:	80 f3       	brcs	.-32     	; 0x1ac4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1ae4:	7f 2c       	mov	r7, r15
    1ae6:	80 2e       	mov	r8, r16
    1ae8:	4c 2d       	mov	r20, r12
    1aea:	d7 cf       	rjmp	.-82     	; 0x1a9a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1aec:	e0 92 b0 00 	sts	0x00B0, r14
    1af0:	d0 92 b1 00 	sts	0x00B1, r13
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	88 85       	ldd	r24, Y+8	; 0x08
    1af8:	28 17       	cp	r18, r24
    1afa:	30 f5       	brcc	.+76     	; 0x1b48 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1afc:	f5 01       	movw	r30, r10
    1afe:	e2 0f       	add	r30, r18
    1b00:	f1 1d       	adc	r31, r1
    1b02:	e2 0f       	add	r30, r18
    1b04:	f1 1d       	adc	r31, r1
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	89 2b       	or	r24, r25
    1b0c:	21 f4       	brne	.+8      	; 0x1b16 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	2f 5f       	subi	r18, 0xFF	; 255
    1b18:	ee cf       	rjmp	.-36     	; 0x1af6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1b1a:	03 b1       	in	r16, 0x03	; 3
    1b1c:	f6 b0       	in	r15, 0x06	; 6
    1b1e:	99 b0       	in	r9, 0x09	; 9
    1b20:	10 e0       	ldi	r17, 0x00	; 0
    1b22:	dd cf       	rjmp	.-70     	; 0x1ade <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1b24:	de 01       	movw	r26, r28
    1b26:	a4 0f       	add	r26, r20
    1b28:	b5 1f       	adc	r27, r21
    1b2a:	91 96       	adiw	r26, 0x21	; 33
    1b2c:	0d 90       	ld	r0, X+
    1b2e:	bc 91       	ld	r27, X
    1b30:	a0 2d       	mov	r26, r0
    1b32:	4c 91       	ld	r20, X
    1b34:	de 01       	movw	r26, r28
    1b36:	a2 0f       	add	r26, r18
    1b38:	b3 1f       	adc	r27, r19
    1b3a:	51 96       	adiw	r26, 0x11	; 17
    1b3c:	2c 91       	ld	r18, X
    1b3e:	42 23       	and	r20, r18
    1b40:	69 f6       	brne	.-102    	; 0x1adc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	ca cf       	rjmp	.-108    	; 0x1adc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	ed e0       	ldi	r30, 0x0D	; 13
    1b4e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0xa>

00001b52 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	fc 01       	movw	r30, r24
    1b60:	9b 01       	movw	r18, r22
    1b62:	f0 90 7c 00 	lds	r15, 0x007C
    1b66:	00 91 7a 00 	lds	r16, 0x007A
    1b6a:	47 b1       	in	r20, 0x07	; 7
    1b6c:	18 b1       	in	r17, 0x08	; 8
    1b6e:	80 91 7a 00 	lds	r24, 0x007A
    1b72:	86 fd       	sbrc	r24, 6
    1b74:	fc cf       	rjmp	.-8      	; 0x1b6e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 85       	ldd	r25, Z+8	; 0x08
    1b7a:	89 17       	cp	r24, r25
    1b7c:	48 f4       	brcc	.+18     	; 0x1b90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1b7e:	d9 01       	movw	r26, r18
    1b80:	a8 0f       	add	r26, r24
    1b82:	b1 1d       	adc	r27, r1
    1b84:	a8 0f       	add	r26, r24
    1b86:	b1 1d       	adc	r27, r1
    1b88:	1d 92       	st	X+, r1
    1b8a:	1c 92       	st	X, r1
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	f4 cf       	rjmp	.-24     	; 0x1b78 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1b90:	97 b1       	in	r25, 0x07	; 7
    1b92:	82 a1       	ldd	r24, Z+34	; 0x22
    1b94:	80 95       	com	r24
    1b96:	89 23       	and	r24, r25
    1b98:	87 b9       	out	0x07, r24	; 7
    1b9a:	98 b1       	in	r25, 0x08	; 8
    1b9c:	82 a1       	ldd	r24, Z+34	; 0x22
    1b9e:	80 95       	com	r24
    1ba0:	89 23       	and	r24, r25
    1ba2:	88 b9       	out	0x08, r24	; 8
    1ba4:	87 e8       	ldi	r24, 0x87	; 135
    1ba6:	80 93 7a 00 	sts	0x007A, r24
    1baa:	e1 2c       	mov	r14, r1
    1bac:	81 a1       	ldd	r24, Z+33	; 0x21
    1bae:	e8 16       	cp	r14, r24
    1bb0:	10 f0       	brcs	.+4      	; 0x1bb6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1bb2:	e1 2c       	mov	r14, r1
    1bb4:	29 c0       	rjmp	.+82     	; 0x1c08 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	80 85       	ldd	r24, Z+8	; 0x08
    1bba:	58 17       	cp	r21, r24
    1bbc:	18 f5       	brcc	.+70     	; 0x1c04 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1bbe:	a5 2f       	mov	r26, r21
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ef 01       	movw	r28, r30
    1bc4:	ca 0f       	add	r28, r26
    1bc6:	db 1f       	adc	r29, r27
    1bc8:	89 89       	ldd	r24, Y+17	; 0x11
    1bca:	80 64       	ori	r24, 0x40	; 64
    1bcc:	80 93 7c 00 	sts	0x007C, r24
    1bd0:	80 91 7a 00 	lds	r24, 0x007A
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	80 93 7a 00 	sts	0x007A, r24
    1bda:	80 91 7a 00 	lds	r24, 0x007A
    1bde:	86 fd       	sbrc	r24, 6
    1be0:	fc cf       	rjmp	.-8      	; 0x1bda <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1be2:	60 91 78 00 	lds	r22, 0x0078
    1be6:	70 91 79 00 	lds	r23, 0x0079
    1bea:	aa 0f       	add	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	a2 0f       	add	r26, r18
    1bf0:	b3 1f       	adc	r27, r19
    1bf2:	8d 91       	ld	r24, X+
    1bf4:	9c 91       	ld	r25, X
    1bf6:	11 97       	sbiw	r26, 0x01	; 1
    1bf8:	86 0f       	add	r24, r22
    1bfa:	97 1f       	adc	r25, r23
    1bfc:	8d 93       	st	X+, r24
    1bfe:	9c 93       	st	X, r25
    1c00:	5f 5f       	subi	r21, 0xFF	; 255
    1c02:	da cf       	rjmp	.-76     	; 0x1bb8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1c04:	e3 94       	inc	r14
    1c06:	d2 cf       	rjmp	.-92     	; 0x1bac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1c08:	80 85       	ldd	r24, Z+8	; 0x08
    1c0a:	e8 16       	cp	r14, r24
    1c0c:	a0 f4       	brcc	.+40     	; 0x1c36 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1c0e:	e9 01       	movw	r28, r18
    1c10:	ce 0d       	add	r28, r14
    1c12:	d1 1d       	adc	r29, r1
    1c14:	ce 0d       	add	r28, r14
    1c16:	d1 1d       	adc	r29, r1
    1c18:	61 a1       	ldd	r22, Z+33	; 0x21
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	95 95       	asr	r25
    1c20:	87 95       	ror	r24
    1c22:	a8 81       	ld	r26, Y
    1c24:	b9 81       	ldd	r27, Y+1	; 0x01
    1c26:	8a 0f       	add	r24, r26
    1c28:	9b 1f       	adc	r25, r27
    1c2a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
    1c2e:	79 83       	std	Y+1, r23	; 0x01
    1c30:	68 83       	st	Y, r22
    1c32:	e3 94       	inc	r14
    1c34:	e9 cf       	rjmp	.-46     	; 0x1c08 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1c36:	f0 92 7c 00 	sts	0x007C, r15
    1c3a:	00 93 7a 00 	sts	0x007A, r16
    1c3e:	18 b9       	out	0x08, r17	; 8
    1c40:	47 b9       	out	0x07, r20	; 7
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	e6 e0       	ldi	r30, 0x06	; 6
    1c48:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x18>

00001c4c <_ZN16PololuQTRSensors4readEPjh>:
    1c4c:	a0 e2       	ldi	r26, 0x20	; 32
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ec e2       	ldi	r30, 0x2C	; 44
    1c52:	fe e0       	ldi	r31, 0x0E	; 14
    1c54:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__+0x16>
    1c58:	8c 01       	movw	r16, r24
    1c5a:	7b 01       	movw	r14, r22
    1c5c:	d4 2e       	mov	r13, r20
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	84 0f       	add	r24, r20
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	18 f4       	brcc	.+6      	; 0x1c6c <_ZN16PololuQTRSensors4readEPjh+0x20>
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN16PololuQTRSensors10emittersOnEv>
    1c6c:	d8 01       	movw	r26, r16
    1c6e:	50 96       	adiw	r26, 0x10	; 16
    1c70:	8c 91       	ld	r24, X
    1c72:	b7 01       	movw	r22, r14
    1c74:	81 11       	cpse	r24, r1
    1c76:	10 c0       	rjmp	.+32     	; 0x1c98 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1c78:	c8 01       	movw	r24, r16
    1c7a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN16PololuQTRSensors11emittersOffEv>
    1c84:	b2 e0       	ldi	r27, 0x02	; 2
    1c86:	db 12       	cpse	r13, r27
    1c88:	3a c0       	rjmp	.+116    	; 0x1cfe <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c8a:	be 01       	movw	r22, r28
    1c8c:	6f 5f       	subi	r22, 0xFF	; 255
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	c8 01       	movw	r24, r16
    1c92:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1c98:	c8 01       	movw	r24, r16
    1c9a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c9e:	c8 01       	movw	r24, r16
    1ca0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN16PololuQTRSensors11emittersOffEv>
    1ca4:	e2 e0       	ldi	r30, 0x02	; 2
    1ca6:	de 12       	cpse	r13, r30
    1ca8:	2a c0       	rjmp	.+84     	; 0x1cfe <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1caa:	be 01       	movw	r22, r28
    1cac:	6f 5f       	subi	r22, 0xFF	; 255
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	f8 01       	movw	r30, r16
    1cba:	80 85       	ldd	r24, Z+8	; 0x08
    1cbc:	48 17       	cp	r20, r24
    1cbe:	f8 f4       	brcc	.+62     	; 0x1cfe <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1cc0:	84 2f       	mov	r24, r20
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	f7 01       	movw	r30, r14
    1cca:	e8 0f       	add	r30, r24
    1ccc:	f9 1f       	adc	r31, r25
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	2c 0f       	add	r18, r28
    1cd4:	3d 1f       	adc	r19, r29
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	d8 01       	movw	r26, r16
    1cdc:	1e 96       	adiw	r26, 0x0e	; 14
    1cde:	2d 91       	ld	r18, X+
    1ce0:	3c 91       	ld	r19, X
    1ce2:	1f 97       	sbiw	r26, 0x0f	; 15
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	8d 91       	ld	r24, X+
    1ce8:	9c 91       	ld	r25, X
    1cea:	28 1b       	sub	r18, r24
    1cec:	39 0b       	sbc	r19, r25
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	82 0f       	add	r24, r18
    1cf4:	93 1f       	adc	r25, r19
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	80 83       	st	Z, r24
    1cfa:	4f 5f       	subi	r20, 0xFF	; 255
    1cfc:	dd cf       	rjmp	.-70     	; 0x1cb8 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1cfe:	a0 96       	adiw	r28, 0x20	; 32
    1d00:	e7 e0       	ldi	r30, 0x07	; 7
    1d02:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__+0x16>

00001d06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1d06:	2f 92       	push	r2
    1d08:	3f 92       	push	r3
    1d0a:	5f 92       	push	r5
    1d0c:	6f 92       	push	r6
    1d0e:	7f 92       	push	r7
    1d10:	8f 92       	push	r8
    1d12:	9f 92       	push	r9
    1d14:	af 92       	push	r10
    1d16:	bf 92       	push	r11
    1d18:	cf 92       	push	r12
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	c0 56       	subi	r28, 0x60	; 96
    1d2e:	d1 09       	sbc	r29, r1
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	4b 01       	movw	r8, r22
    1d3e:	5a 01       	movw	r10, r20
    1d40:	52 2e       	mov	r5, r18
    1d42:	da 01       	movw	r26, r20
    1d44:	8d 91       	ld	r24, X+
    1d46:	9c 91       	ld	r25, X
    1d48:	89 2b       	or	r24, r25
    1d4a:	31 f0       	breq	.+12     	; 0x1d58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1d4c:	f4 01       	movw	r30, r8
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	89 2b       	or	r24, r25
    1d54:	f1 f4       	brne	.+60     	; 0x1d92 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1d56:	24 c0       	rjmp	.+72     	; 0x1da0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1d58:	d8 01       	movw	r26, r16
    1d5a:	18 96       	adiw	r26, 0x08	; 8
    1d5c:	8c 91       	ld	r24, X
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0e 94 bc 11 	call	0x2378	; 0x2378 <malloc>
    1d68:	f5 01       	movw	r30, r10
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1d72:	b1 c0       	rjmp	.+354    	; 0x1ed6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1d74:	fc 01       	movw	r30, r24
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	d8 01       	movw	r26, r16
    1d7c:	18 96       	adiw	r26, 0x08	; 8
    1d7e:	8c 91       	ld	r24, X
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	28 17       	cp	r18, r24
    1d84:	39 07       	cpc	r19, r25
    1d86:	14 f7       	brge	.-60     	; 0x1d4c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1d88:	11 92       	st	Z+, r1
    1d8a:	11 92       	st	Z+, r1
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	f4 cf       	rjmp	.-24     	; 0x1d7a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1d92:	e1 2c       	mov	r14, r1
    1d94:	f1 2c       	mov	r15, r1
    1d96:	6e 01       	movw	r12, r28
    1d98:	b1 e2       	ldi	r27, 0x21	; 33
    1d9a:	cb 0e       	add	r12, r27
    1d9c:	d1 1c       	adc	r13, r1
    1d9e:	21 c0       	rjmp	.+66     	; 0x1de2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1da0:	f8 01       	movw	r30, r16
    1da2:	80 85       	ldd	r24, Z+8	; 0x08
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0e 94 bc 11 	call	0x2378	; 0x2378 <malloc>
    1dae:	d4 01       	movw	r26, r8
    1db0:	8d 93       	st	X+, r24
    1db2:	9c 93       	st	X, r25
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f4       	brne	.+2      	; 0x1dba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1db8:	8e c0       	rjmp	.+284    	; 0x1ed6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1dba:	fc 01       	movw	r30, r24
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	d8 01       	movw	r26, r16
    1dc2:	18 96       	adiw	r26, 0x08	; 8
    1dc4:	8c 91       	ld	r24, X
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	28 17       	cp	r18, r24
    1dca:	39 07       	cpc	r19, r25
    1dcc:	14 f7       	brge	.-60     	; 0x1d92 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1dce:	d8 01       	movw	r26, r16
    1dd0:	1e 96       	adiw	r26, 0x0e	; 14
    1dd2:	8d 91       	ld	r24, X+
    1dd4:	9c 91       	ld	r25, X
    1dd6:	1f 97       	sbiw	r26, 0x0f	; 15
    1dd8:	81 93       	st	Z+, r24
    1dda:	91 93       	st	Z+, r25
    1ddc:	2f 5f       	subi	r18, 0xFF	; 255
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	ef cf       	rjmp	.-34     	; 0x1dc0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1de2:	45 2d       	mov	r20, r5
    1de4:	be 01       	movw	r22, r28
    1de6:	6f 5b       	subi	r22, 0xBF	; 191
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	c8 01       	movw	r24, r16
    1dec:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZN16PololuQTRSensors4readEPjh>
    1df0:	f8 01       	movw	r30, r16
    1df2:	60 84       	ldd	r6, Z+8	; 0x08
    1df4:	71 2c       	mov	r7, r1
    1df6:	fe 01       	movw	r30, r28
    1df8:	ef 5b       	subi	r30, 0xBF	; 191
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	c6 01       	movw	r24, r12
    1dfe:	9e 01       	movw	r18, r28
    1e00:	2f 5f       	subi	r18, 0xFF	; 255
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	19 01       	movw	r2, r18
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	26 15       	cp	r18, r6
    1e0c:	37 05       	cpc	r19, r7
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1e10:	e1 14       	cp	r14, r1
    1e12:	f1 04       	cpc	r15, r1
    1e14:	89 f0       	breq	.+34     	; 0x1e38 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1e16:	dc 01       	movw	r26, r24
    1e18:	6d 91       	ld	r22, X+
    1e1a:	7c 91       	ld	r23, X
    1e1c:	40 81       	ld	r20, Z
    1e1e:	51 81       	ldd	r21, Z+1	; 0x01
    1e20:	64 17       	cp	r22, r20
    1e22:	75 07       	cpc	r23, r21
    1e24:	48 f0       	brcs	.+18     	; 0x1e38 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1e26:	d1 01       	movw	r26, r2
    1e28:	6d 91       	ld	r22, X+
    1e2a:	7c 91       	ld	r23, X
    1e2c:	40 81       	ld	r20, Z
    1e2e:	51 81       	ldd	r21, Z+1	; 0x01
    1e30:	46 17       	cp	r20, r22
    1e32:	57 07       	cpc	r21, r23
    1e34:	48 f0       	brcs	.+18     	; 0x1e48 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1e36:	0d c0       	rjmp	.+26     	; 0x1e52 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1e38:	40 81       	ld	r20, Z
    1e3a:	51 81       	ldd	r21, Z+1	; 0x01
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	4d 93       	st	X+, r20
    1e40:	5c 93       	st	X, r21
    1e42:	e1 14       	cp	r14, r1
    1e44:	f1 04       	cpc	r15, r1
    1e46:	79 f7       	brne	.-34     	; 0x1e26 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1e48:	40 81       	ld	r20, Z
    1e4a:	51 81       	ldd	r21, Z+1	; 0x01
    1e4c:	d1 01       	movw	r26, r2
    1e4e:	4d 93       	st	X+, r20
    1e50:	5c 93       	st	X, r21
    1e52:	2f 5f       	subi	r18, 0xFF	; 255
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	b2 e0       	ldi	r27, 0x02	; 2
    1e58:	2b 0e       	add	r2, r27
    1e5a:	31 1c       	adc	r3, r1
    1e5c:	32 96       	adiw	r30, 0x02	; 2
    1e5e:	02 96       	adiw	r24, 0x02	; 2
    1e60:	d4 cf       	rjmp	.-88     	; 0x1e0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1e62:	ef ef       	ldi	r30, 0xFF	; 255
    1e64:	ee 1a       	sub	r14, r30
    1e66:	fe 0a       	sbc	r15, r30
    1e68:	fa e0       	ldi	r31, 0x0A	; 10
    1e6a:	ef 16       	cp	r14, r31
    1e6c:	f1 04       	cpc	r15, r1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1e70:	b8 cf       	rjmp	.-144    	; 0x1de2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e72:	9e 01       	movw	r18, r28
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	79 01       	movw	r14, r18
    1e7a:	36 01       	movw	r6, r12
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	f8 01       	movw	r30, r16
    1e82:	20 85       	ldd	r18, Z+8	; 0x08
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	82 17       	cp	r24, r18
    1e88:	93 07       	cpc	r25, r19
    1e8a:	2c f5       	brge	.+74     	; 0x1ed6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e8c:	d7 01       	movw	r26, r14
    1e8e:	2d 91       	ld	r18, X+
    1e90:	3d 91       	ld	r19, X+
    1e92:	7d 01       	movw	r14, r26
    1e94:	b3 01       	movw	r22, r6
    1e96:	6c 19       	sub	r22, r12
    1e98:	7d 09       	sbc	r23, r13
    1e9a:	d5 01       	movw	r26, r10
    1e9c:	ed 91       	ld	r30, X+
    1e9e:	fc 91       	ld	r31, X
    1ea0:	e6 0f       	add	r30, r22
    1ea2:	f7 1f       	adc	r31, r23
    1ea4:	40 81       	ld	r20, Z
    1ea6:	51 81       	ldd	r21, Z+1	; 0x01
    1ea8:	42 17       	cp	r20, r18
    1eaa:	53 07       	cpc	r21, r19
    1eac:	10 f4       	brcc	.+4      	; 0x1eb2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1eae:	31 83       	std	Z+1, r19	; 0x01
    1eb0:	20 83       	st	Z, r18
    1eb2:	f3 01       	movw	r30, r6
    1eb4:	21 91       	ld	r18, Z+
    1eb6:	31 91       	ld	r19, Z+
    1eb8:	3f 01       	movw	r6, r30
    1eba:	d4 01       	movw	r26, r8
    1ebc:	ed 91       	ld	r30, X+
    1ebe:	fc 91       	ld	r31, X
    1ec0:	e6 0f       	add	r30, r22
    1ec2:	f7 1f       	adc	r31, r23
    1ec4:	40 81       	ld	r20, Z
    1ec6:	51 81       	ldd	r21, Z+1	; 0x01
    1ec8:	24 17       	cp	r18, r20
    1eca:	35 07       	cpc	r19, r21
    1ecc:	10 f4       	brcc	.+4      	; 0x1ed2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1ece:	31 83       	std	Z+1, r19	; 0x01
    1ed0:	20 83       	st	Z, r18
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	d5 cf       	rjmp	.-86     	; 0x1e80 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1ed6:	c0 5a       	subi	r28, 0xA0	; 160
    1ed8:	df 4f       	sbci	r29, 0xFF	; 255
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	df 90       	pop	r13
    1ef2:	cf 90       	pop	r12
    1ef4:	bf 90       	pop	r11
    1ef6:	af 90       	pop	r10
    1ef8:	9f 90       	pop	r9
    1efa:	8f 90       	pop	r8
    1efc:	7f 90       	pop	r7
    1efe:	6f 90       	pop	r6
    1f00:	5f 90       	pop	r5
    1f02:	3f 90       	pop	r3
    1f04:	2f 90       	pop	r2
    1f06:	08 95       	ret

00001f08 <_ZN16PololuQTRSensors9calibrateEh>:
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	ec 01       	movw	r28, r24
    1f10:	16 2f       	mov	r17, r22
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	86 0f       	add	r24, r22
    1f16:	82 30       	cpi	r24, 0x02	; 2
    1f18:	18 f0       	brcs	.+6      	; 0x1f20 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1f1a:	66 23       	and	r22, r22
    1f1c:	59 f0       	breq	.+22     	; 0x1f34 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1f20:	21 e0       	ldi	r18, 0x01	; 1
    1f22:	ae 01       	movw	r20, r28
    1f24:	4e 5f       	subi	r20, 0xFE	; 254
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	be 01       	movw	r22, r28
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1f30:	12 30       	cpi	r17, 0x02	; 2
    1f32:	51 f4       	brne	.+20     	; 0x1f48 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1f34:	ae 01       	movw	r20, r28
    1f36:	4a 5f       	subi	r20, 0xFA	; 250
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	be 01       	movw	r22, r28
    1f3c:	6c 5f       	subi	r22, 0xFC	; 252
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	ce 01       	movw	r24, r28
    1f44:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	08 95       	ret

00001f50 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ee ea       	ldi	r30, 0xAE	; 174
    1f56:	ff e0       	ldi	r31, 0x0F	; 15
    1f58:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__prologue_saves__+0x12>
    1f5c:	ec 01       	movw	r28, r24
    1f5e:	8b 01       	movw	r16, r22
    1f60:	b4 2e       	mov	r11, r20
    1f62:	84 2f       	mov	r24, r20
    1f64:	8d 7f       	andi	r24, 0xFD	; 253
    1f66:	51 f4       	brne	.+20     	; 0x1f7c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6c:	89 2b       	or	r24, r25
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    1f70:	97 c0       	rjmp	.+302    	; 0x20a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f72:	8e 81       	ldd	r24, Y+6	; 0x06
    1f74:	9f 81       	ldd	r25, Y+7	; 0x07
    1f76:	89 2b       	or	r24, r25
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1f7a:	92 c0       	rjmp	.+292    	; 0x20a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	8b 0d       	add	r24, r11
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	50 f4       	brcc	.+20     	; 0x1f98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1f84:	88 81       	ld	r24, Y
    1f86:	99 81       	ldd	r25, Y+1	; 0x01
    1f88:	89 2b       	or	r24, r25
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    1f8c:	89 c0       	rjmp	.+274    	; 0x20a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	89 2b       	or	r24, r25
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1f96:	84 c0       	rjmp	.+264    	; 0x20a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f98:	4b 2d       	mov	r20, r11
    1f9a:	b8 01       	movw	r22, r16
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_ZN16PololuQTRSensors4readEPjh>
    1fa2:	78 01       	movw	r14, r16
    1fa4:	00 e0       	ldi	r16, 0x00	; 0
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	c1 2c       	mov	r12, r1
    1faa:	d1 2c       	mov	r13, r1
    1fac:	88 85       	ldd	r24, Y+8	; 0x08
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	c8 16       	cp	r12, r24
    1fb2:	d9 06       	cpc	r13, r25
    1fb4:	0c f0       	brlt	.+2      	; 0x1fb8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    1fb6:	74 c0       	rjmp	.+232    	; 0x20a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	b8 12       	cpse	r11, r24
    1fbc:	0a c0       	rjmp	.+20     	; 0x1fd2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    1fbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc2:	e0 0f       	add	r30, r16
    1fc4:	f1 1f       	adc	r31, r17
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	f0 81       	ld	r31, Z
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	a8 81       	ld	r26, Y
    1fce:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd8:	3f 81       	ldd	r19, Y+7	; 0x07
    1fda:	b1 10       	cpse	r11, r1
    1fdc:	0c c0       	rjmp	.+24     	; 0x1ff6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1fde:	f9 01       	movw	r30, r18
    1fe0:	e0 0f       	add	r30, r16
    1fe2:	f1 1f       	adc	r31, r17
    1fe4:	01 90       	ld	r0, Z+
    1fe6:	f0 81       	ld	r31, Z
    1fe8:	e0 2d       	mov	r30, r0
    1fea:	dc 01       	movw	r26, r24
    1fec:	a0 0f       	add	r26, r16
    1fee:	b1 1f       	adc	r27, r17
    1ff0:	8d 91       	ld	r24, X+
    1ff2:	9c 91       	ld	r25, X
    1ff4:	28 c0       	rjmp	.+80     	; 0x2046 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	e0 0f       	add	r30, r16
    1ffa:	f1 1f       	adc	r31, r17
    1ffc:	40 81       	ld	r20, Z
    1ffe:	51 81       	ldd	r21, Z+1	; 0x01
    2000:	e8 81       	ld	r30, Y
    2002:	f9 81       	ldd	r31, Y+1	; 0x01
    2004:	e0 0f       	add	r30, r16
    2006:	f1 1f       	adc	r31, r17
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	ee 85       	ldd	r30, Y+14	; 0x0e
    200e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2010:	48 17       	cp	r20, r24
    2012:	59 07       	cpc	r21, r25
    2014:	10 f4       	brcc	.+4      	; 0x201a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2016:	cf 01       	movw	r24, r30
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    201a:	8e 0f       	add	r24, r30
    201c:	9f 1f       	adc	r25, r31
    201e:	84 1b       	sub	r24, r20
    2020:	95 0b       	sbc	r25, r21
    2022:	d9 01       	movw	r26, r18
    2024:	a0 0f       	add	r26, r16
    2026:	b1 1f       	adc	r27, r17
    2028:	2d 91       	ld	r18, X+
    202a:	3c 91       	ld	r19, X
    202c:	aa 81       	ldd	r26, Y+2	; 0x02
    202e:	bb 81       	ldd	r27, Y+3	; 0x03
    2030:	a0 0f       	add	r26, r16
    2032:	b1 1f       	adc	r27, r17
    2034:	4d 91       	ld	r20, X+
    2036:	5c 91       	ld	r21, X
    2038:	24 17       	cp	r18, r20
    203a:	35 07       	cpc	r19, r21
    203c:	20 f0       	brcs	.+8      	; 0x2046 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    203e:	e4 0f       	add	r30, r20
    2040:	f5 1f       	adc	r31, r21
    2042:	e2 1b       	sub	r30, r18
    2044:	f3 0b       	sbc	r31, r19
    2046:	e8 1b       	sub	r30, r24
    2048:	f9 0b       	sbc	r31, r25
    204a:	a9 f0       	breq	.+42     	; 0x2076 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    204c:	d7 01       	movw	r26, r14
    204e:	2d 91       	ld	r18, X+
    2050:	3c 91       	ld	r19, X
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	28 1b       	sub	r18, r24
    2058:	39 0b       	sbc	r19, r25
    205a:	41 09       	sbc	r20, r1
    205c:	51 09       	sbc	r21, r1
    205e:	a8 ee       	ldi	r26, 0xE8	; 232
    2060:	b3 e0       	ldi	r27, 0x03	; 3
    2062:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__muluhisi3>
    2066:	9f 01       	movw	r18, r30
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	0e 94 3e 11 	call	0x227c	; 0x227c <__divmodsi4>
    2070:	37 fd       	sbrc	r19, 7
    2072:	0a c0       	rjmp	.+20     	; 0x2088 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2074:	02 c0       	rjmp	.+4      	; 0x207a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	29 3e       	cpi	r18, 0xE9	; 233
    207c:	b3 e0       	ldi	r27, 0x03	; 3
    207e:	3b 07       	cpc	r19, r27
    2080:	2c f0       	brlt	.+10     	; 0x208c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2082:	28 ee       	ldi	r18, 0xE8	; 232
    2084:	33 e0       	ldi	r19, 0x03	; 3
    2086:	02 c0       	rjmp	.+4      	; 0x208c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	f7 01       	movw	r30, r14
    208e:	21 93       	st	Z+, r18
    2090:	31 93       	st	Z+, r19
    2092:	7f 01       	movw	r14, r30
    2094:	ff ef       	ldi	r31, 0xFF	; 255
    2096:	cf 1a       	sub	r12, r31
    2098:	df 0a       	sbc	r13, r31
    209a:	0e 5f       	subi	r16, 0xFE	; 254
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	86 cf       	rjmp	.-244    	; 0x1fac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	e9 e0       	ldi	r30, 0x09	; 9
    20a6:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__epilogue_restores__+0x12>

000020aa <_ZN16PololuQTRSensors8readLineEPjhh>:
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e5       	ldi	r30, 0x5B	; 91
    20b0:	f0 e1       	ldi	r31, 0x10	; 16
    20b2:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__>
    20b6:	ec 01       	movw	r28, r24
    20b8:	8b 01       	movw	r16, r22
    20ba:	82 2e       	mov	r8, r18
    20bc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    20c0:	28 84       	ldd	r2, Y+8	; 0x08
    20c2:	e8 01       	movw	r28, r16
    20c4:	41 2c       	mov	r4, r1
    20c6:	51 2c       	mov	r5, r1
    20c8:	32 01       	movw	r6, r4
    20ca:	00 e0       	ldi	r16, 0x00	; 0
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	c1 2c       	mov	r12, r1
    20d0:	d1 2c       	mov	r13, r1
    20d2:	76 01       	movw	r14, r12
    20d4:	31 2c       	mov	r3, r1
    20d6:	91 2c       	mov	r9, r1
    20d8:	58 ee       	ldi	r21, 0xE8	; 232
    20da:	a5 2e       	mov	r10, r21
    20dc:	53 e0       	ldi	r21, 0x03	; 3
    20de:	b5 2e       	mov	r11, r21
    20e0:	92 14       	cp	r9, r2
    20e2:	21 f1       	breq	.+72     	; 0x212c <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    20e4:	e9 91       	ld	r30, Y+
    20e6:	f9 91       	ld	r31, Y+
    20e8:	88 20       	and	r8, r8
    20ea:	21 f0       	breq	.+8      	; 0x20f4 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    20ec:	c5 01       	movw	r24, r10
    20ee:	8e 1b       	sub	r24, r30
    20f0:	9f 0b       	sbc	r25, r31
    20f2:	fc 01       	movw	r30, r24
    20f4:	e9 3c       	cpi	r30, 0xC9	; 201
    20f6:	f1 05       	cpc	r31, r1
    20f8:	24 f4       	brge	.+8      	; 0x2102 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    20fa:	e3 33       	cpi	r30, 0x33	; 51
    20fc:	f1 05       	cpc	r31, r1
    20fe:	74 f0       	brlt	.+28     	; 0x211c <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2102:	33 24       	eor	r3, r3
    2104:	33 94       	inc	r3
    2106:	df 01       	movw	r26, r30
    2108:	a3 01       	movw	r20, r6
    210a:	92 01       	movw	r18, r4
    210c:	0e 94 77 11 	call	0x22ee	; 0x22ee <__mulshisi3>
    2110:	c6 0e       	add	r12, r22
    2112:	d7 1e       	adc	r13, r23
    2114:	e8 1e       	adc	r14, r24
    2116:	f9 1e       	adc	r15, r25
    2118:	0e 0f       	add	r16, r30
    211a:	1f 1f       	adc	r17, r31
    211c:	93 94       	inc	r9
    211e:	98 ee       	ldi	r25, 0xE8	; 232
    2120:	49 0e       	add	r4, r25
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	59 1e       	adc	r5, r25
    2126:	61 1c       	adc	r6, r1
    2128:	71 1c       	adc	r7, r1
    212a:	da cf       	rjmp	.-76     	; 0x20e0 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    212c:	31 10       	cpse	r3, r1
    212e:	1e c0       	rjmp	.+60     	; 0x216c <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2130:	49 2d       	mov	r20, r9
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	41 50       	subi	r20, 0x01	; 1
    2136:	51 09       	sbc	r21, r1
    2138:	24 ef       	ldi	r18, 0xF4	; 244
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	42 9f       	mul	r20, r18
    213e:	c0 01       	movw	r24, r0
    2140:	43 9f       	mul	r20, r19
    2142:	90 0d       	add	r25, r0
    2144:	52 9f       	mul	r21, r18
    2146:	90 0d       	add	r25, r0
    2148:	11 24       	eor	r1, r1
    214a:	20 91 c5 01 	lds	r18, 0x01C5
    214e:	30 91 c6 01 	lds	r19, 0x01C6
    2152:	28 17       	cp	r18, r24
    2154:	39 07       	cpc	r19, r25
    2156:	b4 f0       	brlt	.+44     	; 0x2184 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2158:	88 ee       	ldi	r24, 0xE8	; 232
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	48 9f       	mul	r20, r24
    215e:	90 01       	movw	r18, r0
    2160:	49 9f       	mul	r20, r25
    2162:	30 0d       	add	r19, r0
    2164:	58 9f       	mul	r21, r24
    2166:	30 0d       	add	r19, r0
    2168:	11 24       	eor	r1, r1
    216a:	0e c0       	rjmp	.+28     	; 0x2188 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    216c:	98 01       	movw	r18, r16
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
    217a:	30 93 c6 01 	sts	0x01C6, r19
    217e:	20 93 c5 01 	sts	0x01C5, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	c9 01       	movw	r24, r18
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	e2 e1       	ldi	r30, 0x12	; 18
    2190:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__>

00002194 <_ZN16PololuQTRSensorsD1Ev>:
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	ec 01       	movw	r28, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <_ZN16PololuQTRSensorsD1Ev+0x12>
    21a2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <free>
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9f 81       	ldd	r25, Y+7	; 0x07
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	11 f0       	breq	.+4      	; 0x21b2 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    21ae:	0e 94 51 12 	call	0x24a2	; 0x24a2 <free>
    21b2:	88 81       	ld	r24, Y
    21b4:	99 81       	ldd	r25, Y+1	; 0x01
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	11 f0       	breq	.+4      	; 0x21be <_ZN16PololuQTRSensorsD1Ev+0x2a>
    21ba:	0e 94 51 12 	call	0x24a2	; 0x24a2 <free>
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	11 f0       	breq	.+4      	; 0x21ca <_ZN16PololuQTRSensorsD1Ev+0x36>
    21c6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <free>
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <__udivmodqi4>:
    21d0:	99 1b       	sub	r25, r25
    21d2:	79 e0       	ldi	r23, 0x09	; 9
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <__udivmodqi4_ep>

000021d6 <__udivmodqi4_loop>:
    21d6:	99 1f       	adc	r25, r25
    21d8:	96 17       	cp	r25, r22
    21da:	08 f0       	brcs	.+2      	; 0x21de <__udivmodqi4_ep>
    21dc:	96 1b       	sub	r25, r22

000021de <__udivmodqi4_ep>:
    21de:	88 1f       	adc	r24, r24
    21e0:	7a 95       	dec	r23
    21e2:	c9 f7       	brne	.-14     	; 0x21d6 <__udivmodqi4_loop>
    21e4:	80 95       	com	r24
    21e6:	08 95       	ret

000021e8 <__udivmodhi4>:
    21e8:	aa 1b       	sub	r26, r26
    21ea:	bb 1b       	sub	r27, r27
    21ec:	51 e1       	ldi	r21, 0x11	; 17
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <__udivmodhi4_ep>

000021f0 <__udivmodhi4_loop>:
    21f0:	aa 1f       	adc	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	a6 17       	cp	r26, r22
    21f6:	b7 07       	cpc	r27, r23
    21f8:	10 f0       	brcs	.+4      	; 0x21fe <__udivmodhi4_ep>
    21fa:	a6 1b       	sub	r26, r22
    21fc:	b7 0b       	sbc	r27, r23

000021fe <__udivmodhi4_ep>:
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	5a 95       	dec	r21
    2204:	a9 f7       	brne	.-22     	; 0x21f0 <__udivmodhi4_loop>
    2206:	80 95       	com	r24
    2208:	90 95       	com	r25
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	08 95       	ret

00002210 <__divmodhi4>:
    2210:	97 fb       	bst	r25, 7
    2212:	07 2e       	mov	r0, r23
    2214:	16 f4       	brtc	.+4      	; 0x221a <__divmodhi4+0xa>
    2216:	00 94       	com	r0
    2218:	07 d0       	rcall	.+14     	; 0x2228 <__divmodhi4_neg1>
    221a:	77 fd       	sbrc	r23, 7
    221c:	09 d0       	rcall	.+18     	; 0x2230 <__divmodhi4_neg2>
    221e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
    2222:	07 fc       	sbrc	r0, 7
    2224:	05 d0       	rcall	.+10     	; 0x2230 <__divmodhi4_neg2>
    2226:	3e f4       	brtc	.+14     	; 0x2236 <__divmodhi4_exit>

00002228 <__divmodhi4_neg1>:
    2228:	90 95       	com	r25
    222a:	81 95       	neg	r24
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	08 95       	ret

00002230 <__divmodhi4_neg2>:
    2230:	70 95       	com	r23
    2232:	61 95       	neg	r22
    2234:	7f 4f       	sbci	r23, 0xFF	; 255

00002236 <__divmodhi4_exit>:
    2236:	08 95       	ret

00002238 <__udivmodsi4>:
    2238:	a1 e2       	ldi	r26, 0x21	; 33
    223a:	1a 2e       	mov	r1, r26
    223c:	aa 1b       	sub	r26, r26
    223e:	bb 1b       	sub	r27, r27
    2240:	fd 01       	movw	r30, r26
    2242:	0d c0       	rjmp	.+26     	; 0x225e <__udivmodsi4_ep>

00002244 <__udivmodsi4_loop>:
    2244:	aa 1f       	adc	r26, r26
    2246:	bb 1f       	adc	r27, r27
    2248:	ee 1f       	adc	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	a2 17       	cp	r26, r18
    224e:	b3 07       	cpc	r27, r19
    2250:	e4 07       	cpc	r30, r20
    2252:	f5 07       	cpc	r31, r21
    2254:	20 f0       	brcs	.+8      	; 0x225e <__udivmodsi4_ep>
    2256:	a2 1b       	sub	r26, r18
    2258:	b3 0b       	sbc	r27, r19
    225a:	e4 0b       	sbc	r30, r20
    225c:	f5 0b       	sbc	r31, r21

0000225e <__udivmodsi4_ep>:
    225e:	66 1f       	adc	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	1a 94       	dec	r1
    2268:	69 f7       	brne	.-38     	; 0x2244 <__udivmodsi4_loop>
    226a:	60 95       	com	r22
    226c:	70 95       	com	r23
    226e:	80 95       	com	r24
    2270:	90 95       	com	r25
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	bd 01       	movw	r22, r26
    2278:	cf 01       	movw	r24, r30
    227a:	08 95       	ret

0000227c <__divmodsi4>:
    227c:	05 2e       	mov	r0, r21
    227e:	97 fb       	bst	r25, 7
    2280:	1e f4       	brtc	.+6      	; 0x2288 <__divmodsi4+0xc>
    2282:	00 94       	com	r0
    2284:	0e 94 55 11 	call	0x22aa	; 0x22aa <__negsi2>
    2288:	57 fd       	sbrc	r21, 7
    228a:	07 d0       	rcall	.+14     	; 0x229a <__divmodsi4_neg2>
    228c:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
    2290:	07 fc       	sbrc	r0, 7
    2292:	03 d0       	rcall	.+6      	; 0x229a <__divmodsi4_neg2>
    2294:	4e f4       	brtc	.+18     	; 0x22a8 <__divmodsi4_exit>
    2296:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__negsi2>

0000229a <__divmodsi4_neg2>:
    229a:	50 95       	com	r21
    229c:	40 95       	com	r20
    229e:	30 95       	com	r19
    22a0:	21 95       	neg	r18
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	4f 4f       	sbci	r20, 0xFF	; 255
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255

000022a8 <__divmodsi4_exit>:
    22a8:	08 95       	ret

000022aa <__negsi2>:
    22aa:	90 95       	com	r25
    22ac:	80 95       	com	r24
    22ae:	70 95       	com	r23
    22b0:	61 95       	neg	r22
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	8f 4f       	sbci	r24, 0xFF	; 255
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	08 95       	ret

000022ba <__umulhisi3>:
    22ba:	a2 9f       	mul	r26, r18
    22bc:	b0 01       	movw	r22, r0
    22be:	b3 9f       	mul	r27, r19
    22c0:	c0 01       	movw	r24, r0
    22c2:	a3 9f       	mul	r26, r19
    22c4:	70 0d       	add	r23, r0
    22c6:	81 1d       	adc	r24, r1
    22c8:	11 24       	eor	r1, r1
    22ca:	91 1d       	adc	r25, r1
    22cc:	b2 9f       	mul	r27, r18
    22ce:	70 0d       	add	r23, r0
    22d0:	81 1d       	adc	r24, r1
    22d2:	11 24       	eor	r1, r1
    22d4:	91 1d       	adc	r25, r1
    22d6:	08 95       	ret

000022d8 <__muluhisi3>:
    22d8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__umulhisi3>
    22dc:	a5 9f       	mul	r26, r21
    22de:	90 0d       	add	r25, r0
    22e0:	b4 9f       	mul	r27, r20
    22e2:	90 0d       	add	r25, r0
    22e4:	a4 9f       	mul	r26, r20
    22e6:	80 0d       	add	r24, r0
    22e8:	91 1d       	adc	r25, r1
    22ea:	11 24       	eor	r1, r1
    22ec:	08 95       	ret

000022ee <__mulshisi3>:
    22ee:	b7 ff       	sbrs	r27, 7
    22f0:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__muluhisi3>

000022f4 <__mulohisi3>:
    22f4:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__muluhisi3>
    22f8:	82 1b       	sub	r24, r18
    22fa:	93 0b       	sbc	r25, r19
    22fc:	08 95       	ret

000022fe <__prologue_saves__>:
    22fe:	2f 92       	push	r2
    2300:	3f 92       	push	r3
    2302:	4f 92       	push	r4
    2304:	5f 92       	push	r5
    2306:	6f 92       	push	r6
    2308:	7f 92       	push	r7
    230a:	8f 92       	push	r8
    230c:	9f 92       	push	r9
    230e:	af 92       	push	r10
    2310:	bf 92       	push	r11
    2312:	cf 92       	push	r12
    2314:	df 92       	push	r13
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	ca 1b       	sub	r28, r26
    2328:	db 0b       	sbc	r29, r27
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	09 94       	ijmp

00002336 <__epilogue_restores__>:
    2336:	2a 88       	ldd	r2, Y+18	; 0x12
    2338:	39 88       	ldd	r3, Y+17	; 0x11
    233a:	48 88       	ldd	r4, Y+16	; 0x10
    233c:	5f 84       	ldd	r5, Y+15	; 0x0f
    233e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2340:	7d 84       	ldd	r7, Y+13	; 0x0d
    2342:	8c 84       	ldd	r8, Y+12	; 0x0c
    2344:	9b 84       	ldd	r9, Y+11	; 0x0b
    2346:	aa 84       	ldd	r10, Y+10	; 0x0a
    2348:	b9 84       	ldd	r11, Y+9	; 0x09
    234a:	c8 84       	ldd	r12, Y+8	; 0x08
    234c:	df 80       	ldd	r13, Y+7	; 0x07
    234e:	ee 80       	ldd	r14, Y+6	; 0x06
    2350:	fd 80       	ldd	r15, Y+5	; 0x05
    2352:	0c 81       	ldd	r16, Y+4	; 0x04
    2354:	1b 81       	ldd	r17, Y+3	; 0x03
    2356:	aa 81       	ldd	r26, Y+2	; 0x02
    2358:	b9 81       	ldd	r27, Y+1	; 0x01
    235a:	ce 0f       	add	r28, r30
    235c:	d1 1d       	adc	r29, r1
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	ed 01       	movw	r28, r26
    236a:	08 95       	ret

0000236c <__tablejump2__>:
    236c:	ee 0f       	add	r30, r30
    236e:	ff 1f       	adc	r31, r31
    2370:	05 90       	lpm	r0, Z+
    2372:	f4 91       	lpm	r31, Z
    2374:	e0 2d       	mov	r30, r0
    2376:	09 94       	ijmp

00002378 <malloc>:
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	91 05       	cpc	r25, r1
    2380:	10 f4       	brcc	.+4      	; 0x2386 <malloc+0xe>
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	e0 91 34 02 	lds	r30, 0x0234
    238a:	f0 91 35 02 	lds	r31, 0x0235
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	c0 e0       	ldi	r28, 0x00	; 0
    2394:	d0 e0       	ldi	r29, 0x00	; 0
    2396:	30 97       	sbiw	r30, 0x00	; 0
    2398:	11 f1       	breq	.+68     	; 0x23de <malloc+0x66>
    239a:	40 81       	ld	r20, Z
    239c:	51 81       	ldd	r21, Z+1	; 0x01
    239e:	48 17       	cp	r20, r24
    23a0:	59 07       	cpc	r21, r25
    23a2:	c0 f0       	brcs	.+48     	; 0x23d4 <malloc+0x5c>
    23a4:	48 17       	cp	r20, r24
    23a6:	59 07       	cpc	r21, r25
    23a8:	61 f4       	brne	.+24     	; 0x23c2 <malloc+0x4a>
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 97       	sbiw	r28, 0x00	; 0
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <malloc+0x40>
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	2b c0       	rjmp	.+86     	; 0x240e <malloc+0x96>
    23b8:	90 93 35 02 	sts	0x0235, r25
    23bc:	80 93 34 02 	sts	0x0234, r24
    23c0:	26 c0       	rjmp	.+76     	; 0x240e <malloc+0x96>
    23c2:	21 15       	cp	r18, r1
    23c4:	31 05       	cpc	r19, r1
    23c6:	19 f0       	breq	.+6      	; 0x23ce <malloc+0x56>
    23c8:	42 17       	cp	r20, r18
    23ca:	53 07       	cpc	r21, r19
    23cc:	18 f4       	brcc	.+6      	; 0x23d4 <malloc+0x5c>
    23ce:	9a 01       	movw	r18, r20
    23d0:	be 01       	movw	r22, r28
    23d2:	df 01       	movw	r26, r30
    23d4:	ef 01       	movw	r28, r30
    23d6:	02 80       	ldd	r0, Z+2	; 0x02
    23d8:	f3 81       	ldd	r31, Z+3	; 0x03
    23da:	e0 2d       	mov	r30, r0
    23dc:	dc cf       	rjmp	.-72     	; 0x2396 <malloc+0x1e>
    23de:	21 15       	cp	r18, r1
    23e0:	31 05       	cpc	r19, r1
    23e2:	09 f1       	breq	.+66     	; 0x2426 <malloc+0xae>
    23e4:	28 1b       	sub	r18, r24
    23e6:	39 0b       	sbc	r19, r25
    23e8:	24 30       	cpi	r18, 0x04	; 4
    23ea:	31 05       	cpc	r19, r1
    23ec:	90 f4       	brcc	.+36     	; 0x2412 <malloc+0x9a>
    23ee:	12 96       	adiw	r26, 0x02	; 2
    23f0:	8d 91       	ld	r24, X+
    23f2:	9c 91       	ld	r25, X
    23f4:	13 97       	sbiw	r26, 0x03	; 3
    23f6:	61 15       	cp	r22, r1
    23f8:	71 05       	cpc	r23, r1
    23fa:	21 f0       	breq	.+8      	; 0x2404 <malloc+0x8c>
    23fc:	fb 01       	movw	r30, r22
    23fe:	93 83       	std	Z+3, r25	; 0x03
    2400:	82 83       	std	Z+2, r24	; 0x02
    2402:	04 c0       	rjmp	.+8      	; 0x240c <malloc+0x94>
    2404:	90 93 35 02 	sts	0x0235, r25
    2408:	80 93 34 02 	sts	0x0234, r24
    240c:	fd 01       	movw	r30, r26
    240e:	32 96       	adiw	r30, 0x02	; 2
    2410:	44 c0       	rjmp	.+136    	; 0x249a <malloc+0x122>
    2412:	fd 01       	movw	r30, r26
    2414:	e2 0f       	add	r30, r18
    2416:	f3 1f       	adc	r31, r19
    2418:	81 93       	st	Z+, r24
    241a:	91 93       	st	Z+, r25
    241c:	22 50       	subi	r18, 0x02	; 2
    241e:	31 09       	sbc	r19, r1
    2420:	2d 93       	st	X+, r18
    2422:	3c 93       	st	X, r19
    2424:	3a c0       	rjmp	.+116    	; 0x249a <malloc+0x122>
    2426:	20 91 32 02 	lds	r18, 0x0232
    242a:	30 91 33 02 	lds	r19, 0x0233
    242e:	23 2b       	or	r18, r19
    2430:	41 f4       	brne	.+16     	; 0x2442 <malloc+0xca>
    2432:	20 91 10 01 	lds	r18, 0x0110
    2436:	30 91 11 01 	lds	r19, 0x0111
    243a:	30 93 33 02 	sts	0x0233, r19
    243e:	20 93 32 02 	sts	0x0232, r18
    2442:	20 91 0e 01 	lds	r18, 0x010E
    2446:	30 91 0f 01 	lds	r19, 0x010F
    244a:	21 15       	cp	r18, r1
    244c:	31 05       	cpc	r19, r1
    244e:	41 f4       	brne	.+16     	; 0x2460 <malloc+0xe8>
    2450:	2d b7       	in	r18, 0x3d	; 61
    2452:	3e b7       	in	r19, 0x3e	; 62
    2454:	40 91 12 01 	lds	r20, 0x0112
    2458:	50 91 13 01 	lds	r21, 0x0113
    245c:	24 1b       	sub	r18, r20
    245e:	35 0b       	sbc	r19, r21
    2460:	e0 91 32 02 	lds	r30, 0x0232
    2464:	f0 91 33 02 	lds	r31, 0x0233
    2468:	e2 17       	cp	r30, r18
    246a:	f3 07       	cpc	r31, r19
    246c:	a0 f4       	brcc	.+40     	; 0x2496 <malloc+0x11e>
    246e:	2e 1b       	sub	r18, r30
    2470:	3f 0b       	sbc	r19, r31
    2472:	28 17       	cp	r18, r24
    2474:	39 07       	cpc	r19, r25
    2476:	78 f0       	brcs	.+30     	; 0x2496 <malloc+0x11e>
    2478:	ac 01       	movw	r20, r24
    247a:	4e 5f       	subi	r20, 0xFE	; 254
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	24 17       	cp	r18, r20
    2480:	35 07       	cpc	r19, r21
    2482:	48 f0       	brcs	.+18     	; 0x2496 <malloc+0x11e>
    2484:	4e 0f       	add	r20, r30
    2486:	5f 1f       	adc	r21, r31
    2488:	50 93 33 02 	sts	0x0233, r21
    248c:	40 93 32 02 	sts	0x0232, r20
    2490:	81 93       	st	Z+, r24
    2492:	91 93       	st	Z+, r25
    2494:	02 c0       	rjmp	.+4      	; 0x249a <malloc+0x122>
    2496:	e0 e0       	ldi	r30, 0x00	; 0
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	cf 01       	movw	r24, r30
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	08 95       	ret

000024a2 <free>:
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <free+0xe>
    24ae:	8c c0       	rjmp	.+280    	; 0x25c8 <free+0x126>
    24b0:	fc 01       	movw	r30, r24
    24b2:	32 97       	sbiw	r30, 0x02	; 2
    24b4:	13 82       	std	Z+3, r1	; 0x03
    24b6:	12 82       	std	Z+2, r1	; 0x02
    24b8:	00 91 34 02 	lds	r16, 0x0234
    24bc:	10 91 35 02 	lds	r17, 0x0235
    24c0:	01 15       	cp	r16, r1
    24c2:	11 05       	cpc	r17, r1
    24c4:	81 f4       	brne	.+32     	; 0x24e6 <free+0x44>
    24c6:	20 81       	ld	r18, Z
    24c8:	31 81       	ldd	r19, Z+1	; 0x01
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	20 91 32 02 	lds	r18, 0x0232
    24d2:	30 91 33 02 	lds	r19, 0x0233
    24d6:	28 17       	cp	r18, r24
    24d8:	39 07       	cpc	r19, r25
    24da:	79 f5       	brne	.+94     	; 0x253a <free+0x98>
    24dc:	f0 93 33 02 	sts	0x0233, r31
    24e0:	e0 93 32 02 	sts	0x0232, r30
    24e4:	71 c0       	rjmp	.+226    	; 0x25c8 <free+0x126>
    24e6:	d8 01       	movw	r26, r16
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	ae 17       	cp	r26, r30
    24ee:	bf 07       	cpc	r27, r31
    24f0:	50 f4       	brcc	.+20     	; 0x2506 <free+0x64>
    24f2:	12 96       	adiw	r26, 0x02	; 2
    24f4:	2d 91       	ld	r18, X+
    24f6:	3c 91       	ld	r19, X
    24f8:	13 97       	sbiw	r26, 0x03	; 3
    24fa:	ad 01       	movw	r20, r26
    24fc:	21 15       	cp	r18, r1
    24fe:	31 05       	cpc	r19, r1
    2500:	09 f1       	breq	.+66     	; 0x2544 <free+0xa2>
    2502:	d9 01       	movw	r26, r18
    2504:	f3 cf       	rjmp	.-26     	; 0x24ec <free+0x4a>
    2506:	9d 01       	movw	r18, r26
    2508:	da 01       	movw	r26, r20
    250a:	33 83       	std	Z+3, r19	; 0x03
    250c:	22 83       	std	Z+2, r18	; 0x02
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	86 0f       	add	r24, r22
    2514:	97 1f       	adc	r25, r23
    2516:	82 17       	cp	r24, r18
    2518:	93 07       	cpc	r25, r19
    251a:	69 f4       	brne	.+26     	; 0x2536 <free+0x94>
    251c:	ec 01       	movw	r28, r24
    251e:	28 81       	ld	r18, Y
    2520:	39 81       	ldd	r19, Y+1	; 0x01
    2522:	26 0f       	add	r18, r22
    2524:	37 1f       	adc	r19, r23
    2526:	2e 5f       	subi	r18, 0xFE	; 254
    2528:	3f 4f       	sbci	r19, 0xFF	; 255
    252a:	31 83       	std	Z+1, r19	; 0x01
    252c:	20 83       	st	Z, r18
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	93 83       	std	Z+3, r25	; 0x03
    2534:	82 83       	std	Z+2, r24	; 0x02
    2536:	45 2b       	or	r20, r21
    2538:	29 f4       	brne	.+10     	; 0x2544 <free+0xa2>
    253a:	f0 93 35 02 	sts	0x0235, r31
    253e:	e0 93 34 02 	sts	0x0234, r30
    2542:	42 c0       	rjmp	.+132    	; 0x25c8 <free+0x126>
    2544:	13 96       	adiw	r26, 0x03	; 3
    2546:	fc 93       	st	X, r31
    2548:	ee 93       	st	-X, r30
    254a:	12 97       	sbiw	r26, 0x02	; 2
    254c:	ed 01       	movw	r28, r26
    254e:	49 91       	ld	r20, Y+
    2550:	59 91       	ld	r21, Y+
    2552:	9e 01       	movw	r18, r28
    2554:	24 0f       	add	r18, r20
    2556:	35 1f       	adc	r19, r21
    2558:	e2 17       	cp	r30, r18
    255a:	f3 07       	cpc	r31, r19
    255c:	71 f4       	brne	.+28     	; 0x257a <free+0xd8>
    255e:	80 81       	ld	r24, Z
    2560:	91 81       	ldd	r25, Z+1	; 0x01
    2562:	84 0f       	add	r24, r20
    2564:	95 1f       	adc	r25, r21
    2566:	02 96       	adiw	r24, 0x02	; 2
    2568:	11 96       	adiw	r26, 0x01	; 1
    256a:	9c 93       	st	X, r25
    256c:	8e 93       	st	-X, r24
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	13 96       	adiw	r26, 0x03	; 3
    2574:	9c 93       	st	X, r25
    2576:	8e 93       	st	-X, r24
    2578:	12 97       	sbiw	r26, 0x02	; 2
    257a:	e0 e0       	ldi	r30, 0x00	; 0
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	d8 01       	movw	r26, r16
    2580:	12 96       	adiw	r26, 0x02	; 2
    2582:	8d 91       	ld	r24, X+
    2584:	9c 91       	ld	r25, X
    2586:	13 97       	sbiw	r26, 0x03	; 3
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	19 f0       	breq	.+6      	; 0x2592 <free+0xf0>
    258c:	f8 01       	movw	r30, r16
    258e:	8c 01       	movw	r16, r24
    2590:	f6 cf       	rjmp	.-20     	; 0x257e <free+0xdc>
    2592:	8d 91       	ld	r24, X+
    2594:	9c 91       	ld	r25, X
    2596:	98 01       	movw	r18, r16
    2598:	2e 5f       	subi	r18, 0xFE	; 254
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	82 0f       	add	r24, r18
    259e:	93 1f       	adc	r25, r19
    25a0:	20 91 32 02 	lds	r18, 0x0232
    25a4:	30 91 33 02 	lds	r19, 0x0233
    25a8:	28 17       	cp	r18, r24
    25aa:	39 07       	cpc	r19, r25
    25ac:	69 f4       	brne	.+26     	; 0x25c8 <free+0x126>
    25ae:	30 97       	sbiw	r30, 0x00	; 0
    25b0:	29 f4       	brne	.+10     	; 0x25bc <free+0x11a>
    25b2:	10 92 35 02 	sts	0x0235, r1
    25b6:	10 92 34 02 	sts	0x0234, r1
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <free+0x11e>
    25bc:	13 82       	std	Z+3, r1	; 0x03
    25be:	12 82       	std	Z+2, r1	; 0x02
    25c0:	10 93 33 02 	sts	0x0233, r17
    25c4:	00 93 32 02 	sts	0x0232, r16
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <__do_global_dtors>:
    25d2:	10 e0       	ldi	r17, 0x00	; 0
    25d4:	c5 e5       	ldi	r28, 0x55	; 85
    25d6:	d0 e0       	ldi	r29, 0x00	; 0
    25d8:	04 c0       	rjmp	.+8      	; 0x25e2 <__do_global_dtors+0x10>
    25da:	fe 01       	movw	r30, r28
    25dc:	0e 94 b6 11 	call	0x236c	; 0x236c <__tablejump2__>
    25e0:	21 96       	adiw	r28, 0x01	; 1
    25e2:	c6 35       	cpi	r28, 0x56	; 86
    25e4:	d1 07       	cpc	r29, r17
    25e6:	c9 f7       	brne	.-14     	; 0x25da <__do_global_dtors+0x8>
    25e8:	f8 94       	cli

000025ea <__stop_program>:
    25ea:	ff cf       	rjmp	.-2      	; 0x25ea <__stop_program>
