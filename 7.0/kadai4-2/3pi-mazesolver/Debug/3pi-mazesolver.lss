
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000026fc  00002790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  0080016e  0080016e  000027fe  2**0
                  ALLOC
  3 .stab         000076f8  00000000  00000000  00002800  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008f49  00000000  00000000  00009ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00012e41  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012e84  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  00012ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001357  00000000  00000000  00012fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000788  00000000  00000000  0001430b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f30  00000000  00000000  00014a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000021c  00000000  00000000  000159c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004d0  00000000  00000000  00015be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000007ac  00000000  00000000  000160b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  0001685c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__dtors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_end>:
      aa:	64 0c       	add	r6, r4

000000ac <__dtors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec ef       	ldi	r30, 0xFC	; 252
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 36       	cpi	r26, 0x6E	; 110
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	ae e6       	ldi	r26, 0x6E	; 110
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	aa 34       	cpi	r26, 0x4A	; 74
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
      e2:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__do_global_dtors>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	88 e6       	ldi	r24, 0x68	; 104
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      fe:	62 e0       	ldi	r22, 0x02	; 2
     100:	8a e6       	ldi	r24, 0x6A	; 106
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	8b e6       	ldi	r24, 0x6B	; 107
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	8c e6       	ldi	r24, 0x6C	; 108
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	8d e6       	ldi	r24, 0x6D	; 109
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	8e e6       	ldi	r24, 0x6E	; 110
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 bd 08 	call	0x117a	; 0x117a <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     130:	0c 94 30 09 	jmp	0x1260	; 0x1260 <clear>

00000134 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2a 97       	sbiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	8c 01       	movw	r16, r24
     158:	7c 01       	movw	r14, r24
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	e8 0e       	add	r14, r24
     15e:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     164:	95 e6       	ldi	r25, 0x65	; 101
     166:	c9 2e       	mov	r12, r25
     168:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	e4 e1       	ldi	r30, 0x14	; 20
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	de 01       	movw	r26, r28
     170:	11 96       	adiw	r26, 0x01	; 1
     172:	8b 2d       	mov	r24, r11
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     17c:	f8 01       	movw	r30, r16
     17e:	81 91       	ld	r24, Z+
     180:	91 91       	ld	r25, Z+
     182:	8f 01       	movw	r16, r30
     184:	b6 01       	movw	r22, r12
     186:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ec 0f       	add	r30, r28
     190:	fd 1f       	adc	r31, r29
     192:	e6 0f       	add	r30, r22
     194:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     196:	80 81       	ld	r24, Z
     198:	0e 94 c0 08 	call	0x1180	; 0x1180 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     19c:	0e 15       	cp	r16, r14
     19e:	1f 05       	cpc	r17, r15
     1a0:	21 f7       	brne	.-56     	; 0x16a <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	08 95       	ret

000001c2 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1c2:	2f 92       	push	r2
     1c4:	3f 92       	push	r3
     1c6:	4f 92       	push	r4
     1c8:	5f 92       	push	r5
     1ca:	6f 92       	push	r6
     1cc:	7f 92       	push	r7
     1ce:	8f 92       	push	r8
     1d0:	9f 92       	push	r9
     1d2:	af 92       	push	r10
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1fc:	a1 2c       	mov	r10, r1
     1fe:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     200:	60 e1       	ldi	r22, 0x10	; 16
     202:	46 2e       	mov	r4, r22
     204:	67 e2       	ldi	r22, 0x27	; 39
     206:	56 2e       	mov	r5, r22
     208:	61 2c       	mov	r6, r1
     20a:	71 2c       	mov	r7, r1
     20c:	74 e1       	ldi	r23, 0x14	; 20
     20e:	27 2e       	mov	r2, r23
     210:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     212:	ec e3       	ldi	r30, 0x3C	; 60
     214:	8e 2e       	mov	r8, r30
     216:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     222:	8c 01       	movw	r16, r24
     224:	00 5d       	subi	r16, 0xD0	; 208
     226:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     228:	c8 01       	movw	r24, r16
     22a:	01 2e       	mov	r0, r17
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	c8 0e       	add	r12, r24
     234:	d9 1e       	adc	r13, r25
     236:	ea 1e       	adc	r14, r26
     238:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	a3 01       	movw	r20, r6
     240:	92 01       	movw	r18, r4
     242:	0e 94 c6 11 	call	0x238c	; 0x238c <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     246:	f8 01       	movw	r30, r16
     248:	ea 19       	sub	r30, r10
     24a:	fb 09       	sbc	r31, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     24c:	cf 01       	movw	r24, r30
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	8e 0f       	add	r24, r30
     254:	9f 1f       	adc	r25, r31
     256:	97 fd       	sbrc	r25, 7
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	95 95       	asr	r25
     25c:	87 95       	ror	r24
     25e:	28 0f       	add	r18, r24
     260:	39 1f       	adc	r19, r25
     262:	c8 01       	movw	r24, r16
     264:	b1 01       	movw	r22, r2
     266:	0e 94 90 11 	call	0x2320	; 0x2320 <__divmodhi4>
     26a:	c9 01       	movw	r24, r18
     26c:	86 0f       	add	r24, r22
     26e:	97 1f       	adc	r25, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
     270:	8d 33       	cpi	r24, 0x3D	; 61
     272:	91 05       	cpc	r25, r1
     274:	6c f4       	brge	.+26     	; 0x290 <follow_segment+0xce>
			power_difference = max;
		if(power_difference < -max)
     276:	84 3c       	cpi	r24, 0xC4	; 196
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	92 07       	cpc	r25, r18
     27c:	1c f0       	brlt	.+6      	; 0x284 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     27e:	97 fd       	sbrc	r25, 7
     280:	03 c0       	rjmp	.+6      	; 0x288 <follow_segment+0xc6>
     282:	08 c0       	rjmp	.+16     	; 0x294 <follow_segment+0xd2>
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     284:	84 ec       	ldi	r24, 0xC4	; 196
     286:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     288:	6c e3       	ldi	r22, 0x3C	; 60
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	cc 96       	adiw	r24, 0x3c	; 60
     28e:	07 c0       	rjmp	.+14     	; 0x29e <follow_segment+0xdc>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     290:	8c e3       	ldi	r24, 0x3C	; 60
     292:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     294:	b4 01       	movw	r22, r8
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	8c e3       	ldi	r24, 0x3C	; 60
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	50 f4       	brcc	.+20     	; 0x2c0 <follow_segment+0xfe>
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	9e 81       	ldd	r25, Y+6	; 0x06
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <follow_segment+0xfe>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	60 f0       	brcs	.+24     	; 0x2d8 <follow_segment+0x116>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	38 f4       	brcc	.+14     	; 0x2d8 <follow_segment+0x116>
     2ca:	89 85       	ldd	r24, Y+9	; 0x09
     2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	10 f4       	brcc	.+4      	; 0x2d8 <follow_segment+0x116>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2d4:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2d6:	a0 cf       	rjmp	.-192    	; 0x218 <follow_segment+0x56>
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	08 95       	ret

0000030a <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
int initialize()
{
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	2a 97       	sbiw	r28, 0x0a	; 10
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	int chosebutton = 0;     //return number

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     326:	80 ed       	ldi	r24, 0xD0	; 208
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     32e:	0e 94 75 00 	call	0xea	; 0xea <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     332:	82 ea       	ldi	r24, 0xA2	; 162
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print_from_program_space>
	lcd_goto_xy(0,1);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     342:	89 e9       	ldi	r24, 0x99	; 153
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print_from_program_space>
	play_from_program_space(welcome);
     34a:	83 e8       	ldi	r24, 0x83	; 131
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 fd 07 	call	0xffa	; 0xffa <play_from_program_space>
	delay_ms(1000);
     352:	88 ee       	ldi	r24, 0xE8	; 232
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

	clear();
     35a:	0e 94 30 09 	call	0x1260	; 0x1260 <clear>
	print_from_program_space(demo_name_line1);
     35e:	84 e9       	ldi	r24, 0x94	; 148
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print_from_program_space>
	lcd_goto_xy(0,1);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     36e:	8d e8       	ldi	r24, 0x8D	; 141
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print_from_program_space>
	delay_ms(1000);
     376:	88 ee       	ldi	r24, 0xE8	; 232
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

	int flaga = 0;
     37e:	00 e0       	ldi	r16, 0x00	; 0
     380:	10 e0       	ldi	r17, 0x00	; 0
	// Display battery voltage and wait for button press
	while(1){
		if(get_single_debounced_button_press(BUTTON_A)){ //Rensyuu Kadai 2
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <get_single_debounced_button_press>
     388:	88 23       	and	r24, r24
     38a:	11 f0       	breq	.+4      	; 0x390 <initialize+0x86>
			if(flaga == 1){
				flaga = 0;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	08 27       	eor	r16, r24
			}else{
				flaga = 1;
			}
		}
		
		clear();
     390:	0e 94 30 09 	call	0x1260	; 0x1260 <clear>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     394:	0e 94 c2 04 	call	0x984	; 0x984 <read_battery_millivolts_3pi>
     398:	7c 01       	movw	r14, r24
		int bat = read_battery_millivolts();
		if(flaga == 1){
     39a:	01 30       	cpi	r16, 0x01	; 1
     39c:	11 05       	cpc	r17, r1
     39e:	59 f4       	brne	.+22     	; 0x3b6 <initialize+0xac>
			int mem = get_free_ram();
     3a0:	0e 94 87 0b 	call	0x170e	; 0x170e <get_free_ram>
			print_long(mem);
     3a4:	bc 01       	movw	r22, r24
     3a6:	99 0f       	add	r25, r25
     3a8:	88 0b       	sbc	r24, r24
     3aa:	99 0b       	sbc	r25, r25
     3ac:	0e 94 a5 09 	call	0x134a	; 0x134a <print_long>
			print("mem");
     3b0:	8b e3       	ldi	r24, 0x3B	; 59
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <initialize+0xbc>
		}else{
			print_long(bat);
     3b6:	bc 01       	movw	r22, r24
     3b8:	99 0f       	add	r25, r25
     3ba:	88 0b       	sbc	r24, r24
     3bc:	99 0b       	sbc	r25, r25
     3be:	0e 94 a5 09 	call	0x134a	; 0x134a <print_long>
			print("mV");
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 3f 09 	call	0x127e	; 0x127e <print>
		}
		
		lcd_goto_xy(0,1);
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
		if(bat > 4700){                 //Rensyuu Kadai 1
     3d2:	8d e5       	ldi	r24, 0x5D	; 93
     3d4:	e8 16       	cp	r14, r24
     3d6:	82 e1       	ldi	r24, 0x12	; 18
     3d8:	f8 06       	cpc	r15, r24
     3da:	1c f0       	brlt	.+6      	; 0x3e2 <initialize+0xd8>
			print("Press BC");
     3dc:	82 e4       	ldi	r24, 0x42	; 66
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <initialize+0xdc>
		}
		else{
			print("Replace!");
     3e2:	8b e4       	ldi	r24, 0x4B	; 75
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 3f 09 	call	0x127e	; 0x127e <print>
		}
		
		if(button_is_pressed(BUTTON_C)){
     3ea:	80 e2       	ldi	r24, 0x20	; 32
     3ec:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     3f0:	81 11       	cpse	r24, r1
     3f2:	0a c0       	rjmp	.+20     	; 0x408 <initialize+0xfe>
			chosebutton = BUTTON_C;
			break;				
		}else if(button_is_pressed(BUTTON_B)){
     3f4:	80 e1       	ldi	r24, 0x10	; 16
     3f6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     3fa:	81 11       	cpse	r24, r1
     3fc:	09 c0       	rjmp	.+18     	; 0x410 <initialize+0x106>
			chosebutton = BUTTON_B;
			break;
		}
		
		delay_ms(10);                  //RK2 100 -> 40
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	}
     406:	bd cf       	rjmp	.-134    	; 0x382 <initialize+0x78>
		else{
			print("Replace!");
		}
		
		if(button_is_pressed(BUTTON_C)){
			chosebutton = BUTTON_C;
     408:	90 e2       	ldi	r25, 0x20	; 32
     40a:	e9 2e       	mov	r14, r25
     40c:	f1 2c       	mov	r15, r1
     40e:	03 c0       	rjmp	.+6      	; 0x416 <initialize+0x10c>
			break;				
		}else if(button_is_pressed(BUTTON_B)){
			chosebutton = BUTTON_B;
     410:	80 e1       	ldi	r24, 0x10	; 16
     412:	e8 2e       	mov	r14, r24
     414:	f1 2c       	mov	r15, r1

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	

	delay_ms(1000);
     416:	88 ee       	ldi	r24, 0xE8	; 232
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
     41e:	0c ee       	ldi	r16, 0xEC	; 236
     420:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     422:	08 32       	cpi	r16, 0x28	; 40
     424:	11 05       	cpc	r17, r1
     426:	28 f0       	brcs	.+10     	; 0x432 <initialize+0x128>
			set_motors(40,-40);
     428:	68 ed       	ldi	r22, 0xD8	; 216
     42a:	7f ef       	ldi	r23, 0xFF	; 255
     42c:	88 e2       	ldi	r24, 0x28	; 40
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	04 c0       	rjmp	.+8      	; 0x43a <initialize+0x130>
		else
			set_motors(-40,40);
     432:	68 e2       	ldi	r22, 0x28	; 40
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	88 ed       	ldi	r24, 0xD8	; 216
     438:	9f ef       	ldi	r25, 0xFF	; 255
     43a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 24 0c 	call	0x1848	; 0x1848 <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     444:	84 e1       	ldi	r24, 0x14	; 20
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
     44c:	0f 5f       	subi	r16, 0xFF	; 255
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
	delay_ms(1000);
	

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     450:	0c 33       	cpi	r16, 0x3C	; 60
     452:	11 05       	cpc	r17, r1
     454:	31 f7       	brne	.-52     	; 0x422 <initialize+0x118>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B) && !button_is_pressed(BUTTON_C))
     462:	80 e1       	ldi	r24, 0x10	; 16
     464:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     468:	88 23       	and	r24, r24
     46a:	89 f0       	breq	.+34     	; 0x48e <initialize+0x184>
		lcd_goto_xy(0,1);
		display_readings(sensors);

		delay_ms(100);
	}
	wait_for_button_release(BUTTON_B);
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	0e 94 ad 0a 	call	0x155a	; 0x155a <wait_for_button_release>
	wait_for_button_release(BUTTON_C);
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	0e 94 ad 0a 	call	0x155a	; 0x155a <wait_for_button_release>
	clear();
     478:	0e 94 30 09 	call	0x1260	; 0x1260 <clear>

	print("Go!");		
     47c:	84 e5       	ldi	r24, 0x54	; 84
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 3f 09 	call	0x127e	; 0x127e <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 fd 07 	call	0xffa	; 0xffa <play_from_program_space>
	while(is_playing());
     48c:	1f c0       	rjmp	.+62     	; 0x4cc <initialize+0x1c2>
		delay_ms(20);
	}
	set_motors(0,0);

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B) && !button_is_pressed(BUTTON_C))
     48e:	80 e2       	ldi	r24, 0x20	; 32
     490:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     494:	81 11       	cpse	r24, r1
     496:	ea cf       	rjmp	.-44     	; 0x46c <initialize+0x162>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <read_line>
     4a2:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     4a4:	0e 94 30 09 	call	0x1260	; 0x1260 <clear>
		print_long(position);
     4a8:	b8 01       	movw	r22, r16
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 a5 09 	call	0x134a	; 0x134a <print_long>
		lcd_goto_xy(0,1);
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
		display_readings(sensors);
     4ba:	ce 01       	movw	r24, r28
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	0e 94 9a 00 	call	0x134	; 0x134 <display_readings>

		delay_ms(100);
     4c2:	84 e6       	ldi	r24, 0x64	; 100
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
     4ca:	cb cf       	rjmp	.-106    	; 0x462 <initialize+0x158>

	print("Go!");		

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
	while(is_playing());
     4cc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <is_playing>
     4d0:	81 11       	cpse	r24, r1
     4d2:	fc cf       	rjmp	.-8      	; 0x4cc <initialize+0x1c2>
	
	return chosebutton;
}
     4d4:	c7 01       	movw	r24, r14
     4d6:	2a 96       	adiw	r28, 0x0a	; 10
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	08 95       	ret

000004f0 <main>:
// must have a main() function defined somewhere.
int main()
{
	int chosebutton = 0;
	// set up the 3pi
	chosebutton = initialize();
     4f0:	0e 94 85 01 	call	0x30a	; 0x30a <initialize>

	// Call our maze solving routine.
	maze_solve(chosebutton);
     4f4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <main+0x8>

000004fa <display_path>:
void display_path()
{
	// Set the last character of the path to a 0 so that the print()
	// function can find the end of the string.  This is how strings
	// are normally terminated in C.
	path[path_length] = 0;
     4fa:	e0 91 dd 01 	lds	r30, 0x01DD
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	e2 52       	subi	r30, 0x22	; 34
     502:	fe 4f       	sbci	r31, 0xFE	; 254
     504:	10 82       	st	Z, r1

	clear();
     506:	0e 94 30 09 	call	0x1260	; 0x1260 <clear>
	print(path);
     50a:	8e ed       	ldi	r24, 0xDE	; 222
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 3f 09 	call	0x127e	; 0x127e <print>

	if(path_length > 8)
     512:	80 91 dd 01 	lds	r24, 0x01DD
     516:	89 30       	cpi	r24, 0x09	; 9
     518:	40 f0       	brcs	.+16     	; 0x52a <display_path+0x30>
	{
		lcd_goto_xy(0,1);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
		print(path+8);
     522:	86 ee       	ldi	r24, 0xE6	; 230
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0c 94 3f 09 	jmp	0x127e	; 0x127e <print>
     52a:	08 95       	ret

0000052c <select_turn>:
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	
	if(chosebutton == BUTTON_B){  //left solve
     52c:	20 31       	cpi	r18, 0x10	; 16
     52e:	31 05       	cpc	r19, r1
     530:	39 f4       	brne	.+14     	; 0x540 <select_turn+0x14>
		if(found_left)                                  //kadai4-2
     532:	81 11       	cpse	r24, r1
     534:	0b c0       	rjmp	.+22     	; 0x54c <select_turn+0x20>
			return 'L';
		else if(found_straight)
     536:	61 11       	cpse	r22, r1
     538:	0d c0       	rjmp	.+26     	; 0x554 <select_turn+0x28>
			return 'S';
		else if(found_right)
     53a:	44 23       	and	r20, r20
     53c:	69 f0       	breq	.+26     	; 0x558 <select_turn+0x2c>
     53e:	08 c0       	rjmp	.+16     	; 0x550 <select_turn+0x24>
			return 'R';
		else
			return 'B';
	}else{                         // right solve
		if(found_right)                                  //kadai4-2
     540:	41 11       	cpse	r20, r1
     542:	06 c0       	rjmp	.+12     	; 0x550 <select_turn+0x24>
			return 'R';
		else if(found_straight)
     544:	61 11       	cpse	r22, r1
     546:	06 c0       	rjmp	.+12     	; 0x554 <select_turn+0x28>
			return 'S';
		else if(found_left)
     548:	88 23       	and	r24, r24
     54a:	31 f0       	breq	.+12     	; 0x558 <select_turn+0x2c>
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	
	if(chosebutton == BUTTON_B){  //left solve
		if(found_left)                                  //kadai4-2
			return 'L';
     54c:	8c e4       	ldi	r24, 0x4C	; 76
     54e:	08 95       	ret
		else if(found_straight)
			return 'S';
		else if(found_right)
			return 'R';
     550:	82 e5       	ldi	r24, 0x52	; 82
     552:	08 95       	ret
	
	if(chosebutton == BUTTON_B){  //left solve
		if(found_left)                                  //kadai4-2
			return 'L';
		else if(found_straight)
			return 'S';
     554:	83 e5       	ldi	r24, 0x53	; 83
     556:	08 95       	ret
		else if(found_right)
			return 'R';
		else
			return 'B';
     558:	82 e4       	ldi	r24, 0x42	; 66
		else if(found_left)
			return 'L';
		else
			return 'B';
	}
}
     55a:	08 95       	ret

0000055c <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplify_path()
{
	// only simplify the path if the second-to-last turn was a 'B'
	if(path_length < 3 || path[path_length-2] != 'B')
     55c:	40 91 dd 01 	lds	r20, 0x01DD
     560:	43 30       	cpi	r20, 0x03	; 3
     562:	08 f4       	brcc	.+2      	; 0x566 <simplify_path+0xa>
     564:	45 c0       	rjmp	.+138    	; 0x5f0 <simplify_path+0x94>
     566:	24 2f       	mov	r18, r20
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	22 52       	subi	r18, 0x22	; 34
     56c:	3e 4f       	sbci	r19, 0xFE	; 254
     56e:	f9 01       	movw	r30, r18
     570:	32 97       	sbiw	r30, 0x02	; 2
     572:	80 81       	ld	r24, Z
     574:	82 34       	cpi	r24, 0x42	; 66
     576:	e1 f5       	brne	.+120    	; 0x5f0 <simplify_path+0x94>
     578:	f9 01       	movw	r30, r18
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
     582:	52 91       	ld	r21, -Z
     584:	5c 34       	cpi	r21, 0x4C	; 76
     586:	51 f0       	breq	.+20     	; 0x59c <simplify_path+0x40>
     588:	52 35       	cpi	r21, 0x52	; 82
     58a:	29 f0       	breq	.+10     	; 0x596 <simplify_path+0x3a>
     58c:	52 34       	cpi	r21, 0x42	; 66
     58e:	41 f4       	brne	.+16     	; 0x5a0 <simplify_path+0x44>
			break;
		case 'L':
			total_angle += 270;
			break;
		case 'B':
			total_angle += 180;
     590:	8c 54       	subi	r24, 0x4C	; 76
     592:	9f 4f       	sbci	r25, 0xFF	; 255
		  	break;
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <simplify_path+0x44>
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
		{
		case 'R':
			total_angle += 90;
     596:	86 5a       	subi	r24, 0xA6	; 166
     598:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <simplify_path+0x44>
		case 'L':
			total_angle += 270;
     59c:	82 5f       	subi	r24, 0xF2	; 242
     59e:	9e 4f       	sbci	r25, 0xFE	; 254
	if(path_length < 3 || path[path_length-2] != 'B')
		return;

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
     5a0:	6f 5f       	subi	r22, 0xFF	; 255
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	64 30       	cpi	r22, 0x04	; 4
     5a6:	71 05       	cpc	r23, r1
     5a8:	61 f7       	brne	.-40     	; 0x582 <simplify_path+0x26>
		  	break;
		}
	}

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;
     5aa:	68 e6       	ldi	r22, 0x68	; 104
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	0e 94 90 11 	call	0x2320	; 0x2320 <__divmodhi4>

	// Replace all of those turns with a single one.
	switch(total_angle)
     5b2:	8a 35       	cpi	r24, 0x5A	; 90
     5b4:	91 05       	cpc	r25, r1
     5b6:	89 f0       	breq	.+34     	; 0x5da <simplify_path+0x7e>
     5b8:	34 f4       	brge	.+12     	; 0x5c6 <simplify_path+0x6a>
     5ba:	89 2b       	or	r24, r25
     5bc:	b1 f4       	brne	.+44     	; 0x5ea <simplify_path+0x8e>
	{
	case 0:
		path[path_length - 3] = 'S';
     5be:	f9 01       	movw	r30, r18
     5c0:	33 97       	sbiw	r30, 0x03	; 3
     5c2:	83 e5       	ldi	r24, 0x53	; 83
     5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <simplify_path+0x8c>

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;

	// Replace all of those turns with a single one.
	switch(total_angle)
     5c6:	84 3b       	cpi	r24, 0xB4	; 180
     5c8:	91 05       	cpc	r25, r1
     5ca:	59 f0       	breq	.+22     	; 0x5e2 <simplify_path+0x86>
     5cc:	8e 30       	cpi	r24, 0x0E	; 14
     5ce:	91 40       	sbci	r25, 0x01	; 1
     5d0:	61 f4       	brne	.+24     	; 0x5ea <simplify_path+0x8e>
		break;
	case 180:
		path[path_length - 3] = 'B';
		break;
	case 270:
		path[path_length - 3] = 'L';
     5d2:	f9 01       	movw	r30, r18
     5d4:	33 97       	sbiw	r30, 0x03	; 3
     5d6:	8c e4       	ldi	r24, 0x4C	; 76
     5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <simplify_path+0x8c>
	{
	case 0:
		path[path_length - 3] = 'S';
		break;
	case 90:
		path[path_length - 3] = 'R';
     5da:	f9 01       	movw	r30, r18
     5dc:	33 97       	sbiw	r30, 0x03	; 3
     5de:	82 e5       	ldi	r24, 0x52	; 82
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <simplify_path+0x8c>
		break;
	case 180:
		path[path_length - 3] = 'B';
     5e2:	f9 01       	movw	r30, r18
     5e4:	33 97       	sbiw	r30, 0x03	; 3
     5e6:	82 e4       	ldi	r24, 0x42	; 66
		break;
	case 270:
		path[path_length - 3] = 'L';
     5e8:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	path_length -= 2;
     5ea:	42 50       	subi	r20, 0x02	; 2
     5ec:	40 93 dd 01 	sts	0x01DD, r20
     5f0:	08 95       	ret

000005f2 <maze_solve>:
}

// This function is called once, from main.c.
int maze_solve(int chosebutton)
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	2b 97       	sbiw	r28, 0x0b	; 11
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	7c 01       	movw	r14, r24
	// Loop until we have solved the maze.
	while(1)
	{
		// FIRST MAIN LOOP BODY  
		follow_segment();
     608:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Drive straight a bit.  This helps us in case we entered the
		// intersection at an angle.
		// Note that we are slowing down - this prevents the robot
		// from tipping forward too much.
		set_motors(50,50);
     60c:	62 e3       	ldi	r22, 0x32	; 50
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	82 e3       	ldi	r24, 0x32	; 50
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		delay_ms(50);
     618:	82 e3       	ldi	r24, 0x32	; 50
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
		unsigned char found_straight=0;
		unsigned char found_right=0;

		// Now read the sensors and check the intersection type.
		unsigned int sensors[5];
		read_line(sensors,IR_EMITTERS_ON);
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	0e 94 2a 0c 	call	0x1854	; 0x1854 <read_line>

		// Check for left and right exits.
		if(sensors[0] > 100)
     62a:	11 e0       	ldi	r17, 0x01	; 1
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	85 36       	cpi	r24, 0x65	; 101
     632:	91 05       	cpc	r25, r1
     634:	08 f4       	brcc	.+2      	; 0x638 <maze_solve+0x46>
     636:	10 e0       	ldi	r17, 0x00	; 0
			found_left = 1;
		if(sensors[4] > 100)
     638:	41 e0       	ldi	r20, 0x01	; 1
     63a:	89 85       	ldd	r24, Y+9	; 0x09
     63c:	9a 85       	ldd	r25, Y+10	; 0x0a
     63e:	85 36       	cpi	r24, 0x65	; 101
     640:	91 05       	cpc	r25, r1
     642:	08 f4       	brcc	.+2      	; 0x646 <maze_solve+0x54>
     644:	40 e0       	ldi	r20, 0x00	; 0
			found_right = 1;

		// Drive straight a bit more - this is enough to line up our
		// wheels with the intersection.
		set_motors(40,40);
     646:	68 e2       	ldi	r22, 0x28	; 40
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	88 e2       	ldi	r24, 0x28	; 40
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	4b 87       	std	Y+11, r20	; 0x0b
     650:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		delay_ms(200);
     654:	88 ec       	ldi	r24, 0xC8	; 200
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

		// Check for a straight exit.
		read_line(sensors,IR_EMITTERS_ON);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 2a 0c 	call	0x1854	; 0x1854 <read_line>
		if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200)
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	9c 81       	ldd	r25, Y+4	; 0x04
     66a:	4b 85       	ldd	r20, Y+11	; 0x0b
     66c:	89 3c       	cpi	r24, 0xC9	; 201
     66e:	91 05       	cpc	r25, r1
     670:	60 f4       	brcc	.+24     	; 0x68a <maze_solve+0x98>
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	9e 81       	ldd	r25, Y+6	; 0x06
     676:	89 3c       	cpi	r24, 0xC9	; 201
     678:	91 05       	cpc	r25, r1
     67a:	a0 f4       	brcc	.+40     	; 0x6a4 <maze_solve+0xb2>
     67c:	8f 81       	ldd	r24, Y+7	; 0x07
     67e:	98 85       	ldd	r25, Y+8	; 0x08
     680:	89 3c       	cpi	r24, 0xC9	; 201
     682:	91 05       	cpc	r25, r1
     684:	78 f4       	brcc	.+30     	; 0x6a4 <maze_solve+0xb2>

		// These variables record whether the robot has seen a line to the
		// left, straight ahead, and right, whil examining the current
		// intersection.
		unsigned char found_left=0;
		unsigned char found_straight=0;
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	0e c0       	rjmp	.+28     	; 0x6a6 <maze_solve+0xb4>
			found_straight = 1;

		// Check for the ending spot.
		// If all three middle sensors are on dark black, we have
		// solved the maze.
		if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600)
     68a:	89 35       	cpi	r24, 0x59	; 89
     68c:	92 40       	sbci	r25, 0x02	; 2
     68e:	50 f0       	brcs	.+20     	; 0x6a4 <maze_solve+0xb2>
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	9e 81       	ldd	r25, Y+6	; 0x06
     694:	89 35       	cpi	r24, 0x59	; 89
     696:	92 40       	sbci	r25, 0x02	; 2
     698:	28 f0       	brcs	.+10     	; 0x6a4 <maze_solve+0xb2>
     69a:	8f 81       	ldd	r24, Y+7	; 0x07
     69c:	98 85       	ldd	r25, Y+8	; 0x08
     69e:	89 35       	cpi	r24, 0x59	; 89
     6a0:	92 40       	sbci	r25, 0x02	; 2
     6a2:	b8 f4       	brcc	.+46     	; 0x6d2 <maze_solve+0xe0>
     6a4:	61 e0       	ldi	r22, 0x01	; 1
			break;

		// Intersection identification is complete.
		// If the maze has been solved, we can follow the existing
		// path.  Otherwise, we need to learn the solution.
		unsigned char dir = select_turn(found_left, found_straight, found_right, chosebutton);
     6a6:	97 01       	movw	r18, r14
     6a8:	81 2f       	mov	r24, r17
     6aa:	0e 94 96 02 	call	0x52c	; 0x52c <select_turn>
     6ae:	18 2f       	mov	r17, r24

		// Make the turn indicated by the path.
		turn(dir);
     6b0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <turn>

		// Store the intersection in the path variable.
		path[path_length] = dir;
     6b4:	90 91 dd 01 	lds	r25, 0x01DD
     6b8:	e9 2f       	mov	r30, r25
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	e2 52       	subi	r30, 0x22	; 34
     6be:	fe 4f       	sbci	r31, 0xFE	; 254
     6c0:	10 83       	st	Z, r17
		path_length ++;
     6c2:	9f 5f       	subi	r25, 0xFF	; 255
     6c4:	90 93 dd 01 	sts	0x01DD, r25
		// You should check to make sure that the path_length does not
		// exceed the bounds of the array.  We'll ignore that in this
		// example.

		// Simplify the learned path.
		simplify_path();
     6c8:	0e 94 ae 02 	call	0x55c	; 0x55c <simplify_path>

		// Display the path on the LCD.
		display_path();
     6cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_path>
	}
     6d0:	9b cf       	rjmp	.-202    	; 0x608 <maze_solve+0x16>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
		{
			if(get_ms() % 2000 < 1000)
     6d2:	80 ed       	ldi	r24, 0xD0	; 208
     6d4:	c8 2e       	mov	r12, r24
     6d6:	87 e0       	ldi	r24, 0x07	; 7
     6d8:	d8 2e       	mov	r13, r24
     6da:	e1 2c       	mov	r14, r1
     6dc:	f1 2c       	mov	r15, r1
	// Now enter an infinite loop - we can re-run the maze as many
	// times as we want to.
	while(1)
	{
		// Beep to show that we finished the maze.
		set_motors(0,0);
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		play(">>a32");
     6ea:	88 e5       	ldi	r24, 0x58	; 88
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <play>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
     6f2:	80 e1       	ldi	r24, 0x10	; 16
     6f4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     6f8:	81 11       	cpse	r24, r1
     6fa:	21 c0       	rjmp	.+66     	; 0x73e <maze_solve+0x14c>
		{
			if(get_ms() % 2000 < 1000)
     6fc:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_ms>
     700:	a7 01       	movw	r20, r14
     702:	96 01       	movw	r18, r12
     704:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
     708:	68 3e       	cpi	r22, 0xE8	; 232
     70a:	73 40       	sbci	r23, 0x03	; 3
     70c:	81 05       	cpc	r24, r1
     70e:	91 05       	cpc	r25, r1
     710:	78 f4       	brcc	.+30     	; 0x730 <maze_solve+0x13e>
			{
				clear();
     712:	0e 94 30 09 	call	0x1260	; 0x1260 <clear>
				print("Solved!");
     716:	8e e5       	ldi	r24, 0x5E	; 94
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 3f 09 	call	0x127e	; 0x127e <print>
				lcd_goto_xy(0,1);
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
				print("Press B");
     726:	86 e6       	ldi	r24, 0x66	; 102
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 3f 09 	call	0x127e	; 0x127e <print>
     72e:	02 c0       	rjmp	.+4      	; 0x734 <maze_solve+0x142>
			}
			else
				display_path();
     730:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_path>
			delay_ms(30);
     734:	8e e1       	ldi	r24, 0x1E	; 30
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
     73c:	da cf       	rjmp	.-76     	; 0x6f2 <maze_solve+0x100>
		}
		while(button_is_pressed(BUTTON_B));
     73e:	80 e1       	ldi	r24, 0x10	; 16
     740:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     744:	81 11       	cpse	r24, r1
     746:	fb cf       	rjmp	.-10     	; 0x73e <maze_solve+0x14c>
	
		delay_ms(1000);
     748:	88 ee       	ldi	r24, 0xE8	; 232
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

		// Re-run the maze.  It's not necessary to identify the
		// intersections, so this loop is really simple.
		int i;
		for(i=0;i<path_length;i++)
     750:	0e ed       	ldi	r16, 0xDE	; 222
     752:	11 e0       	ldi	r17, 0x01	; 1
     754:	80 91 dd 01 	lds	r24, 0x01DD
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a8 01       	movw	r20, r16
     75c:	4e 5d       	subi	r20, 0xDE	; 222
     75e:	51 40       	sbci	r21, 0x01	; 1
     760:	48 17       	cp	r20, r24
     762:	59 07       	cpc	r21, r25
     764:	e4 f4       	brge	.+56     	; 0x79e <maze_solve+0x1ac>
		{
			// SECOND MAIN LOOP BODY  
			follow_segment();
     766:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

			// Drive straight while slowing down, as before.
			set_motors(50,50);
     76a:	62 e3       	ldi	r22, 0x32	; 50
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	82 e3       	ldi	r24, 0x32	; 50
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
			delay_ms(50);
     776:	82 e3       	ldi	r24, 0x32	; 50
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			set_motors(40,40);
     77e:	68 e2       	ldi	r22, 0x28	; 40
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	88 e2       	ldi	r24, 0x28	; 40
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
			delay_ms(200);
     78a:	88 ec       	ldi	r24, 0xC8	; 200
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

			// Make a turn according to the instruction stored in
			// path[i].
			turn(path[i]);
     792:	f8 01       	movw	r30, r16
     794:	81 91       	ld	r24, Z+
     796:	8f 01       	movw	r16, r30
     798:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <turn>
     79c:	db cf       	rjmp	.-74     	; 0x754 <maze_solve+0x162>
		}
		
		// Follow the last segment up to the finish.
		follow_segment();
     79e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Now we should be at the finish!  Restart the loop.
	}
     7a2:	9d cf       	rjmp	.-198    	; 0x6de <maze_solve+0xec>

000007a4 <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     7a4:	8c 34       	cpi	r24, 0x4C	; 76
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <turn+0x1e>
     7a8:	82 35       	cpi	r24, 0x52	; 82
     7aa:	81 f0       	breq	.+32     	; 0x7cc <turn+0x28>
     7ac:	82 34       	cpi	r24, 0x42	; 66
     7ae:	c1 f4       	brne	.+48     	; 0x7e0 <turn+0x3c>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     7b0:	60 eb       	ldi	r22, 0xB0	; 176
     7b2:	7f ef       	ldi	r23, 0xFF	; 255
     7b4:	80 e5       	ldi	r24, 0x50	; 80
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		delay_ms(400);
     7bc:	80 e9       	ldi	r24, 0x90	; 144
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0d c0       	rjmp	.+26     	; 0x7dc <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     7c2:	60 e5       	ldi	r22, 0x50	; 80
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	80 eb       	ldi	r24, 0xB0	; 176
     7c8:	9f ef       	ldi	r25, 0xFF	; 255
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <turn+0x30>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     7cc:	60 eb       	ldi	r22, 0xB0	; 176
     7ce:	7f ef       	ldi	r23, 0xFF	; 255
     7d0:	80 e5       	ldi	r24, 0x50	; 80
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		delay_ms(200);
     7d8:	88 ec       	ldi	r24, 0xC8	; 200
     7da:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     7dc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <delay_ms>
     7e0:	08 95       	ret

000007e2 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     7e2:	ec e7       	ldi	r30, 0x7C	; 124
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	8f 7d       	andi	r24, 0xDF	; 223
     7ea:	80 83       	st	Z, r24
     7ec:	08 95       	ret

000007ee <_ZN15OrangutanAnalog7setModeEh>:
     7ee:	81 11       	cpse	r24, r1
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <_ZN15OrangutanAnalog7setModeEh+0xa>
     7f2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_ZN15OrangutanAnalog7setModeEh.part.0>
     7f6:	08 95       	ret
     7f8:	80 91 7c 00 	lds	r24, 0x007C
     7fc:	80 62       	ori	r24, 0x20	; 32
     7fe:	80 93 7c 00 	sts	0x007C, r24
     802:	08 95       	ret

00000804 <_ZN15OrangutanAnalog7getModeEv>:
     804:	80 91 7c 00 	lds	r24, 0x007C
     808:	85 fb       	bst	r24, 5
     80a:	88 27       	eor	r24, r24
     80c:	80 f9       	bld	r24, 0
     80e:	08 95       	ret

00000810 <_ZN15OrangutanAnalog16conversionResultEv>:
     810:	0e 94 02 04 	call	0x804	; 0x804 <_ZN15OrangutanAnalog7getModeEv>
     814:	88 23       	and	r24, r24
     816:	21 f0       	breq	.+8      	; 0x820 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     818:	80 91 79 00 	lds	r24, 0x0079
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	08 95       	ret
     820:	80 91 78 00 	lds	r24, 0x0078
     824:	90 91 79 00 	lds	r25, 0x0079
     828:	08 95       	ret

0000082a <_ZN15OrangutanAnalog15startConversionEhh>:
     82a:	80 32       	cpi	r24, 0x20	; 32
     82c:	a0 f4       	brcc	.+40     	; 0x856 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     82e:	97 e8       	ldi	r25, 0x87	; 135
     830:	90 93 7a 00 	sts	0x007A, r25
     834:	90 91 7c 00 	lds	r25, 0x007C
     838:	66 23       	and	r22, r22
     83a:	11 f0       	breq	.+4      	; 0x840 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     83c:	90 6c       	ori	r25, 0xC0	; 192
     83e:	02 c0       	rjmp	.+4      	; 0x844 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     840:	9f 77       	andi	r25, 0x7F	; 127
     842:	90 64       	ori	r25, 0x40	; 64
     844:	90 7e       	andi	r25, 0xE0	; 224
     846:	98 2b       	or	r25, r24
     848:	90 93 7c 00 	sts	0x007C, r25
     84c:	80 91 7a 00 	lds	r24, 0x007A
     850:	80 64       	ori	r24, 0x40	; 64
     852:	80 93 7a 00 	sts	0x007A, r24
     856:	08 95       	ret

00000858 <_ZN15OrangutanAnalog11readAverageEhj>:
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	e2 e3       	ldi	r30, 0x32	; 50
     85e:	f4 e0       	ldi	r31, 0x04	; 4
     860:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x14>
     864:	eb 01       	movw	r28, r22
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN15OrangutanAnalog15startConversionEhh>
     86c:	80 91 7a 00 	lds	r24, 0x007A
     870:	86 fd       	sbrc	r24, 6
     872:	fc cf       	rjmp	.-8      	; 0x86c <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     874:	8e 01       	movw	r16, r28
     876:	c1 2c       	mov	r12, r1
     878:	d1 2c       	mov	r13, r1
     87a:	76 01       	movw	r14, r12
     87c:	80 91 7a 00 	lds	r24, 0x007A
     880:	80 64       	ori	r24, 0x40	; 64
     882:	80 93 7a 00 	sts	0x007A, r24
     886:	80 91 7a 00 	lds	r24, 0x007A
     88a:	86 fd       	sbrc	r24, 6
     88c:	fc cf       	rjmp	.-8      	; 0x886 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     88e:	0e 94 08 04 	call	0x810	; 0x810 <_ZN15OrangutanAnalog16conversionResultEv>
     892:	c8 0e       	add	r12, r24
     894:	d9 1e       	adc	r13, r25
     896:	e1 1c       	adc	r14, r1
     898:	f1 1c       	adc	r15, r1
     89a:	01 50       	subi	r16, 0x01	; 1
     89c:	11 09       	sbc	r17, r1
     89e:	01 15       	cp	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	61 f7       	brne	.-40     	; 0x87c <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     8a4:	ce 01       	movw	r24, r28
     8a6:	96 95       	lsr	r25
     8a8:	87 95       	ror	r24
     8aa:	c0 34       	cpi	r28, 0x40	; 64
     8ac:	d1 05       	cpc	r29, r1
     8ae:	38 f4       	brcc	.+14     	; 0x8be <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     8b0:	8c 0d       	add	r24, r12
     8b2:	9d 1d       	adc	r25, r13
     8b4:	be 01       	movw	r22, r28
     8b6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     8ba:	cb 01       	movw	r24, r22
     8bc:	0e c0       	rjmp	.+28     	; 0x8da <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     8be:	a7 01       	movw	r20, r14
     8c0:	96 01       	movw	r18, r12
     8c2:	28 0f       	add	r18, r24
     8c4:	39 1f       	adc	r19, r25
     8c6:	41 1d       	adc	r20, r1
     8c8:	51 1d       	adc	r21, r1
     8ca:	ca 01       	movw	r24, r20
     8cc:	b9 01       	movw	r22, r18
     8ce:	9e 01       	movw	r18, r28
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
     8d8:	c9 01       	movw	r24, r18
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	e8 e0       	ldi	r30, 0x08	; 8
     8e0:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x14>

000008e4 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	a0 91 00 01 	lds	r26, 0x0100
     8f0:	b0 91 01 01 	lds	r27, 0x0101
     8f4:	9c 01       	movw	r18, r24
     8f6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	0e 94 02 04 	call	0x804	; 0x804 <_ZN15OrangutanAnalog7getModeEv>
     902:	88 23       	and	r24, r24
     904:	59 f0       	breq	.+22     	; 0x91c <__stack+0x1d>
     906:	c7 01       	movw	r24, r14
     908:	b6 01       	movw	r22, r12
     90a:	61 58       	subi	r22, 0x81	; 129
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	8f 4f       	sbci	r24, 0xFF	; 255
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	2f ef       	ldi	r18, 0xFF	; 255
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	0a c0       	rjmp	.+20     	; 0x930 <__stack+0x31>
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	61 50       	subi	r22, 0x01	; 1
     922:	7e 4f       	sbci	r23, 0xFE	; 254
     924:	8f 4f       	sbci	r24, 0xFF	; 255
     926:	9f 4f       	sbci	r25, 0xFF	; 255
     928:	2f ef       	ldi	r18, 0xFF	; 255
     92a:	33 e0       	ldi	r19, 0x03	; 3
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
     934:	c9 01       	movw	r24, r18
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	08 95       	ret

00000940 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     940:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN15OrangutanAnalog11readAverageEhj>
     944:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN15OrangutanAnalog12toMillivoltsEj>
     948:	08 95       	ret

0000094a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	0e 94 02 04 	call	0x804	; 0x804 <_ZN15OrangutanAnalog7getModeEv>
     954:	18 2f       	mov	r17, r24
     956:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_ZN15OrangutanAnalog7setModeEh.part.0>
     95a:	6a e0       	ldi	r22, 0x0A	; 10
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	86 e0       	ldi	r24, 0x06	; 6
     960:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     964:	ec 01       	movw	r28, r24
     966:	81 2f       	mov	r24, r17
     968:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN15OrangutanAnalog7setModeEh>
     96c:	ce 01       	movw	r24, r28
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	8c 0f       	add	r24, r28
     974:	9d 1f       	adc	r25, r29
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	96 95       	lsr	r25
     97a:	87 95       	ror	r24
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	08 95       	ret

00000984 <read_battery_millivolts_3pi>:
     984:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     988:	08 95       	ret

0000098a <_ZL16currentCharacterv>:
     98a:	90 91 73 01 	lds	r25, 0x0173
     98e:	e0 91 6e 01 	lds	r30, 0x016E
     992:	f0 91 6f 01 	lds	r31, 0x016F
     996:	99 23       	and	r25, r25
     998:	11 f0       	breq	.+4      	; 0x99e <_ZL16currentCharacterv+0x14>
     99a:	84 91       	lpm	r24, Z
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <_ZL16currentCharacterv+0x16>
     99e:	80 81       	ld	r24, Z
     9a0:	2f eb       	ldi	r18, 0xBF	; 191
     9a2:	28 0f       	add	r18, r24
     9a4:	2a 31       	cpi	r18, 0x1A	; 26
     9a6:	10 f4       	brcc	.+4      	; 0x9ac <_ZL16currentCharacterv+0x22>
     9a8:	80 5e       	subi	r24, 0xE0	; 224
     9aa:	08 95       	ret
     9ac:	80 32       	cpi	r24, 0x20	; 32
     9ae:	49 f4       	brne	.+18     	; 0x9c2 <_ZL16currentCharacterv+0x38>
     9b0:	9f 01       	movw	r18, r30
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	30 93 6f 01 	sts	0x016F, r19
     9ba:	20 93 6e 01 	sts	0x016E, r18
     9be:	ef 2b       	or	r30, r31
     9c0:	31 f7       	brne	.-52     	; 0x98e <_ZL16currentCharacterv+0x4>
     9c2:	08 95       	ret

000009c4 <_ZL9getNumberv>:
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
     9d2:	1a e0       	ldi	r17, 0x0A	; 10
     9d4:	90 ed       	ldi	r25, 0xD0	; 208
     9d6:	98 0f       	add	r25, r24
     9d8:	9a 30       	cpi	r25, 0x0A	; 10
     9da:	b8 f4       	brcc	.+46     	; 0xa0a <_ZL9getNumberv+0x46>
     9dc:	9e 01       	movw	r18, r28
     9de:	12 9f       	mul	r17, r18
     9e0:	e0 01       	movw	r28, r0
     9e2:	13 9f       	mul	r17, r19
     9e4:	d0 0d       	add	r29, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	c8 0f       	add	r28, r24
     9ea:	d1 1d       	adc	r29, r1
     9ec:	87 fd       	sbrc	r24, 7
     9ee:	da 95       	dec	r29
     9f0:	e0 97       	sbiw	r28, 0x30	; 48
     9f2:	80 91 6e 01 	lds	r24, 0x016E
     9f6:	90 91 6f 01 	lds	r25, 0x016F
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	90 93 6f 01 	sts	0x016F, r25
     a00:	80 93 6e 01 	sts	0x016E, r24
     a04:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     a08:	e5 cf       	rjmp	.-54     	; 0x9d4 <_ZL9getNumberv+0x10>
     a0a:	ce 01       	movw	r24, r28
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	08 95       	ret

00000a14 <_ZN15OrangutanBuzzer5init2Ev>:
     a14:	10 92 6f 00 	sts	0x006F, r1
     a18:	83 e2       	ldi	r24, 0x23	; 35
     a1a:	80 93 80 00 	sts	0x0080, r24
     a1e:	81 e1       	ldi	r24, 0x11	; 17
     a20:	80 93 81 00 	sts	0x0081, r24
     a24:	10 92 82 00 	sts	0x0082, r1
     a28:	80 e1       	ldi	r24, 0x10	; 16
     a2a:	97 e2       	ldi	r25, 0x27	; 39
     a2c:	90 93 89 00 	sts	0x0089, r25
     a30:	80 93 88 00 	sts	0x0088, r24
     a34:	10 92 8b 00 	sts	0x008B, r1
     a38:	10 92 8a 00 	sts	0x008A, r1
     a3c:	22 9a       	sbi	0x04, 2	; 4
     a3e:	78 94       	sei
     a40:	08 95       	ret

00000a42 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     a42:	8f 92       	push	r8
     a44:	9f 92       	push	r9
     a46:	af 92       	push	r10
     a48:	bf 92       	push	r11
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	5c 01       	movw	r10, r24
     a5a:	8b 01       	movw	r16, r22
     a5c:	d4 2e       	mov	r13, r20
     a5e:	80 91 70 01 	lds	r24, 0x0170
     a62:	81 11       	cpse	r24, r1
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 70 01 	sts	0x0170, r24
     a6c:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN15OrangutanBuzzer5init2Ev>
     a70:	10 92 0b 01 	sts	0x010B, r1
     a74:	b7 fe       	sbrs	r11, 7
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     a78:	e8 94       	clt
     a7a:	b7 f8       	bld	r11, 7
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	f2 2e       	mov	r15, r18
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     a82:	ff 24       	eor	r15, r15
     a84:	f3 94       	inc	r15
     a86:	e0 90 81 00 	lds	r14, 0x0081
     a8a:	2e 2d       	mov	r18, r14
     a8c:	28 7f       	andi	r18, 0xF8	; 248
     a8e:	e2 2e       	mov	r14, r18
     a90:	48 ec       	ldi	r20, 0xC8	; 200
     a92:	f4 9e       	mul	r15, r20
     a94:	c0 01       	movw	r24, r0
     a96:	11 24       	eor	r1, r1
     a98:	8a 15       	cp	r24, r10
     a9a:	9b 05       	cpc	r25, r11
     a9c:	e0 f4       	brcc	.+56     	; 0xad6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     a9e:	e5 01       	movw	r28, r10
     aa0:	51 e1       	ldi	r21, 0x11	; 17
     aa2:	a5 16       	cp	r10, r21
     aa4:	57 e2       	ldi	r21, 0x27	; 39
     aa6:	b5 06       	cpc	r11, r21
     aa8:	10 f0       	brcs	.+4      	; 0xaae <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     aaa:	c0 e1       	ldi	r28, 0x10	; 16
     aac:	d7 e2       	ldi	r29, 0x27	; 39
     aae:	be 01       	movw	r22, r28
     ab0:	76 95       	lsr	r23
     ab2:	67 95       	ror	r22
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	60 58       	subi	r22, 0x80	; 128
     aba:	79 46       	sbci	r23, 0x69	; 105
     abc:	87 46       	sbci	r24, 0x67	; 103
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	4e 01       	movw	r8, r28
     ac2:	a1 2c       	mov	r10, r1
     ac4:	b1 2c       	mov	r11, r1
     ac6:	a5 01       	movw	r20, r10
     ac8:	94 01       	movw	r18, r8
     aca:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
     ace:	59 01       	movw	r10, r18
     ad0:	8e 2d       	mov	r24, r14
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	24 c0       	rjmp	.+72     	; 0xb1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     ad6:	c8 e2       	ldi	r28, 0x28	; 40
     ad8:	fc 9e       	mul	r15, r28
     ada:	c0 2d       	mov	r28, r0
     adc:	11 24       	eor	r1, r1
     ade:	d0 e0       	ldi	r29, 0x00	; 0
     ae0:	ca 15       	cp	r28, r10
     ae2:	db 05       	cpc	r29, r11
     ae4:	08 f4       	brcc	.+2      	; 0xae8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     ae6:	e5 01       	movw	r28, r10
     ae8:	be 01       	movw	r22, r28
     aea:	76 95       	lsr	r23
     aec:	67 95       	ror	r22
     aee:	9e 01       	movw	r18, r28
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	f8 12       	cpse	r15, r24
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	60 5e       	subi	r22, 0xE0	; 224
     b00:	73 44       	sbci	r23, 0x43	; 67
     b02:	81 44       	sbci	r24, 0x41	; 65
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	60 53       	subi	r22, 0x30	; 48
     b0e:	7d 4e       	sbci	r23, 0xED	; 237
     b10:	8c 4e       	sbci	r24, 0xEC	; 236
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
     b18:	59 01       	movw	r10, r18
     b1a:	8e 2d       	mov	r24, r14
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	88 2e       	mov	r8, r24
     b20:	2a e0       	ldi	r18, 0x0A	; 10
     b22:	f2 12       	cpse	r15, r18
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     b26:	ce 01       	movw	r24, r28
     b28:	05 96       	adiw	r24, 0x05	; 5
     b2a:	6a e0       	ldi	r22, 0x0A	; 10
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     b32:	eb 01       	movw	r28, r22
     b34:	c8 3e       	cpi	r28, 0xE8	; 232
     b36:	43 e0       	ldi	r20, 0x03	; 3
     b38:	d4 07       	cpc	r29, r20
     b3a:	59 f0       	breq	.+22     	; 0xb52 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     b3c:	98 01       	movw	r18, r16
     b3e:	de 01       	movw	r26, r28
     b40:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     b44:	28 ee       	ldi	r18, 0xE8	; 232
     b46:	33 e0       	ldi	r19, 0x03	; 3
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 c6 11 	call	0x238c	; 0x238c <__divmodsi4>
     b50:	89 01       	movw	r16, r18
     b52:	10 92 6f 00 	sts	0x006F, r1
     b56:	80 92 81 00 	sts	0x0081, r8
     b5a:	b0 92 89 00 	sts	0x0089, r11
     b5e:	a0 92 88 00 	sts	0x0088, r10
     b62:	20 91 88 00 	lds	r18, 0x0088
     b66:	30 91 89 00 	lds	r19, 0x0089
     b6a:	4d 2d       	mov	r20, r13
     b6c:	40 31       	cpi	r20, 0x10	; 16
     b6e:	08 f0       	brcs	.+2      	; 0xb72 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     b70:	4f e0       	ldi	r20, 0x0F	; 15
     b72:	80 e1       	ldi	r24, 0x10	; 16
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	84 1b       	sub	r24, r20
     b78:	91 09       	sbc	r25, r1
     b7a:	a9 01       	movw	r20, r18
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	8a 95       	dec	r24
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     b86:	50 93 8b 00 	sts	0x008B, r21
     b8a:	40 93 8a 00 	sts	0x008A, r20
     b8e:	10 93 76 01 	sts	0x0176, r17
     b92:	00 93 75 01 	sts	0x0175, r16
     b96:	86 b3       	in	r24, 0x16	; 22
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	86 bb       	out	0x16, r24	; 22
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 6f 00 	sts	0x006F, r24
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	08 95       	ret

00000bba <_ZN15OrangutanBuzzer8playNoteEhjh>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	eb 01       	movw	r28, r22
     bc0:	8f 3f       	cpi	r24, 0xFF	; 255
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     bc4:	41 11       	cpse	r20, r1
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	be 01       	movw	r22, r28
     bcc:	88 ee       	ldi	r24, 0xE8	; 232
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	43 c0       	rjmp	.+134    	; 0xc58 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     bd2:	81 31       	cpi	r24, 0x11	; 17
     bd4:	30 f0       	brcs	.+12     	; 0xbe2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     bd6:	50 ef       	ldi	r21, 0xF0	; 240
     bd8:	58 0f       	add	r21, r24
     bda:	50 36       	cpi	r21, 0x60	; 96
     bdc:	18 f0       	brcs	.+6      	; 0xbe4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     bde:	5f e5       	ldi	r21, 0x5F	; 95
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	85 2f       	mov	r24, r21
     be6:	6c e0       	ldi	r22, 0x0C	; 12
     be8:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__udivmodqi4>
     bec:	68 2f       	mov	r22, r24
     bee:	74 ef       	ldi	r23, 0xF4	; 244
     bf0:	76 03       	mulsu	r23, r22
     bf2:	90 01       	movw	r18, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	25 0f       	add	r18, r21
     bf8:	31 1d       	adc	r19, r1
     bfa:	2c 30       	cpi	r18, 0x0C	; 12
     bfc:	31 05       	cpc	r19, r1
     bfe:	40 f4       	brcc	.+16     	; 0xc10 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     c00:	f9 01       	movw	r30, r18
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	e2 5e       	subi	r30, 0xE2	; 226
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	20 81       	ld	r18, Z
     c0c:	31 81       	ldd	r19, Z+1	; 0x01
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	87 30       	cpi	r24, 0x07	; 7
     c16:	81 f0       	breq	.+32     	; 0xc38 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     c18:	08 2e       	mov	r0, r24
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	28 f0       	brcs	.+10     	; 0xc32 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     c28:	c9 01       	movw	r24, r18
     c2a:	05 96       	adiw	r24, 0x05	; 5
     c2c:	6a e0       	ldi	r22, 0x0A	; 10
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0c c0       	rjmp	.+24     	; 0xc4a <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     c32:	c9 01       	movw	r24, r18
     c34:	90 58       	subi	r25, 0x80	; 128
     c36:	0c c0       	rjmp	.+24     	; 0xc50 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     c38:	c9 01       	movw	r24, r18
     c3a:	36 e0       	ldi	r19, 0x06	; 6
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	3a 95       	dec	r19
     c42:	e1 f7       	brne	.-8      	; 0xc3c <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     c44:	02 96       	adiw	r24, 0x02	; 2
     c46:	65 e0       	ldi	r22, 0x05	; 5
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     c4e:	cb 01       	movw	r24, r22
     c50:	40 31       	cpi	r20, 0x10	; 16
     c52:	08 f0       	brcs	.+2      	; 0xc56 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     c54:	4f e0       	ldi	r20, 0x0F	; 15
     c56:	be 01       	movw	r22, r28
     c58:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <_ZL8nextNotev>:
     c62:	a2 e0       	ldi	r26, 0x02	; 2
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x4>
     c6e:	90 90 0a 01 	lds	r9, 0x010A
     c72:	80 91 72 01 	lds	r24, 0x0172
     c76:	88 23       	and	r24, r24
     c78:	21 f0       	breq	.+8      	; 0xc82 <_ZL8nextNotev+0x20>
     c7a:	60 91 71 01 	lds	r22, 0x0171
     c7e:	61 11       	cpse	r22, r1
     c80:	17 c0       	rjmp	.+46     	; 0xcb0 <_ZL8nextNotev+0x4e>
     c82:	77 24       	eor	r7, r7
     c84:	73 94       	inc	r7
     c86:	b0 ec       	ldi	r27, 0xC0	; 192
     c88:	ab 2e       	mov	r10, r27
     c8a:	bd e5       	ldi	r27, 0x5D	; 93
     c8c:	bb 2e       	mov	r11, r27
     c8e:	1a e0       	ldi	r17, 0x0A	; 10
     c90:	61 2e       	mov	r6, r17
     c92:	04 e0       	ldi	r16, 0x04	; 4
     c94:	80 2e       	mov	r8, r16
     c96:	80 ed       	ldi	r24, 0xD0	; 208
     c98:	c8 2e       	mov	r12, r24
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	d8 2e       	mov	r13, r24
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	e9 2e       	mov	r14, r25
     ca2:	f1 2c       	mov	r15, r1
     ca4:	04 ef       	ldi	r16, 0xF4	; 244
     ca6:	11 e0       	ldi	r17, 0x01	; 1
     ca8:	2f e0       	ldi	r18, 0x0F	; 15
     caa:	42 2e       	mov	r4, r18
     cac:	51 2c       	mov	r5, r1
     cae:	15 c0       	rjmp	.+42     	; 0xcda <_ZL8nextNotev+0x78>
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	88 ee       	ldi	r24, 0xE8	; 232
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     cbc:	10 92 71 01 	sts	0x0171, r1
     cc0:	17 c1       	rjmp	.+558    	; 0xef0 <_ZL8nextNotev+0x28e>
     cc2:	86 36       	cpi	r24, 0x66	; 102
     cc4:	d4 f5       	brge	.+116    	; 0xd3a <_ZL8nextNotev+0xd8>
     cc6:	81 36       	cpi	r24, 0x61	; 97
     cc8:	09 f4       	brne	.+2      	; 0xccc <_ZL8nextNotev+0x6a>
     cca:	a9 c0       	rjmp	.+338    	; 0xe1e <_ZL8nextNotev+0x1bc>
     ccc:	7c f5       	brge	.+94     	; 0xd2c <_ZL8nextNotev+0xca>
     cce:	8c 33       	cpi	r24, 0x3C	; 60
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <_ZL8nextNotev+0x72>
     cd2:	60 c0       	rjmp	.+192    	; 0xd94 <_ZL8nextNotev+0x132>
     cd4:	8e 33       	cpi	r24, 0x3E	; 62
     cd6:	81 f4       	brne	.+32     	; 0xcf8 <_ZL8nextNotev+0x96>
     cd8:	93 94       	inc	r9
     cda:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     cde:	20 91 6e 01 	lds	r18, 0x016E
     ce2:	30 91 6f 01 	lds	r19, 0x016F
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	30 93 6f 01 	sts	0x016F, r19
     cee:	20 93 6e 01 	sts	0x016E, r18
     cf2:	85 36       	cpi	r24, 0x65	; 101
     cf4:	31 f7       	brne	.-52     	; 0xcc2 <_ZL8nextNotev+0x60>
     cf6:	52 c0       	rjmp	.+164    	; 0xd9c <_ZL8nextNotev+0x13a>
     cf8:	81 32       	cpi	r24, 0x21	; 33
     cfa:	09 f0       	breq	.+2      	; 0xcfe <_ZL8nextNotev+0x9c>
     cfc:	8b c0       	rjmp	.+278    	; 0xe14 <_ZL8nextNotev+0x1b2>
     cfe:	80 92 0a 01 	sts	0x010A, r8
     d02:	d0 92 09 01 	sts	0x0109, r13
     d06:	c0 92 08 01 	sts	0x0108, r12
     d0a:	f0 92 07 01 	sts	0x0107, r15
     d0e:	e0 92 06 01 	sts	0x0106, r14
     d12:	10 93 05 01 	sts	0x0105, r17
     d16:	00 93 04 01 	sts	0x0104, r16
     d1a:	50 92 03 01 	sts	0x0103, r5
     d1e:	40 92 02 01 	sts	0x0102, r4
     d22:	10 92 72 01 	sts	0x0172, r1
     d26:	a4 e0       	ldi	r26, 0x04	; 4
     d28:	9a 2e       	mov	r9, r26
     d2a:	d7 cf       	rjmp	.-82     	; 0xcda <_ZL8nextNotev+0x78>
     d2c:	83 36       	cpi	r24, 0x63	; 99
     d2e:	a1 f1       	breq	.+104    	; 0xd98 <_ZL8nextNotev+0x136>
     d30:	0c f4       	brge	.+2      	; 0xd34 <_ZL8nextNotev+0xd2>
     d32:	78 c0       	rjmp	.+240    	; 0xe24 <_ZL8nextNotev+0x1c2>
     d34:	10 e0       	ldi	r17, 0x00	; 0
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	77 c0       	rjmp	.+238    	; 0xe28 <_ZL8nextNotev+0x1c6>
     d3a:	8d 36       	cpi	r24, 0x6D	; 109
     d3c:	c1 f1       	breq	.+112    	; 0xdae <_ZL8nextNotev+0x14c>
     d3e:	94 f4       	brge	.+36     	; 0xd64 <_ZL8nextNotev+0x102>
     d40:	87 36       	cpi	r24, 0x67	; 103
     d42:	91 f1       	breq	.+100    	; 0xda8 <_ZL8nextNotev+0x146>
     d44:	74 f1       	brlt	.+92     	; 0xda2 <_ZL8nextNotev+0x140>
     d46:	8c 36       	cpi	r24, 0x6C	; 108
     d48:	09 f0       	breq	.+2      	; 0xd4c <_ZL8nextNotev+0xea>
     d4a:	64 c0       	rjmp	.+200    	; 0xe14 <_ZL8nextNotev+0x1b2>
     d4c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL9getNumberv>
     d50:	bc 01       	movw	r22, r24
     d52:	90 93 07 01 	sts	0x0107, r25
     d56:	80 93 06 01 	sts	0x0106, r24
     d5a:	80 91 08 01 	lds	r24, 0x0108
     d5e:	90 91 09 01 	lds	r25, 0x0109
     d62:	51 c0       	rjmp	.+162    	; 0xe06 <_ZL8nextNotev+0x1a4>
     d64:	82 37       	cpi	r24, 0x72	; 114
     d66:	c9 f1       	breq	.+114    	; 0xdda <_ZL8nextNotev+0x178>
     d68:	4c f4       	brge	.+18     	; 0xd7c <_ZL8nextNotev+0x11a>
     d6a:	8f 36       	cpi	r24, 0x6F	; 111
     d6c:	09 f0       	breq	.+2      	; 0xd70 <_ZL8nextNotev+0x10e>
     d6e:	52 c0       	rjmp	.+164    	; 0xe14 <_ZL8nextNotev+0x1b2>
     d70:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL9getNumberv>
     d74:	98 2e       	mov	r9, r24
     d76:	80 93 0a 01 	sts	0x010A, r24
     d7a:	af cf       	rjmp	.-162    	; 0xcda <_ZL8nextNotev+0x78>
     d7c:	84 37       	cpi	r24, 0x74	; 116
     d7e:	81 f1       	breq	.+96     	; 0xde0 <_ZL8nextNotev+0x17e>
     d80:	86 37       	cpi	r24, 0x76	; 118
     d82:	09 f0       	breq	.+2      	; 0xd86 <_ZL8nextNotev+0x124>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <_ZL8nextNotev+0x1b2>
     d86:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL9getNumberv>
     d8a:	90 93 03 01 	sts	0x0103, r25
     d8e:	80 93 02 01 	sts	0x0102, r24
     d92:	a3 cf       	rjmp	.-186    	; 0xcda <_ZL8nextNotev+0x78>
     d94:	9a 94       	dec	r9
     d96:	a1 cf       	rjmp	.-190    	; 0xcda <_ZL8nextNotev+0x78>
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	20 c0       	rjmp	.+64     	; 0xddc <_ZL8nextNotev+0x17a>
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	43 c0       	rjmp	.+134    	; 0xe28 <_ZL8nextNotev+0x1c6>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	40 c0       	rjmp	.+128    	; 0xe28 <_ZL8nextNotev+0x1c6>
     da8:	10 e0       	ldi	r17, 0x00	; 0
     daa:	87 e0       	ldi	r24, 0x07	; 7
     dac:	3d c0       	rjmp	.+122    	; 0xe28 <_ZL8nextNotev+0x1c6>
     dae:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     db2:	8c 36       	cpi	r24, 0x6C	; 108
     db4:	19 f4       	brne	.+6      	; 0xdbc <_ZL8nextNotev+0x15a>
     db6:	10 92 72 01 	sts	0x0172, r1
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <_ZL8nextNotev+0x162>
     dbc:	70 92 72 01 	sts	0x0172, r7
     dc0:	10 92 71 01 	sts	0x0171, r1
     dc4:	20 91 6e 01 	lds	r18, 0x016E
     dc8:	30 91 6f 01 	lds	r19, 0x016F
     dcc:	2f 5f       	subi	r18, 0xFF	; 255
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	30 93 6f 01 	sts	0x016F, r19
     dd4:	20 93 6e 01 	sts	0x016E, r18
     dd8:	80 cf       	rjmp	.-256    	; 0xcda <_ZL8nextNotev+0x78>
     dda:	11 e0       	ldi	r17, 0x01	; 1
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	24 c0       	rjmp	.+72     	; 0xe28 <_ZL8nextNotev+0x1c6>
     de0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL9getNumberv>
     de4:	bc 01       	movw	r22, r24
     de6:	c5 01       	movw	r24, r10
     de8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     dec:	66 9e       	mul	r6, r22
     dee:	c0 01       	movw	r24, r0
     df0:	67 9e       	mul	r6, r23
     df2:	90 0d       	add	r25, r0
     df4:	11 24       	eor	r1, r1
     df6:	90 93 09 01 	sts	0x0109, r25
     dfa:	80 93 08 01 	sts	0x0108, r24
     dfe:	60 91 06 01 	lds	r22, 0x0106
     e02:	70 91 07 01 	lds	r23, 0x0107
     e06:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     e0a:	70 93 05 01 	sts	0x0105, r23
     e0e:	60 93 04 01 	sts	0x0104, r22
     e12:	63 cf       	rjmp	.-314    	; 0xcda <_ZL8nextNotev+0x78>
     e14:	10 92 6f 01 	sts	0x016F, r1
     e18:	10 92 6e 01 	sts	0x016E, r1
     e1c:	69 c0       	rjmp	.+210    	; 0xef0 <_ZL8nextNotev+0x28e>
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	89 e0       	ldi	r24, 0x09	; 9
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <_ZL8nextNotev+0x1c6>
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	8b e0       	ldi	r24, 0x0B	; 11
     e28:	08 2f       	mov	r16, r24
     e2a:	9c e0       	ldi	r25, 0x0C	; 12
     e2c:	99 9e       	mul	r9, r25
     e2e:	00 0d       	add	r16, r0
     e30:	11 24       	eor	r1, r1
     e32:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     e36:	98 2f       	mov	r25, r24
     e38:	97 7f       	andi	r25, 0xF7	; 247
     e3a:	93 32       	cpi	r25, 0x23	; 35
     e3c:	61 f4       	brne	.+24     	; 0xe56 <_ZL8nextNotev+0x1f4>
     e3e:	20 91 6e 01 	lds	r18, 0x016E
     e42:	30 91 6f 01 	lds	r19, 0x016F
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	30 93 6f 01 	sts	0x016F, r19
     e4e:	20 93 6e 01 	sts	0x016E, r18
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	ee cf       	rjmp	.-36     	; 0xe32 <_ZL8nextNotev+0x1d0>
     e56:	8d 32       	cpi	r24, 0x2D	; 45
     e58:	71 f4       	brne	.+28     	; 0xe76 <_ZL8nextNotev+0x214>
     e5a:	20 91 6e 01 	lds	r18, 0x016E
     e5e:	30 91 6f 01 	lds	r19, 0x016F
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	30 93 6f 01 	sts	0x016F, r19
     e6a:	20 93 6e 01 	sts	0x016E, r18
     e6e:	01 50       	subi	r16, 0x01	; 1
     e70:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     e74:	f0 cf       	rjmp	.-32     	; 0xe56 <_ZL8nextNotev+0x1f4>
     e76:	60 91 04 01 	lds	r22, 0x0104
     e7a:	70 91 05 01 	lds	r23, 0x0105
     e7e:	81 53       	subi	r24, 0x31	; 49
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	50 f4       	brcc	.+20     	; 0xe98 <_ZL8nextNotev+0x236>
     e84:	e0 90 08 01 	lds	r14, 0x0108
     e88:	f0 90 09 01 	lds	r15, 0x0109
     e8c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZL9getNumberv>
     e90:	bc 01       	movw	r22, r24
     e92:	c7 01       	movw	r24, r14
     e94:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
     e98:	7b 01       	movw	r14, r22
     e9a:	f6 94       	lsr	r15
     e9c:	e7 94       	ror	r14
     e9e:	69 83       	std	Y+1, r22	; 0x01
     ea0:	7a 83       	std	Y+2, r23	; 0x02
     ea2:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZL16currentCharacterv>
     ea6:	69 81       	ldd	r22, Y+1	; 0x01
     ea8:	7a 81       	ldd	r23, Y+2	; 0x02
     eaa:	8e 32       	cpi	r24, 0x2E	; 46
     eac:	69 f4       	brne	.+26     	; 0xec8 <_ZL8nextNotev+0x266>
     eae:	20 91 6e 01 	lds	r18, 0x016E
     eb2:	30 91 6f 01 	lds	r19, 0x016F
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	30 93 6f 01 	sts	0x016F, r19
     ebe:	20 93 6e 01 	sts	0x016E, r18
     ec2:	6e 0d       	add	r22, r14
     ec4:	7f 1d       	adc	r23, r15
     ec6:	e9 cf       	rjmp	.-46     	; 0xe9a <_ZL8nextNotev+0x238>
     ec8:	80 91 72 01 	lds	r24, 0x0172
     ecc:	88 23       	and	r24, r24
     ece:	39 f0       	breq	.+14     	; 0xede <_ZL8nextNotev+0x27c>
     ed0:	9b 01       	movw	r18, r22
     ed2:	36 95       	lsr	r19
     ed4:	27 95       	ror	r18
     ed6:	20 93 71 01 	sts	0x0171, r18
     eda:	62 1b       	sub	r22, r18
     edc:	71 09       	sbc	r23, r1
     ede:	40 91 02 01 	lds	r20, 0x0102
     ee2:	11 23       	and	r17, r17
     ee4:	11 f0       	breq	.+4      	; 0xeea <_ZL8nextNotev+0x288>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <_ZL8nextNotev+0x28a>
     eea:	80 2f       	mov	r24, r16
     eec:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN15OrangutanBuzzer8playNoteEhjh>
     ef0:	22 96       	adiw	r28, 0x02	; 2
     ef2:	e0 e1       	ldi	r30, 0x10	; 16
     ef4:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x4>

00000ef8 <__vector_13>:
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	2f 93       	push	r18
     f04:	3f 93       	push	r19
     f06:	4f 93       	push	r20
     f08:	5f 93       	push	r21
     f0a:	6f 93       	push	r22
     f0c:	7f 93       	push	r23
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	af 93       	push	r26
     f14:	bf 93       	push	r27
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
     f1a:	80 91 75 01 	lds	r24, 0x0175
     f1e:	90 91 76 01 	lds	r25, 0x0176
     f22:	9c 01       	movw	r18, r24
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	31 09       	sbc	r19, r1
     f28:	30 93 76 01 	sts	0x0176, r19
     f2c:	20 93 75 01 	sts	0x0175, r18
     f30:	89 2b       	or	r24, r25
     f32:	11 f5       	brne	.+68     	; 0xf78 <__vector_13+0x80>
     f34:	10 92 6f 00 	sts	0x006F, r1
     f38:	78 94       	sei
     f3a:	80 91 81 00 	lds	r24, 0x0081
     f3e:	88 7f       	andi	r24, 0xF8	; 248
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	80 93 81 00 	sts	0x0081, r24
     f46:	80 e1       	ldi	r24, 0x10	; 16
     f48:	97 e2       	ldi	r25, 0x27	; 39
     f4a:	90 93 89 00 	sts	0x0089, r25
     f4e:	80 93 88 00 	sts	0x0088, r24
     f52:	10 92 8b 00 	sts	0x008B, r1
     f56:	10 92 8a 00 	sts	0x008A, r1
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 0b 01 	sts	0x010B, r24
     f60:	80 91 6e 01 	lds	r24, 0x016E
     f64:	90 91 6f 01 	lds	r25, 0x016F
     f68:	89 2b       	or	r24, r25
     f6a:	31 f0       	breq	.+12     	; 0xf78 <__vector_13+0x80>
     f6c:	80 91 74 01 	lds	r24, 0x0174
     f70:	81 11       	cpse	r24, r1
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <__vector_13+0x80>
     f74:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZL8nextNotev>
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <_ZN15OrangutanBuzzer9isPlayingEv>:
     f9a:	80 91 0b 01 	lds	r24, 0x010B
     f9e:	88 23       	and	r24, r24
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	20 91 6e 01 	lds	r18, 0x016E
     fa8:	30 91 6f 01 	lds	r19, 0x016F
     fac:	23 2b       	or	r18, r19
     fae:	19 f4       	brne	.+6      	; 0xfb6 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	08 95       	ret
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	08 95       	ret

00000fb8 <is_playing>:
     fb8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN15OrangutanBuzzer9isPlayingEv>
     fbc:	08 95       	ret

00000fbe <_ZN15OrangutanBuzzer4playEPKc>:
     fbe:	10 92 6f 00 	sts	0x006F, r1
     fc2:	90 93 6f 01 	sts	0x016F, r25
     fc6:	80 93 6e 01 	sts	0x016E, r24
     fca:	10 92 73 01 	sts	0x0173, r1
     fce:	10 92 71 01 	sts	0x0171, r1
     fd2:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZL8nextNotev>
     fd6:	08 95       	ret

00000fd8 <play>:
     fd8:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN15OrangutanBuzzer4playEPKc>
     fdc:	08 95       	ret

00000fde <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
     fde:	10 92 6f 00 	sts	0x006F, r1
     fe2:	90 93 6f 01 	sts	0x016F, r25
     fe6:	80 93 6e 01 	sts	0x016E, r24
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 93 73 01 	sts	0x0173, r24
     ff0:	10 92 71 01 	sts	0x0171, r1
     ff4:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZL8nextNotev>
     ff8:	08 95       	ret

00000ffa <play_from_program_space>:
     ffa:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
     ffe:	08 95       	ret

00001000 <delay_us.constprop.0>:
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	6f 93       	push	r22
    1006:	64 e0       	ldi	r22, 0x04	; 4
    1008:	6a 95       	dec	r22
    100a:	f1 f7       	brne	.-4      	; 0x1008 <delay_us.constprop.0+0x8>
    100c:	6f 91       	pop	r22
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	c9 f7       	brne	.-14     	; 0x1004 <delay_us.constprop.0+0x4>
    1012:	08 95       	ret

00001014 <_ZN12OrangutanLCD8busyWaitEv>:
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	1a b1       	in	r17, 0x0a	; 10
    101e:	57 98       	cbi	0x0a, 7	; 10
    1020:	5a 98       	cbi	0x0b, 2	; 11
    1022:	28 9a       	sbi	0x05, 0	; 5
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	d0 e0       	ldi	r29, 0x00	; 0
    1028:	0e 94 00 08 	call	0x1000	; 0x1000 <delay_us.constprop.0>
    102c:	5c 9a       	sbi	0x0b, 4	; 11
    102e:	0e 94 00 08 	call	0x1000	; 0x1000 <delay_us.constprop.0>
    1032:	09 b1       	in	r16, 0x09	; 9
    1034:	5c 98       	cbi	0x0b, 4	; 11
    1036:	0e 94 00 08 	call	0x1000	; 0x1000 <delay_us.constprop.0>
    103a:	5c 9a       	sbi	0x0b, 4	; 11
    103c:	0e 94 00 08 	call	0x1000	; 0x1000 <delay_us.constprop.0>
    1040:	5c 98       	cbi	0x0b, 4	; 11
    1042:	24 96       	adiw	r28, 0x04	; 4
    1044:	07 ff       	sbrs	r16, 7
    1046:	10 c0       	rjmp	.+32     	; 0x1068 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1048:	ae 01       	movw	r20, r28
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	80 91 77 01 	lds	r24, 0x0177
    1052:	90 91 78 01 	lds	r25, 0x0178
    1056:	a0 91 79 01 	lds	r26, 0x0179
    105a:	b0 91 7a 01 	lds	r27, 0x017A
    105e:	48 17       	cp	r20, r24
    1060:	59 07       	cpc	r21, r25
    1062:	6a 07       	cpc	r22, r26
    1064:	7b 07       	cpc	r23, r27
    1066:	00 f3       	brcs	.-64     	; 0x1028 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1068:	1a b9       	out	0x0a, r17	; 10
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <_ZN12OrangutanLCD8sendDataEh>:
    1074:	95 b1       	in	r25, 0x05	; 5
    1076:	28 2f       	mov	r18, r24
    1078:	21 70       	andi	r18, 0x01	; 1
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	48 2f       	mov	r20, r24
    1082:	46 70       	andi	r20, 0x06	; 6
    1084:	68 e0       	ldi	r22, 0x08	; 8
    1086:	46 9f       	mul	r20, r22
    1088:	a0 01       	movw	r20, r0
    108a:	11 24       	eor	r1, r1
    108c:	24 2b       	or	r18, r20
    108e:	9d 7c       	andi	r25, 0xCD	; 205
    1090:	29 2b       	or	r18, r25
    1092:	25 b9       	out	0x05, r18	; 5
    1094:	9b b1       	in	r25, 0x0b	; 11
    1096:	88 70       	andi	r24, 0x08	; 8
    1098:	82 95       	swap	r24
    109a:	80 7f       	andi	r24, 0xF0	; 240
    109c:	9f 77       	andi	r25, 0x7F	; 127
    109e:	89 2b       	or	r24, r25
    10a0:	8b b9       	out	0x0b, r24	; 11
    10a2:	5c 9a       	sbi	0x0b, 4	; 11
    10a4:	0e 94 00 08 	call	0x1000	; 0x1000 <delay_us.constprop.0>
    10a8:	5c 98       	cbi	0x0b, 4	; 11
    10aa:	0e 94 00 08 	call	0x1000	; 0x1000 <delay_us.constprop.0>
    10ae:	08 95       	ret

000010b0 <_ZN12OrangutanLCD4sendEhhh>:
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ee e5       	ldi	r30, 0x5E	; 94
    10b6:	f8 e0       	ldi	r31, 0x08	; 8
    10b8:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x16>
    10bc:	c8 2f       	mov	r28, r24
    10be:	d6 2e       	mov	r13, r22
    10c0:	e4 2e       	mov	r14, r20
    10c2:	80 91 42 02 	lds	r24, 0x0242
    10c6:	81 11       	cpse	r24, r1
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <_ZN12OrangutanLCD4sendEhhh+0x24>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 42 02 	sts	0x0242, r24
    10d0:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN12OrangutanLCD5init2Ev>
    10d4:	0e 94 0a 08 	call	0x1014	; 0x1014 <_ZN12OrangutanLCD8busyWaitEv>
    10d8:	14 b1       	in	r17, 0x04	; 4
    10da:	d5 b1       	in	r29, 0x05	; 5
    10dc:	fa b0       	in	r15, 0x0a	; 10
    10de:	0b b1       	in	r16, 0x0b	; 11
    10e0:	28 98       	cbi	0x05, 0	; 5
    10e2:	dd 20       	and	r13, r13
    10e4:	11 f0       	breq	.+4      	; 0x10ea <_ZN12OrangutanLCD4sendEhhh+0x3a>
    10e6:	5a 9a       	sbi	0x0b, 2	; 11
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <_ZN12OrangutanLCD4sendEhhh+0x3c>
    10ea:	5a 98       	cbi	0x0b, 2	; 11
    10ec:	94 b1       	in	r25, 0x04	; 4
    10ee:	92 63       	ori	r25, 0x32	; 50
    10f0:	94 b9       	out	0x04, r25	; 4
    10f2:	57 9a       	sbi	0x0a, 7	; 10
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	e8 16       	cp	r14, r24
    10f8:	29 f0       	breq	.+10     	; 0x1104 <_ZN12OrangutanLCD4sendEhhh+0x54>
    10fa:	8c 2f       	mov	r24, r28
    10fc:	82 95       	swap	r24
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN12OrangutanLCD8sendDataEh>
    1104:	8c 2f       	mov	r24, r28
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN12OrangutanLCD8sendDataEh>
    110c:	fa b8       	out	0x0a, r15	; 10
    110e:	0b b9       	out	0x0b, r16	; 11
    1110:	14 b9       	out	0x04, r17	; 4
    1112:	d5 b9       	out	0x05, r29	; 5
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	e7 e0       	ldi	r30, 0x07	; 7
    111a:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x16>

0000111e <_ZN12OrangutanLCD8send_cmdEh>:
    111e:	42 e0       	ldi	r20, 0x02	; 2
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN12OrangutanLCD4sendEhhh>
    1126:	08 95       	ret

00001128 <_ZN12OrangutanLCD9send_dataEh>:
    1128:	42 e0       	ldi	r20, 0x02	; 2
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN12OrangutanLCD4sendEhhh>
    1130:	08 95       	ret

00001132 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    1132:	a1 e0       	ldi	r26, 0x01	; 1
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e9       	ldi	r30, 0x9F	; 159
    1138:	f8 e0       	ldi	r31, 0x08	; 8
    113a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x18>
    113e:	8c 01       	movw	r16, r24
    1140:	66 0f       	add	r22, r22
    1142:	66 0f       	add	r22, r22
    1144:	66 0f       	add	r22, r22
    1146:	e1 2c       	mov	r14, r1
    1148:	f1 2c       	mov	r15, r1
    114a:	8e 2d       	mov	r24, r14
    114c:	86 0f       	add	r24, r22
    114e:	80 64       	ori	r24, 0x40	; 64
    1150:	69 83       	std	Y+1, r22	; 0x01
    1152:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    1156:	f8 01       	movw	r30, r16
    1158:	ee 0d       	add	r30, r14
    115a:	ff 1d       	adc	r31, r15
    115c:	84 91       	lpm	r24, Z
    115e:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN12OrangutanLCD9send_dataEh>
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	e8 1a       	sub	r14, r24
    1166:	f8 0a       	sbc	r15, r24
    1168:	69 81       	ldd	r22, Y+1	; 0x01
    116a:	e8 e0       	ldi	r30, 0x08	; 8
    116c:	ee 16       	cp	r14, r30
    116e:	f1 04       	cpc	r15, r1
    1170:	61 f7       	brne	.-40     	; 0x114a <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    1172:	21 96       	adiw	r28, 0x01	; 1
    1174:	e6 e0       	ldi	r30, 0x06	; 6
    1176:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

0000117a <lcd_load_custom_character>:
    117a:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    117e:	08 95       	ret

00001180 <print_character>:
    1180:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN12OrangutanLCD9send_dataEh>
    1184:	08 95       	ret

00001186 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN12OrangutanLCD4sendEhhh>
    118e:	08 95       	ret

00001190 <_ZN12OrangutanLCD5init2Ev>:
    1190:	80 e1       	ldi	r24, 0x10	; 16
    1192:	97 e2       	ldi	r25, 0x27	; 39
    1194:	a0 e0       	ldi	r26, 0x00	; 0
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	80 93 77 01 	sts	0x0177, r24
    119c:	90 93 78 01 	sts	0x0178, r25
    11a0:	a0 93 79 01 	sts	0x0179, r26
    11a4:	b0 93 7a 01 	sts	0x017A, r27
    11a8:	52 9a       	sbi	0x0a, 2	; 10
    11aa:	20 9a       	sbi	0x04, 0	; 4
    11ac:	54 9a       	sbi	0x0a, 4	; 10
    11ae:	8e e1       	ldi	r24, 0x1E	; 30
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11bc:	86 e0       	ldi	r24, 0x06	; 6
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    11f4:	88 e0       	ldi	r24, 0x08	; 8
    11f6:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    1200:	86 e0       	ldi	r24, 0x06	; 6
    1202:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    1206:	8c e0       	ldi	r24, 0x0C	; 12
    1208:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    120c:	08 95       	ret

0000120e <_ZN12OrangutanLCD5clearEv>:
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    1214:	80 91 7d 01 	lds	r24, 0x017D
    1218:	90 91 7e 01 	lds	r25, 0x017E
    121c:	89 2b       	or	r24, r25
    121e:	f9 f0       	breq	.+62     	; 0x125e <_ZN12OrangutanLCD5clearEv+0x50>
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	a0 e2       	ldi	r26, 0x20	; 32
    1224:	26 2f       	mov	r18, r22
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	70 91 0c 01 	lds	r23, 0x010C
    122c:	80 91 0d 01 	lds	r24, 0x010D
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	78 9f       	mul	r23, r24
    1236:	a0 01       	movw	r20, r0
    1238:	79 9f       	mul	r23, r25
    123a:	50 0d       	add	r21, r0
    123c:	11 24       	eor	r1, r1
    123e:	24 17       	cp	r18, r20
    1240:	35 07       	cpc	r19, r21
    1242:	4c f4       	brge	.+18     	; 0x1256 <_ZN12OrangutanLCD5clearEv+0x48>
    1244:	e0 91 7d 01 	lds	r30, 0x017D
    1248:	f0 91 7e 01 	lds	r31, 0x017E
    124c:	e2 0f       	add	r30, r18
    124e:	f3 1f       	adc	r31, r19
    1250:	a0 83       	st	Z, r26
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	e7 cf       	rjmp	.-50     	; 0x1224 <_ZN12OrangutanLCD5clearEv+0x16>
    1256:	10 92 7b 01 	sts	0x017B, r1
    125a:	10 92 7c 01 	sts	0x017C, r1
    125e:	08 95       	ret

00001260 <clear>:
    1260:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN12OrangutanLCD5clearEv>
    1264:	08 95       	ret

00001266 <_ZN12OrangutanLCD5printEPKc>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
    126c:	89 91       	ld	r24, Y+
    126e:	88 23       	and	r24, r24
    1270:	19 f0       	breq	.+6      	; 0x1278 <_ZN12OrangutanLCD5printEPKc+0x12>
    1272:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN12OrangutanLCD9send_dataEh>
    1276:	fa cf       	rjmp	.-12     	; 0x126c <_ZN12OrangutanLCD5printEPKc+0x6>
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <print>:
    127e:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN12OrangutanLCD5printEPKc>
    1282:	08 95       	ret

00001284 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	fe 01       	movw	r30, r28
    128c:	84 91       	lpm	r24, Z
    128e:	88 23       	and	r24, r24
    1290:	21 f0       	breq	.+8      	; 0x129a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    1292:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN12OrangutanLCD9send_dataEh>
    1296:	21 96       	adiw	r28, 0x01	; 1
    1298:	f8 cf       	rjmp	.-16     	; 0x128a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <print_from_program_space>:
    12a0:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    12a4:	08 95       	ret

000012a6 <_ZN12OrangutanLCD5printEm>:
    12a6:	aa e0       	ldi	r26, 0x0A	; 10
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f9 e0       	ldi	r31, 0x09	; 9
    12ae:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x14>
    12b2:	1a e0       	ldi	r17, 0x0A	; 10
    12b4:	5a e0       	ldi	r21, 0x0A	; 10
    12b6:	c5 2e       	mov	r12, r21
    12b8:	d1 2c       	mov	r13, r1
    12ba:	e1 2c       	mov	r14, r1
    12bc:	f1 2c       	mov	r15, r1
    12be:	06 2f       	mov	r16, r22
    12c0:	a7 01       	movw	r20, r14
    12c2:	96 01       	movw	r18, r12
    12c4:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
    12c8:	ca 01       	movw	r24, r20
    12ca:	b9 01       	movw	r22, r18
    12cc:	11 50       	subi	r17, 0x01	; 1
    12ce:	e1 e0       	ldi	r30, 0x01	; 1
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ec 0f       	add	r30, r28
    12d4:	fd 1f       	adc	r31, r29
    12d6:	e1 0f       	add	r30, r17
    12d8:	f1 1d       	adc	r31, r1
    12da:	00 5d       	subi	r16, 0xD0	; 208
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	62 9f       	mul	r22, r18
    12e0:	00 19       	sub	r16, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	00 83       	st	Z, r16
    12e6:	61 15       	cp	r22, r1
    12e8:	71 05       	cpc	r23, r1
    12ea:	81 05       	cpc	r24, r1
    12ec:	91 05       	cpc	r25, r1
    12ee:	39 f7       	brne	.-50     	; 0x12be <_ZN12OrangutanLCD5printEm+0x18>
    12f0:	1a 30       	cpi	r17, 0x0A	; 10
    12f2:	58 f4       	brcc	.+22     	; 0x130a <_ZN12OrangutanLCD5printEm+0x64>
    12f4:	e1 e0       	ldi	r30, 0x01	; 1
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	ec 0f       	add	r30, r28
    12fa:	fd 1f       	adc	r31, r29
    12fc:	e1 0f       	add	r30, r17
    12fe:	f1 1d       	adc	r31, r1
    1300:	80 81       	ld	r24, Z
    1302:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN12OrangutanLCD9send_dataEh>
    1306:	1f 5f       	subi	r17, 0xFF	; 255
    1308:	f3 cf       	rjmp	.-26     	; 0x12f0 <_ZN12OrangutanLCD5printEm+0x4a>
    130a:	2a 96       	adiw	r28, 0x0a	; 10
    130c:	e8 e0       	ldi	r30, 0x08	; 8
    130e:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x14>

00001312 <_ZN12OrangutanLCD5printEl>:
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	6b 01       	movw	r12, r22
    131c:	7c 01       	movw	r14, r24
    131e:	97 ff       	sbrs	r25, 7
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <_ZN12OrangutanLCD5printEl+0x26>
    1322:	f0 94       	com	r15
    1324:	e0 94       	com	r14
    1326:	d0 94       	com	r13
    1328:	c0 94       	com	r12
    132a:	c1 1c       	adc	r12, r1
    132c:	d1 1c       	adc	r13, r1
    132e:	e1 1c       	adc	r14, r1
    1330:	f1 1c       	adc	r15, r1
    1332:	8d e2       	ldi	r24, 0x2D	; 45
    1334:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN12OrangutanLCD9send_dataEh>
    1338:	c7 01       	movw	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN12OrangutanLCD5printEm>
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	08 95       	ret

0000134a <print_long>:
    134a:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN12OrangutanLCD5printEl>
    134e:	08 95       	ret

00001350 <_ZN12OrangutanLCD6gotoXYEhh>:
    1350:	a5 e0       	ldi	r26, 0x05	; 5
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ee ea       	ldi	r30, 0xAE	; 174
    1356:	f9 e0       	ldi	r31, 0x09	; 9
    1358:	0c 94 16 12 	jmp	0x242c	; 0x242c <__prologue_saves__+0x1e>
    135c:	18 2f       	mov	r17, r24
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	80 ec       	ldi	r24, 0xC0	; 192
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	84 e9       	ldi	r24, 0x94	; 148
    1368:	8b 83       	std	Y+3, r24	; 0x03
    136a:	84 ed       	ldi	r24, 0xD4	; 212
    136c:	8c 83       	std	Y+4, r24	; 0x04
    136e:	fe 01       	movw	r30, r28
    1370:	e6 0f       	add	r30, r22
    1372:	f1 1d       	adc	r31, r1
    1374:	81 81       	ldd	r24, Z+1	; 0x01
    1376:	81 0f       	add	r24, r17
    1378:	6d 83       	std	Y+5, r22	; 0x05
    137a:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN12OrangutanLCD8send_cmdEh>
    137e:	10 93 7b 01 	sts	0x017B, r17
    1382:	6d 81       	ldd	r22, Y+5	; 0x05
    1384:	60 93 7c 01 	sts	0x017C, r22
    1388:	25 96       	adiw	r28, 0x05	; 5
    138a:	e3 e0       	ldi	r30, 0x03	; 3
    138c:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__epilogue_restores__+0x1e>

00001390 <lcd_goto_xy>:
    1390:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN12OrangutanLCD6gotoXYEhh>
    1394:	08 95       	ret

00001396 <_ZN16OrangutanDigital9setOutputEhh>:
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	58 f4       	brcc	.+22     	; 0x13b0 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    139e:	99 0f       	add	r25, r25
    13a0:	8a 95       	dec	r24
    13a2:	ea f7       	brpl	.-6      	; 0x139e <_ZN16OrangutanDigital9setOutputEhh+0x8>
    13a4:	89 2f       	mov	r24, r25
    13a6:	aa e2       	ldi	r26, 0x2A	; 42
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb e2       	ldi	r30, 0x2B	; 43
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	21 c0       	rjmp	.+66     	; 0x13f2 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13b0:	8e 30       	cpi	r24, 0x0E	; 14
    13b2:	60 f4       	brcc	.+24     	; 0x13cc <_ZN16OrangutanDigital9setOutputEhh+0x36>
    13b4:	98 ef       	ldi	r25, 0xF8	; 248
    13b6:	98 0f       	add	r25, r24
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <_ZN16OrangutanDigital9setOutputEhh+0x28>
    13bc:	88 0f       	add	r24, r24
    13be:	9a 95       	dec	r25
    13c0:	ea f7       	brpl	.-6      	; 0x13bc <_ZN16OrangutanDigital9setOutputEhh+0x26>
    13c2:	a4 e2       	ldi	r26, 0x24	; 36
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e2       	ldi	r30, 0x25	; 37
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13cc:	85 31       	cpi	r24, 0x15	; 21
    13ce:	60 f4       	brcc	.+24     	; 0x13e8 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    13d0:	92 ef       	ldi	r25, 0xF2	; 242
    13d2:	98 0f       	add	r25, r24
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <_ZN16OrangutanDigital9setOutputEhh+0x44>
    13d8:	88 0f       	add	r24, r24
    13da:	9a 95       	dec	r25
    13dc:	ea f7       	brpl	.-6      	; 0x13d8 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    13de:	a7 e2       	ldi	r26, 0x27	; 39
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e8 e2       	ldi	r30, 0x28	; 40
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e0 e0       	ldi	r30, 0x00	; 0
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	6f 3f       	cpi	r22, 0xFF	; 255
    13f4:	19 f4       	brne	.+6      	; 0x13fc <_ZN16OrangutanDigital9setOutputEhh+0x66>
    13f6:	90 81       	ld	r25, Z
    13f8:	98 27       	eor	r25, r24
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <_ZN16OrangutanDigital9setOutputEhh+0x78>
    13fc:	66 23       	and	r22, r22
    13fe:	19 f0       	breq	.+6      	; 0x1406 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1400:	90 81       	ld	r25, Z
    1402:	98 2b       	or	r25, r24
    1404:	04 c0       	rjmp	.+8      	; 0x140e <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1406:	20 81       	ld	r18, Z
    1408:	98 2f       	mov	r25, r24
    140a:	90 95       	com	r25
    140c:	92 23       	and	r25, r18
    140e:	90 83       	st	Z, r25
    1410:	9c 91       	ld	r25, X
    1412:	98 2b       	or	r25, r24
    1414:	9c 93       	st	X, r25
    1416:	08 95       	ret

00001418 <_ZN15OrangutanMotors5init2Ev>:
    1418:	83 ef       	ldi	r24, 0xF3	; 243
    141a:	80 93 b0 00 	sts	0x00B0, r24
    141e:	84 bd       	out	0x24, r24	; 36
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	80 93 b1 00 	sts	0x00B1, r24
    1426:	85 bd       	out	0x25, r24	; 37
    1428:	10 92 b4 00 	sts	0x00B4, r1
    142c:	10 92 b3 00 	sts	0x00B3, r1
    1430:	18 bc       	out	0x28, r1	; 40
    1432:	17 bc       	out	0x27, r1	; 39
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	85 e0       	ldi	r24, 0x05	; 5
    1440:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	8b e0       	ldi	r24, 0x0B	; 11
    1448:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    1454:	08 95       	ret

00001456 <_ZN15OrangutanMotors4initEv>:
    1456:	80 91 43 02 	lds	r24, 0x0243
    145a:	81 11       	cpse	r24, r1
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <_ZN15OrangutanMotors4initEv+0x12>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 43 02 	sts	0x0243, r24
    1464:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_ZN15OrangutanMotors5init2Ev>
    1468:	08 95       	ret

0000146a <_ZN15OrangutanMotors10setM1SpeedEi>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
    1470:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN15OrangutanMotors4initEv>
    1474:	d7 ff       	sbrs	r29, 7
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1478:	d1 95       	neg	r29
    147a:	c1 95       	neg	r28
    147c:	d1 09       	sbc	r29, r1
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	cf 3f       	cpi	r28, 0xFF	; 255
    1486:	d1 05       	cpc	r29, r1
    1488:	19 f0       	breq	.+6      	; 0x1490 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    148a:	14 f0       	brlt	.+4      	; 0x1490 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    148c:	cf ef       	ldi	r28, 0xFF	; 255
    148e:	d0 e0       	ldi	r29, 0x00	; 0
    1490:	88 23       	and	r24, r24
    1492:	19 f0       	breq	.+6      	; 0x149a <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1494:	18 bc       	out	0x28, r1	; 40
    1496:	c7 bd       	out	0x27, r28	; 39
    1498:	02 c0       	rjmp	.+4      	; 0x149e <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    149a:	c8 bd       	out	0x28, r28	; 40
    149c:	17 bc       	out	0x27, r1	; 39
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <_ZN15OrangutanMotors10setM2SpeedEi>:
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
    14aa:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN15OrangutanMotors4initEv>
    14ae:	d7 ff       	sbrs	r29, 7
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    14b2:	d1 95       	neg	r29
    14b4:	c1 95       	neg	r28
    14b6:	d1 09       	sbc	r29, r1
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	cf 3f       	cpi	r28, 0xFF	; 255
    14c0:	d1 05       	cpc	r29, r1
    14c2:	19 f0       	breq	.+6      	; 0x14ca <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    14c4:	14 f0       	brlt	.+4      	; 0x14ca <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    14c6:	cf ef       	ldi	r28, 0xFF	; 255
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
    14ca:	88 23       	and	r24, r24
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    14ce:	10 92 b4 00 	sts	0x00B4, r1
    14d2:	c0 93 b3 00 	sts	0x00B3, r28
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    14d8:	c0 93 b4 00 	sts	0x00B4, r28
    14dc:	10 92 b3 00 	sts	0x00B3, r1
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <_ZN15OrangutanMotors9setSpeedsEii>:
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	eb 01       	movw	r28, r22
    14ec:	0e 94 35 0a 	call	0x146a	; 0x146a <_ZN15OrangutanMotors10setM1SpeedEi>
    14f0:	ce 01       	movw	r24, r28
    14f2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_ZN15OrangutanMotors10setM2SpeedEi>
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <set_motors>:
    14fc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN15OrangutanMotors9setSpeedsEii>
    1500:	08 95       	ret

00001502 <_ZN20OrangutanPushbuttons5init2Ev>:
    1502:	84 b1       	in	r24, 0x04	; 4
    1504:	8d 7c       	andi	r24, 0xCD	; 205
    1506:	84 b9       	out	0x04, r24	; 4
    1508:	85 b1       	in	r24, 0x05	; 5
    150a:	82 63       	ori	r24, 0x32	; 50
    150c:	85 b9       	out	0x05, r24	; 5
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	6f 93       	push	r22
    1514:	64 e0       	ldi	r22, 0x04	; 4
    1516:	6a 95       	dec	r22
    1518:	f1 f7       	brne	.-4      	; 0x1516 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    151a:	6f 91       	pop	r22
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	c9 f7       	brne	.-14     	; 0x1512 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1520:	08 95       	ret

00001522 <_ZN20OrangutanPushbuttons4initEv>:
    1522:	80 91 44 02 	lds	r24, 0x0244
    1526:	81 11       	cpse	r24, r1
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <_ZN20OrangutanPushbuttons4initEv+0x12>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 44 02 	sts	0x0244, r24
    1530:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN20OrangutanPushbuttons5init2Ev>
    1534:	08 95       	ret

00001536 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1536:	cf 93       	push	r28
    1538:	c8 2f       	mov	r28, r24
    153a:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN20OrangutanPushbuttons4initEv>
    153e:	83 b1       	in	r24, 0x03	; 3
    1540:	8c 23       	and	r24, r28
    1542:	e9 f3       	breq	.-6      	; 0x153e <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1544:	8a e0       	ldi	r24, 0x0A	; 10
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
    154c:	83 b1       	in	r24, 0x03	; 3
    154e:	8c 23       	and	r24, r28
    1550:	b1 f3       	breq	.-20     	; 0x153e <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1552:	83 b1       	in	r24, 0x03	; 3
    1554:	8c 23       	and	r24, r28
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <wait_for_button_release>:
    155a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    155e:	08 95       	ret

00001560 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1560:	a1 e0       	ldi	r26, 0x01	; 1
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 17 12 	jmp	0x242e	; 0x242e <__prologue_saves__+0x20>
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN20OrangutanPushbuttons4initEv>
    1572:	93 b1       	in	r25, 0x03	; 3
    1574:	90 95       	com	r25
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	89 23       	and	r24, r25
    157a:	21 96       	adiw	r28, 0x01	; 1
    157c:	e2 e0       	ldi	r30, 0x02	; 2
    157e:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__epilogue_restores__+0x20>

00001582 <button_is_pressed>:
    1582:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN20OrangutanPushbuttons9isPressedEh>
    1586:	08 95       	ret

00001588 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>:
    1588:	a4 e0       	ldi	r26, 0x04	; 4
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea ec       	ldi	r30, 0xCA	; 202
    158e:	fa e0       	ldi	r31, 0x0A	; 10
    1590:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__prologue_saves__+0x1a>
    1594:	18 2f       	mov	r17, r24
    1596:	f3 b0       	in	r15, 0x03	; 3
    1598:	f0 94       	com	r15
    159a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_ms>
    159e:	69 83       	std	Y+1, r22	; 0x01
    15a0:	7a 83       	std	Y+2, r23	; 0x02
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN20OrangutanPushbuttons4initEv>
    15aa:	20 91 8a 01 	lds	r18, 0x018A
    15ae:	69 81       	ldd	r22, Y+1	; 0x01
    15b0:	7a 81       	ldd	r23, Y+2	; 0x02
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	21 30       	cpi	r18, 0x01	; 1
    15b8:	09 f1       	breq	.+66     	; 0x15fc <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x74>
    15ba:	38 f0       	brcs	.+14     	; 0x15ca <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x42>
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	09 f4       	brne	.+2      	; 0x15c2 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x3a>
    15c0:	53 c0       	rjmp	.+166    	; 0x1668 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xe0>
    15c2:	23 30       	cpi	r18, 0x03	; 3
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x40>
    15c6:	63 c0       	rjmp	.+198    	; 0x168e <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x106>
    15c8:	7e c0       	rjmp	.+252    	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    15ca:	21 2f       	mov	r18, r17
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4f 2d       	mov	r20, r15
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	40 95       	com	r20
    15d4:	50 95       	com	r21
    15d6:	24 23       	and	r18, r20
    15d8:	35 23       	and	r19, r21
    15da:	23 2b       	or	r18, r19
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x58>
    15de:	73 c0       	rjmp	.+230    	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    15e0:	f0 94       	com	r15
    15e2:	f1 22       	and	r15, r17
    15e4:	f0 92 89 01 	sts	0x0189, r15
    15e8:	60 93 85 01 	sts	0x0185, r22
    15ec:	70 93 86 01 	sts	0x0186, r23
    15f0:	80 93 87 01 	sts	0x0187, r24
    15f4:	90 93 88 01 	sts	0x0188, r25
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	63 c0       	rjmp	.+198    	; 0x16c2 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13a>
    15fc:	00 91 85 01 	lds	r16, 0x0185
    1600:	10 91 86 01 	lds	r17, 0x0186
    1604:	20 91 87 01 	lds	r18, 0x0187
    1608:	30 91 88 01 	lds	r19, 0x0188
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	80 1b       	sub	r24, r16
    1612:	91 0b       	sbc	r25, r17
    1614:	a2 0b       	sbc	r26, r18
    1616:	b3 0b       	sbc	r27, r19
    1618:	0f 97       	sbiw	r24, 0x0f	; 15
    161a:	a1 05       	cpc	r26, r1
    161c:	b1 05       	cpc	r27, r1
    161e:	08 f4       	brcc	.+2      	; 0x1622 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x9a>
    1620:	52 c0       	rjmp	.+164    	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    1622:	40 91 89 01 	lds	r20, 0x0189
    1626:	8f 2d       	mov	r24, r15
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	80 95       	com	r24
    162c:	90 95       	com	r25
    162e:	24 2f       	mov	r18, r20
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	82 23       	and	r24, r18
    1634:	93 23       	and	r25, r19
    1636:	89 2b       	or	r24, r25
    1638:	a1 f0       	breq	.+40     	; 0x1662 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xda>
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	80 93 8a 01 	sts	0x018A, r24
    1640:	f0 94       	com	r15
    1642:	f4 22       	and	r15, r20
    1644:	f0 92 89 01 	sts	0x0189, r15
    1648:	3e c0       	rjmp	.+124    	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 2f       	mov	r24, r17
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	4f 2d       	mov	r20, r15
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	40 95       	com	r20
    1656:	50 95       	com	r21
    1658:	84 23       	and	r24, r20
    165a:	95 23       	and	r25, r21
    165c:	28 17       	cp	r18, r24
    165e:	39 07       	cpc	r19, r25
    1660:	91 f1       	breq	.+100    	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    1662:	10 92 8a 01 	sts	0x018A, r1
    1666:	2f c0       	rjmp	.+94     	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    1668:	20 91 89 01 	lds	r18, 0x0189
    166c:	3f 2d       	mov	r19, r15
    166e:	32 23       	and	r19, r18
    1670:	61 f3       	breq	.-40     	; 0x164a <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xc2>
    1672:	23 e0       	ldi	r18, 0x03	; 3
    1674:	20 93 8a 01 	sts	0x018A, r18
    1678:	30 93 89 01 	sts	0x0189, r19
    167c:	60 93 85 01 	sts	0x0185, r22
    1680:	70 93 86 01 	sts	0x0186, r23
    1684:	80 93 87 01 	sts	0x0187, r24
    1688:	90 93 88 01 	sts	0x0188, r25
    168c:	1c c0       	rjmp	.+56     	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    168e:	00 91 85 01 	lds	r16, 0x0185
    1692:	10 91 86 01 	lds	r17, 0x0186
    1696:	20 91 87 01 	lds	r18, 0x0187
    169a:	30 91 88 01 	lds	r19, 0x0188
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	80 1b       	sub	r24, r16
    16a4:	91 0b       	sbc	r25, r17
    16a6:	a2 0b       	sbc	r26, r18
    16a8:	b3 0b       	sbc	r27, r19
    16aa:	0f 97       	sbiw	r24, 0x0f	; 15
    16ac:	a1 05       	cpc	r26, r1
    16ae:	b1 05       	cpc	r27, r1
    16b0:	50 f0       	brcs	.+20     	; 0x16c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    16b2:	80 91 89 01 	lds	r24, 0x0189
    16b6:	8f 21       	and	r24, r15
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x138>
    16ba:	10 92 8a 01 	sts	0x018A, r1
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x140>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	80 93 8a 01 	sts	0x018A, r24
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	24 96       	adiw	r28, 0x04	; 4
    16ca:	e5 e0       	ldi	r30, 0x05	; 5
    16cc:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__epilogue_restores__+0x1a>

000016d0 <get_single_debounced_button_press>:
    16d0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>
    16d4:	08 95       	ret

000016d6 <_ZN18OrangutanResources10getFreeRAMEv>:
    16d6:	a2 e0       	ldi	r26, 0x02	; 2
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e1 e7       	ldi	r30, 0x71	; 113
    16dc:	fb e0       	ldi	r31, 0x0B	; 11
    16de:	0c 94 17 12 	jmp	0x242e	; 0x242e <__prologue_saves__+0x20>
    16e2:	80 91 46 02 	lds	r24, 0x0246
    16e6:	90 91 47 02 	lds	r25, 0x0247
    16ea:	9e 01       	movw	r18, r28
    16ec:	2f 5f       	subi	r18, 0xFF	; 255
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	19 f4       	brne	.+6      	; 0x16fa <_ZN18OrangutanResources10getFreeRAMEv+0x24>
    16f4:	2a 54       	subi	r18, 0x4A	; 74
    16f6:	32 40       	sbci	r19, 0x02	; 2
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <_ZN18OrangutanResources10getFreeRAMEv+0x28>
    16fa:	28 1b       	sub	r18, r24
    16fc:	39 0b       	sbc	r19, r25
    16fe:	3a 83       	std	Y+2, r19	; 0x02
    1700:	29 83       	std	Y+1, r18	; 0x01
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	22 96       	adiw	r28, 0x02	; 2
    1708:	e2 e0       	ldi	r30, 0x02	; 2
    170a:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__epilogue_restores__+0x20>

0000170e <get_free_ram>:
    170e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN18OrangutanResources10getFreeRAMEv>
    1712:	08 95       	ret

00001714 <__vector_9>:
    1714:	2f 92       	push	r2
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	2f b6       	in	r2, 0x3f	; 63
    171c:	80 91 92 01 	lds	r24, 0x0192
    1720:	90 91 93 01 	lds	r25, 0x0193
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	80 93 92 01 	sts	0x0192, r24
    172a:	90 93 93 01 	sts	0x0193, r25
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	80 91 94 01 	lds	r24, 0x0194
    1734:	89 1f       	adc	r24, r25
    1736:	80 93 94 01 	sts	0x0194, r24
    173a:	90 91 8c 01 	lds	r25, 0x018C
    173e:	9c 5f       	subi	r25, 0xFC	; 252
    1740:	90 93 8c 01 	sts	0x018C, r25
    1744:	80 91 8b 01 	lds	r24, 0x018B
    1748:	80 51       	subi	r24, 0x10	; 16
    174a:	97 42       	sbci	r25, 0x27	; 39
    174c:	c0 f0       	brcs	.+48     	; 0x177e <end>
    174e:	90 93 8c 01 	sts	0x018C, r25
    1752:	80 93 8b 01 	sts	0x018B, r24
    1756:	80 91 8d 01 	lds	r24, 0x018D
    175a:	90 91 8e 01 	lds	r25, 0x018E
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	80 93 8d 01 	sts	0x018D, r24
    1764:	90 93 8e 01 	sts	0x018E, r25
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	80 91 8f 01 	lds	r24, 0x018F
    176e:	89 1f       	adc	r24, r25
    1770:	80 93 8f 01 	sts	0x018F, r24
    1774:	80 91 90 01 	lds	r24, 0x0190
    1778:	89 1f       	adc	r24, r25
    177a:	80 93 90 01 	sts	0x0190, r24

0000177e <end>:
    177e:	2f be       	out	0x3f, r2	; 63
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	2f 90       	pop	r2
    1786:	18 95       	reti

00001788 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1788:	28 ee       	ldi	r18, 0xE8	; 232
    178a:	33 e0       	ldi	r19, 0x03	; 3
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	48 f0       	brcs	.+18     	; 0x17a2 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1790:	f9 01       	movw	r30, r18
    1792:	6f 93       	push	r22
    1794:	64 e0       	ldi	r22, 0x04	; 4
    1796:	6a 95       	dec	r22
    1798:	f1 f7       	brne	.-4      	; 0x1796 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    179a:	6f 91       	pop	r22
    179c:	31 97       	sbiw	r30, 0x01	; 1
    179e:	c9 f7       	brne	.-14     	; 0x1792 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    17a0:	f5 cf       	rjmp	.-22     	; 0x178c <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    17a2:	08 95       	ret

000017a4 <delay_ms>:
    17a4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN13OrangutanTime17delayMillisecondsEj>
    17a8:	08 95       	ret

000017aa <_ZN13OrangutanTime5init2Ev>:
    17aa:	e0 e7       	ldi	r30, 0x70	; 112
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8e 7f       	andi	r24, 0xFE	; 254
    17b2:	80 83       	st	Z, r24
    17b4:	a0 eb       	ldi	r26, 0xB0	; 176
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	8c 91       	ld	r24, X
    17ba:	83 60       	ori	r24, 0x03	; 3
    17bc:	8c 93       	st	X, r24
    17be:	a1 eb       	ldi	r26, 0xB1	; 177
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	8c 91       	ld	r24, X
    17c4:	80 7f       	andi	r24, 0xF0	; 240
    17c6:	8c 93       	st	X, r24
    17c8:	8c 91       	ld	r24, X
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	8c 93       	st	X, r24
    17ce:	b8 9a       	sbi	0x17, 0	; 23
    17d0:	80 81       	ld	r24, Z
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	80 83       	st	Z, r24
    17d6:	78 94       	sei
    17d8:	08 95       	ret

000017da <_ZN13OrangutanTime4initEv>:
    17da:	80 91 45 02 	lds	r24, 0x0245
    17de:	81 11       	cpse	r24, r1
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <_ZN13OrangutanTime4initEv+0x12>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 45 02 	sts	0x0245, r24
    17e8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZN13OrangutanTime5init2Ev>
    17ec:	08 95       	ret

000017ee <_ZN13OrangutanTime2msEv>:
    17ee:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN13OrangutanTime4initEv>
    17f2:	e0 e7       	ldi	r30, 0x70	; 112
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8e 7f       	andi	r24, 0xFE	; 254
    17fa:	80 83       	st	Z, r24
    17fc:	60 91 8d 01 	lds	r22, 0x018D
    1800:	70 91 8e 01 	lds	r23, 0x018E
    1804:	80 91 8f 01 	lds	r24, 0x018F
    1808:	90 91 90 01 	lds	r25, 0x0190
    180c:	20 81       	ld	r18, Z
    180e:	21 60       	ori	r18, 0x01	; 1
    1810:	20 83       	st	Z, r18
    1812:	08 95       	ret

00001814 <get_ms>:
    1814:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_ZN13OrangutanTime2msEv>
    1818:	08 95       	ret

0000181a <_ZN13OrangutanTime5resetEv>:
    181a:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN13OrangutanTime4initEv>
    181e:	e0 e7       	ldi	r30, 0x70	; 112
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8e 7f       	andi	r24, 0xFE	; 254
    1826:	80 83       	st	Z, r24
    1828:	10 92 8d 01 	sts	0x018D, r1
    182c:	10 92 8e 01 	sts	0x018E, r1
    1830:	10 92 8f 01 	sts	0x018F, r1
    1834:	10 92 90 01 	sts	0x0190, r1
    1838:	10 92 8c 01 	sts	0x018C, r1
    183c:	10 92 8b 01 	sts	0x018B, r1
    1840:	80 81       	ld	r24, Z
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	80 83       	st	Z, r24
    1846:	08 95       	ret

00001848 <calibrate_line_sensors>:
    1848:	68 2f       	mov	r22, r24
    184a:	85 e9       	ldi	r24, 0x95	; 149
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN16PololuQTRSensors9calibrateEh>
    1852:	08 95       	ret

00001854 <read_line>:
    1854:	46 2f       	mov	r20, r22
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	bc 01       	movw	r22, r24
    185a:	85 e9       	ldi	r24, 0x95	; 149
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <_ZN16PololuQTRSensors8readLineEPjhh>
    1862:	08 95       	ret

00001864 <_ZN9Pololu3pi4initEjh>:
    1864:	0f 93       	push	r16
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	00 d0       	rcall	.+0      	; 0x186c <_ZN9Pololu3pi4initEjh+0x8>
    186c:	00 d0       	rcall	.+0      	; 0x186e <_ZN9Pololu3pi4initEjh+0xa>
    186e:	1f 92       	push	r1
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	9c 01       	movw	r18, r24
    1876:	85 e0       	ldi	r24, 0x05	; 5
    1878:	e6 e3       	ldi	r30, 0x36	; 54
    187a:	f1 e0       	ldi	r31, 0x01	; 1
    187c:	de 01       	movw	r26, r28
    187e:	11 96       	adiw	r26, 0x01	; 1
    1880:	01 90       	ld	r0, Z+
    1882:	0d 92       	st	X+, r0
    1884:	8a 95       	dec	r24
    1886:	e1 f7       	brne	.-8      	; 0x1880 <_ZN9Pololu3pi4initEjh+0x1c>
    1888:	66 23       	and	r22, r22
    188a:	11 f0       	breq	.+4      	; 0x1890 <_ZN9Pololu3pi4initEjh+0x2c>
    188c:	0f ef       	ldi	r16, 0xFF	; 255
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <_ZN9Pololu3pi4initEjh+0x2e>
    1890:	03 e1       	ldi	r16, 0x13	; 19
    1892:	45 e0       	ldi	r20, 0x05	; 5
    1894:	be 01       	movw	r22, r28
    1896:	6f 5f       	subi	r22, 0xFF	; 255
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	85 e9       	ldi	r24, 0x95	; 149
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    18a2:	85 e9       	ldi	r24, 0x95	; 149
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZN16PololuQTRSensors11emittersOffEv>
    18aa:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN13OrangutanTime5resetEv>
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <pololu_3pi_init>:
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZN9Pololu3pi4initEjh>
    18c6:	08 95       	ret

000018c8 <_GLOBAL__sub_D_pololu_3pi_init>:
    18c8:	85 e9       	ldi	r24, 0x95	; 149
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN16PololuQTRSensorsD1Ev>
    18d0:	08 95       	ret

000018d2 <delay_us>:
    18d2:	6f 93       	push	r22
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	6a 95       	dec	r22
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <delay_us+0x4>
    18da:	6f 91       	pop	r22
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <delay_us>
    18e0:	08 95       	ret

000018e2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    18e2:	fc 01       	movw	r30, r24
    18e4:	11 82       	std	Z+1, r1	; 0x01
    18e6:	10 82       	st	Z, r1
    18e8:	13 82       	std	Z+3, r1	; 0x03
    18ea:	12 82       	std	Z+2, r1	; 0x02
    18ec:	15 82       	std	Z+5, r1	; 0x05
    18ee:	14 82       	std	Z+4, r1	; 0x04
    18f0:	16 82       	std	Z+6, r1	; 0x06
    18f2:	68 30       	cpi	r22, 0x08	; 8
    18f4:	68 f4       	brcc	.+26     	; 0x1910 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    18f6:	89 e2       	ldi	r24, 0x29	; 41
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
    18fe:	8b e2       	ldi	r24, 0x2B	; 43
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	93 83       	std	Z+3, r25	; 0x03
    1904:	82 83       	std	Z+2, r24	; 0x02
    1906:	8a e2       	ldi	r24, 0x2A	; 42
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	95 83       	std	Z+5, r25	; 0x05
    190c:	84 83       	std	Z+4, r24	; 0x04
    190e:	1f c0       	rjmp	.+62     	; 0x194e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1910:	6e 30       	cpi	r22, 0x0E	; 14
    1912:	70 f4       	brcc	.+28     	; 0x1930 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    1914:	83 e2       	ldi	r24, 0x23	; 35
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    191c:	85 e2       	ldi	r24, 0x25	; 37
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	93 83       	std	Z+3, r25	; 0x03
    1922:	82 83       	std	Z+2, r24	; 0x02
    1924:	84 e2       	ldi	r24, 0x24	; 36
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	95 83       	std	Z+5, r25	; 0x05
    192a:	84 83       	std	Z+4, r24	; 0x04
    192c:	68 50       	subi	r22, 0x08	; 8
    192e:	0f c0       	rjmp	.+30     	; 0x194e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1930:	65 31       	cpi	r22, 0x15	; 21
    1932:	98 f4       	brcc	.+38     	; 0x195a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    1934:	86 e2       	ldi	r24, 0x26	; 38
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	88 e2       	ldi	r24, 0x28	; 40
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	93 83       	std	Z+3, r25	; 0x03
    1942:	82 83       	std	Z+2, r24	; 0x02
    1944:	87 e2       	ldi	r24, 0x27	; 39
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	95 83       	std	Z+5, r25	; 0x05
    194a:	84 83       	std	Z+4, r24	; 0x04
    194c:	6e 50       	subi	r22, 0x0E	; 14
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1952:	88 0f       	add	r24, r24
    1954:	6a 95       	dec	r22
    1956:	ea f7       	brpl	.-6      	; 0x1952 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    1958:	86 83       	std	Z+6, r24	; 0x06
    195a:	08 95       	ret

0000195c <_ZN16PololuQTRSensors4initEhhh>:
    195c:	a7 e0       	ldi	r26, 0x07	; 7
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e4 eb       	ldi	r30, 0xB4	; 180
    1962:	fc e0       	ldi	r31, 0x0C	; 12
    1964:	0c 94 15 12 	jmp	0x242a	; 0x242a <__prologue_saves__+0x1c>
    1968:	8c 01       	movw	r16, r24
    196a:	fc 01       	movw	r30, r24
    196c:	11 82       	std	Z+1, r1	; 0x01
    196e:	10 82       	st	Z, r1
    1970:	13 82       	std	Z+3, r1	; 0x03
    1972:	12 82       	std	Z+2, r1	; 0x02
    1974:	15 82       	std	Z+5, r1	; 0x05
    1976:	14 82       	std	Z+4, r1	; 0x04
    1978:	17 82       	std	Z+7, r1	; 0x07
    197a:	16 82       	std	Z+6, r1	; 0x06
    197c:	61 31       	cpi	r22, 0x11	; 17
    197e:	18 f0       	brcs	.+6      	; 0x1986 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1980:	80 e1       	ldi	r24, 0x10	; 16
    1982:	80 87       	std	Z+8, r24	; 0x08
    1984:	02 c0       	rjmp	.+4      	; 0x198a <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1986:	fc 01       	movw	r30, r24
    1988:	60 87       	std	Z+8, r22	; 0x08
    198a:	f8 01       	movw	r30, r16
    198c:	20 8b       	std	Z+16, r18	; 0x10
    198e:	64 2f       	mov	r22, r20
    1990:	ce 01       	movw	r24, r28
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1998:	8f 81       	ldd	r24, Y+7	; 0x07
    199a:	f8 01       	movw	r30, r16
    199c:	81 87       	std	Z+9, r24	; 0x09
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	93 87       	std	Z+11, r25	; 0x0b
    19a4:	82 87       	std	Z+10, r24	; 0x0a
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	95 87       	std	Z+13, r25	; 0x0d
    19ac:	84 87       	std	Z+12, r24	; 0x0c
    19ae:	27 96       	adiw	r28, 0x07	; 7
    19b0:	e4 e0       	ldi	r30, 0x04	; 4
    19b2:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__epilogue_restores__+0x1c>

000019b6 <_ZN16PololuQTRSensors11emittersOffEv>:
    19b6:	fc 01       	movw	r30, r24
    19b8:	a4 85       	ldd	r26, Z+12	; 0x0c
    19ba:	b5 85       	ldd	r27, Z+13	; 0x0d
    19bc:	10 97       	sbiw	r26, 0x00	; 0
    19be:	79 f0       	breq	.+30     	; 0x19de <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    19c0:	8c 91       	ld	r24, X
    19c2:	91 85       	ldd	r25, Z+9	; 0x09
    19c4:	89 2b       	or	r24, r25
    19c6:	8c 93       	st	X, r24
    19c8:	a2 85       	ldd	r26, Z+10	; 0x0a
    19ca:	b3 85       	ldd	r27, Z+11	; 0x0b
    19cc:	9c 91       	ld	r25, X
    19ce:	81 85       	ldd	r24, Z+9	; 0x09
    19d0:	80 95       	com	r24
    19d2:	89 23       	and	r24, r25
    19d4:	8c 93       	st	X, r24
    19d6:	88 ec       	ldi	r24, 0xC8	; 200
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <delay_us>
    19de:	08 95       	ret

000019e0 <_ZN16PololuQTRSensors10emittersOnEv>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    19e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    19e6:	10 97       	sbiw	r26, 0x00	; 0
    19e8:	71 f0       	breq	.+28     	; 0x1a06 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    19ea:	8c 91       	ld	r24, X
    19ec:	91 85       	ldd	r25, Z+9	; 0x09
    19ee:	89 2b       	or	r24, r25
    19f0:	8c 93       	st	X, r24
    19f2:	a2 85       	ldd	r26, Z+10	; 0x0a
    19f4:	b3 85       	ldd	r27, Z+11	; 0x0b
    19f6:	8c 91       	ld	r24, X
    19f8:	91 85       	ldd	r25, Z+9	; 0x09
    19fa:	89 2b       	or	r24, r25
    19fc:	8c 93       	st	X, r24
    19fe:	88 ec       	ldi	r24, 0xC8	; 200
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <delay_us>
    1a06:	08 95       	ret

00001a08 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1a08:	a7 e0       	ldi	r26, 0x07	; 7
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e0       	ldi	r30, 0x0A	; 10
    1a0e:	fd e0       	ldi	r31, 0x0D	; 13
    1a10:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__prologue_saves__+0x6>
    1a14:	7c 01       	movw	r14, r24
    1a16:	4b 01       	movw	r8, r22
    1a18:	64 2f       	mov	r22, r20
    1a1a:	39 01       	movw	r6, r18
    1a1c:	40 2f       	mov	r20, r16
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN16PololuQTRSensors4initEhhh>
    1a24:	87 01       	movw	r16, r14
    1a26:	0f 5b       	subi	r16, 0xBF	; 191
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	10 82       	st	Z, r1
    1a2e:	67 01       	movw	r12, r14
    1a30:	f2 e4       	ldi	r31, 0x42	; 66
    1a32:	cf 0e       	add	r12, r31
    1a34:	d1 1c       	adc	r13, r1
    1a36:	f6 01       	movw	r30, r12
    1a38:	10 82       	st	Z, r1
    1a3a:	57 01       	movw	r10, r14
    1a3c:	f3 e4       	ldi	r31, 0x43	; 67
    1a3e:	af 0e       	add	r10, r31
    1a40:	b1 1c       	adc	r11, r1
    1a42:	f5 01       	movw	r30, r10
    1a44:	10 82       	st	Z, r1
    1a46:	f7 01       	movw	r30, r14
    1a48:	77 86       	std	Z+15, r7	; 0x0f
    1a4a:	66 86       	std	Z+14, r6	; 0x0e
    1a4c:	51 2c       	mov	r5, r1
    1a4e:	f7 01       	movw	r30, r14
    1a50:	80 85       	ldd	r24, Z+8	; 0x08
    1a52:	58 16       	cp	r5, r24
    1a54:	50 f5       	brcc	.+84     	; 0x1aaa <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1a56:	65 2c       	mov	r6, r5
    1a58:	71 2c       	mov	r7, r1
    1a5a:	f4 01       	movw	r30, r8
    1a5c:	e6 0d       	add	r30, r6
    1a5e:	f7 1d       	adc	r31, r7
    1a60:	60 81       	ld	r22, Z
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1a6a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	e6 0d       	add	r30, r6
    1a70:	f7 1d       	adc	r31, r7
    1a72:	21 8b       	std	Z+17, r18	; 0x11
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	f3 01       	movw	r30, r6
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0d       	add	r30, r14
    1a80:	ff 1d       	adc	r31, r15
    1a82:	92 a3       	std	Z+34, r25	; 0x22
    1a84:	81 a3       	std	Z+33, r24	; 0x21
    1a86:	83 32       	cpi	r24, 0x23	; 35
    1a88:	91 05       	cpc	r25, r1
    1a8a:	11 f4       	brne	.+4      	; 0x1a90 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	08 c0       	rjmp	.+16     	; 0x1aa0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a90:	86 32       	cpi	r24, 0x26	; 38
    1a92:	91 05       	cpc	r25, r1
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1a96:	f6 01       	movw	r30, r12
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a9a:	89 97       	sbiw	r24, 0x29	; 41
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1a9e:	f5 01       	movw	r30, r10
    1aa0:	80 81       	ld	r24, Z
    1aa2:	82 2b       	or	r24, r18
    1aa4:	80 83       	st	Z, r24
    1aa6:	53 94       	inc	r5
    1aa8:	d2 cf       	rjmp	.-92     	; 0x1a4e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1aaa:	27 96       	adiw	r28, 0x07	; 7
    1aac:	ef e0       	ldi	r30, 0x0F	; 15
    1aae:	0c 94 26 12 	jmp	0x244c	; 0x244c <__epilogue_restores__+0x6>

00001ab2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ef e5       	ldi	r30, 0x5F	; 95
    1ab8:	fd e0       	ldi	r31, 0x0D	; 13
    1aba:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0xa>
    1abe:	ec 01       	movw	r28, r24
    1ac0:	5b 01       	movw	r10, r22
    1ac2:	6c 01       	movw	r12, r24
    1ac4:	81 e4       	ldi	r24, 0x41	; 65
    1ac6:	c8 0e       	add	r12, r24
    1ac8:	d1 1c       	adc	r13, r1
    1aca:	f6 01       	movw	r30, r12
    1acc:	80 80       	ld	r8, Z
    1ace:	7e 01       	movw	r14, r28
    1ad0:	f2 e4       	ldi	r31, 0x42	; 66
    1ad2:	ef 0e       	add	r14, r31
    1ad4:	f1 1c       	adc	r15, r1
    1ad6:	f7 01       	movw	r30, r14
    1ad8:	70 80       	ld	r7, Z
    1ada:	8e 01       	movw	r16, r28
    1adc:	0d 5b       	subi	r16, 0xBD	; 189
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	90 80       	ld	r9, Z
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	89 17       	cp	r24, r25
    1aea:	48 f4       	brcc	.+18     	; 0x1afe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1aec:	f5 01       	movw	r30, r10
    1aee:	e8 0f       	add	r30, r24
    1af0:	f1 1d       	adc	r31, r1
    1af2:	e8 0f       	add	r30, r24
    1af4:	f1 1d       	adc	r31, r1
    1af6:	11 82       	std	Z+1, r1	; 0x01
    1af8:	10 82       	st	Z, r1
    1afa:	8f 5f       	subi	r24, 0xFF	; 255
    1afc:	f4 cf       	rjmp	.-24     	; 0x1ae6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1afe:	84 b1       	in	r24, 0x04	; 4
    1b00:	f6 01       	movw	r30, r12
    1b02:	90 81       	ld	r25, Z
    1b04:	89 2b       	or	r24, r25
    1b06:	84 b9       	out	0x04, r24	; 4
    1b08:	87 b1       	in	r24, 0x07	; 7
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	90 81       	ld	r25, Z
    1b0e:	89 2b       	or	r24, r25
    1b10:	87 b9       	out	0x07, r24	; 7
    1b12:	8a b1       	in	r24, 0x0a	; 10
    1b14:	f8 01       	movw	r30, r16
    1b16:	90 81       	ld	r25, Z
    1b18:	89 2b       	or	r24, r25
    1b1a:	8a b9       	out	0x0a, r24	; 10
    1b1c:	85 b1       	in	r24, 0x05	; 5
    1b1e:	f6 01       	movw	r30, r12
    1b20:	90 81       	ld	r25, Z
    1b22:	89 2b       	or	r24, r25
    1b24:	85 b9       	out	0x05, r24	; 5
    1b26:	88 b1       	in	r24, 0x08	; 8
    1b28:	f7 01       	movw	r30, r14
    1b2a:	90 81       	ld	r25, Z
    1b2c:	89 2b       	or	r24, r25
    1b2e:	88 b9       	out	0x08, r24	; 8
    1b30:	8b b1       	in	r24, 0x0b	; 11
    1b32:	f8 01       	movw	r30, r16
    1b34:	90 81       	ld	r25, Z
    1b36:	89 2b       	or	r24, r25
    1b38:	8b b9       	out	0x0b, r24	; 11
    1b3a:	8a e0       	ldi	r24, 0x0A	; 10
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <delay_us>
    1b42:	94 b1       	in	r25, 0x04	; 4
    1b44:	f6 01       	movw	r30, r12
    1b46:	80 81       	ld	r24, Z
    1b48:	80 95       	com	r24
    1b4a:	89 23       	and	r24, r25
    1b4c:	84 b9       	out	0x04, r24	; 4
    1b4e:	97 b1       	in	r25, 0x07	; 7
    1b50:	f7 01       	movw	r30, r14
    1b52:	80 81       	ld	r24, Z
    1b54:	80 95       	com	r24
    1b56:	89 23       	and	r24, r25
    1b58:	87 b9       	out	0x07, r24	; 7
    1b5a:	9a b1       	in	r25, 0x0a	; 10
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 95       	com	r24
    1b62:	89 23       	and	r24, r25
    1b64:	8a b9       	out	0x0a, r24	; 10
    1b66:	95 b1       	in	r25, 0x05	; 5
    1b68:	f6 01       	movw	r30, r12
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 95       	com	r24
    1b6e:	89 23       	and	r24, r25
    1b70:	85 b9       	out	0x05, r24	; 5
    1b72:	98 b1       	in	r25, 0x08	; 8
    1b74:	f7 01       	movw	r30, r14
    1b76:	80 81       	ld	r24, Z
    1b78:	80 95       	com	r24
    1b7a:	89 23       	and	r24, r25
    1b7c:	88 b9       	out	0x08, r24	; 8
    1b7e:	9b b1       	in	r25, 0x0b	; 11
    1b80:	f8 01       	movw	r30, r16
    1b82:	80 81       	ld	r24, Z
    1b84:	80 95       	com	r24
    1b86:	89 23       	and	r24, r25
    1b88:	8b b9       	out	0x0b, r24	; 11
    1b8a:	e0 90 b0 00 	lds	r14, 0x00B0
    1b8e:	d0 90 b1 00 	lds	r13, 0x00B1
    1b92:	80 91 b0 00 	lds	r24, 0x00B0
    1b96:	83 60       	ori	r24, 0x03	; 3
    1b98:	80 93 b0 00 	sts	0x00B0, r24
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	80 93 b1 00 	sts	0x00B1, r24
    1ba2:	40 91 b2 00 	lds	r20, 0x00B2
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bac:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bae:	82 17       	cp	r24, r18
    1bb0:	93 07       	cpc	r25, r19
    1bb2:	20 f5       	brcc	.+72     	; 0x1bfc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1bb4:	c0 90 b2 00 	lds	r12, 0x00B2
    1bb8:	2c 2d       	mov	r18, r12
    1bba:	24 1b       	sub	r18, r20
    1bbc:	82 0f       	add	r24, r18
    1bbe:	91 1d       	adc	r25, r1
    1bc0:	03 b1       	in	r16, 0x03	; 3
    1bc2:	08 11       	cpse	r16, r8
    1bc4:	32 c0       	rjmp	.+100    	; 0x1c2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1bc6:	f6 b0       	in	r15, 0x06	; 6
    1bc8:	f7 10       	cpse	r15, r7
    1bca:	2f c0       	rjmp	.+94     	; 0x1c2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1bcc:	29 b1       	in	r18, 0x09	; 9
    1bce:	29 11       	cpse	r18, r9
    1bd0:	2c c0       	rjmp	.+88     	; 0x1c2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1bd2:	10 c0       	rjmp	.+32     	; 0x1bf4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1bd4:	21 2f       	mov	r18, r17
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	a9 01       	movw	r20, r18
    1bda:	44 0f       	add	r20, r20
    1bdc:	55 1f       	adc	r21, r21
    1bde:	f5 01       	movw	r30, r10
    1be0:	e4 0f       	add	r30, r20
    1be2:	f5 1f       	adc	r31, r21
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	67 2b       	or	r22, r23
    1bea:	21 f1       	breq	.+72     	; 0x1c34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1bec:	1f 5f       	subi	r17, 0xFF	; 255
    1bee:	28 85       	ldd	r18, Y+8	; 0x08
    1bf0:	12 17       	cp	r17, r18
    1bf2:	80 f3       	brcs	.-32     	; 0x1bd4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1bf4:	7f 2c       	mov	r7, r15
    1bf6:	80 2e       	mov	r8, r16
    1bf8:	4c 2d       	mov	r20, r12
    1bfa:	d7 cf       	rjmp	.-82     	; 0x1baa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1bfc:	e0 92 b0 00 	sts	0x00B0, r14
    1c00:	d0 92 b1 00 	sts	0x00B1, r13
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	88 85       	ldd	r24, Y+8	; 0x08
    1c08:	28 17       	cp	r18, r24
    1c0a:	30 f5       	brcc	.+76     	; 0x1c58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1c0c:	f5 01       	movw	r30, r10
    1c0e:	e2 0f       	add	r30, r18
    1c10:	f1 1d       	adc	r31, r1
    1c12:	e2 0f       	add	r30, r18
    1c14:	f1 1d       	adc	r31, r1
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	89 2b       	or	r24, r25
    1c1c:	21 f4       	brne	.+8      	; 0x1c26 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c20:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	ee cf       	rjmp	.-36     	; 0x1c06 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1c2a:	03 b1       	in	r16, 0x03	; 3
    1c2c:	f6 b0       	in	r15, 0x06	; 6
    1c2e:	99 b0       	in	r9, 0x09	; 9
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	dd cf       	rjmp	.-70     	; 0x1bee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1c34:	de 01       	movw	r26, r28
    1c36:	a4 0f       	add	r26, r20
    1c38:	b5 1f       	adc	r27, r21
    1c3a:	91 96       	adiw	r26, 0x21	; 33
    1c3c:	0d 90       	ld	r0, X+
    1c3e:	bc 91       	ld	r27, X
    1c40:	a0 2d       	mov	r26, r0
    1c42:	4c 91       	ld	r20, X
    1c44:	de 01       	movw	r26, r28
    1c46:	a2 0f       	add	r26, r18
    1c48:	b3 1f       	adc	r27, r19
    1c4a:	51 96       	adiw	r26, 0x11	; 17
    1c4c:	2c 91       	ld	r18, X
    1c4e:	42 23       	and	r20, r18
    1c50:	69 f6       	brne	.-102    	; 0x1bec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	ca cf       	rjmp	.-108    	; 0x1bec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	ed e0       	ldi	r30, 0x0D	; 13
    1c5e:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0xa>

00001c62 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	fc 01       	movw	r30, r24
    1c70:	9b 01       	movw	r18, r22
    1c72:	f0 90 7c 00 	lds	r15, 0x007C
    1c76:	00 91 7a 00 	lds	r16, 0x007A
    1c7a:	47 b1       	in	r20, 0x07	; 7
    1c7c:	18 b1       	in	r17, 0x08	; 8
    1c7e:	80 91 7a 00 	lds	r24, 0x007A
    1c82:	86 fd       	sbrc	r24, 6
    1c84:	fc cf       	rjmp	.-8      	; 0x1c7e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 85       	ldd	r25, Z+8	; 0x08
    1c8a:	89 17       	cp	r24, r25
    1c8c:	48 f4       	brcc	.+18     	; 0x1ca0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1c8e:	d9 01       	movw	r26, r18
    1c90:	a8 0f       	add	r26, r24
    1c92:	b1 1d       	adc	r27, r1
    1c94:	a8 0f       	add	r26, r24
    1c96:	b1 1d       	adc	r27, r1
    1c98:	1d 92       	st	X+, r1
    1c9a:	1c 92       	st	X, r1
    1c9c:	8f 5f       	subi	r24, 0xFF	; 255
    1c9e:	f4 cf       	rjmp	.-24     	; 0x1c88 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1ca0:	97 b1       	in	r25, 0x07	; 7
    1ca2:	82 a1       	ldd	r24, Z+34	; 0x22
    1ca4:	80 95       	com	r24
    1ca6:	89 23       	and	r24, r25
    1ca8:	87 b9       	out	0x07, r24	; 7
    1caa:	98 b1       	in	r25, 0x08	; 8
    1cac:	82 a1       	ldd	r24, Z+34	; 0x22
    1cae:	80 95       	com	r24
    1cb0:	89 23       	and	r24, r25
    1cb2:	88 b9       	out	0x08, r24	; 8
    1cb4:	87 e8       	ldi	r24, 0x87	; 135
    1cb6:	80 93 7a 00 	sts	0x007A, r24
    1cba:	e1 2c       	mov	r14, r1
    1cbc:	81 a1       	ldd	r24, Z+33	; 0x21
    1cbe:	e8 16       	cp	r14, r24
    1cc0:	10 f0       	brcs	.+4      	; 0x1cc6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1cc2:	e1 2c       	mov	r14, r1
    1cc4:	29 c0       	rjmp	.+82     	; 0x1d18 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	80 85       	ldd	r24, Z+8	; 0x08
    1cca:	58 17       	cp	r21, r24
    1ccc:	18 f5       	brcc	.+70     	; 0x1d14 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1cce:	a5 2f       	mov	r26, r21
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ef 01       	movw	r28, r30
    1cd4:	ca 0f       	add	r28, r26
    1cd6:	db 1f       	adc	r29, r27
    1cd8:	89 89       	ldd	r24, Y+17	; 0x11
    1cda:	80 64       	ori	r24, 0x40	; 64
    1cdc:	80 93 7c 00 	sts	0x007C, r24
    1ce0:	80 91 7a 00 	lds	r24, 0x007A
    1ce4:	80 64       	ori	r24, 0x40	; 64
    1ce6:	80 93 7a 00 	sts	0x007A, r24
    1cea:	80 91 7a 00 	lds	r24, 0x007A
    1cee:	86 fd       	sbrc	r24, 6
    1cf0:	fc cf       	rjmp	.-8      	; 0x1cea <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1cf2:	60 91 78 00 	lds	r22, 0x0078
    1cf6:	70 91 79 00 	lds	r23, 0x0079
    1cfa:	aa 0f       	add	r26, r26
    1cfc:	bb 1f       	adc	r27, r27
    1cfe:	a2 0f       	add	r26, r18
    1d00:	b3 1f       	adc	r27, r19
    1d02:	8d 91       	ld	r24, X+
    1d04:	9c 91       	ld	r25, X
    1d06:	11 97       	sbiw	r26, 0x01	; 1
    1d08:	86 0f       	add	r24, r22
    1d0a:	97 1f       	adc	r25, r23
    1d0c:	8d 93       	st	X+, r24
    1d0e:	9c 93       	st	X, r25
    1d10:	5f 5f       	subi	r21, 0xFF	; 255
    1d12:	da cf       	rjmp	.-76     	; 0x1cc8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1d14:	e3 94       	inc	r14
    1d16:	d2 cf       	rjmp	.-92     	; 0x1cbc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1d18:	80 85       	ldd	r24, Z+8	; 0x08
    1d1a:	e8 16       	cp	r14, r24
    1d1c:	a0 f4       	brcc	.+40     	; 0x1d46 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1d1e:	e9 01       	movw	r28, r18
    1d20:	ce 0d       	add	r28, r14
    1d22:	d1 1d       	adc	r29, r1
    1d24:	ce 0d       	add	r28, r14
    1d26:	d1 1d       	adc	r29, r1
    1d28:	61 a1       	ldd	r22, Z+33	; 0x21
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	95 95       	asr	r25
    1d30:	87 95       	ror	r24
    1d32:	a8 81       	ld	r26, Y
    1d34:	b9 81       	ldd	r27, Y+1	; 0x01
    1d36:	8a 0f       	add	r24, r26
    1d38:	9b 1f       	adc	r25, r27
    1d3a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    1d3e:	79 83       	std	Y+1, r23	; 0x01
    1d40:	68 83       	st	Y, r22
    1d42:	e3 94       	inc	r14
    1d44:	e9 cf       	rjmp	.-46     	; 0x1d18 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1d46:	f0 92 7c 00 	sts	0x007C, r15
    1d4a:	00 93 7a 00 	sts	0x007A, r16
    1d4e:	18 b9       	out	0x08, r17	; 8
    1d50:	47 b9       	out	0x07, r20	; 7
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	e6 e0       	ldi	r30, 0x06	; 6
    1d58:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

00001d5c <_ZN16PololuQTRSensors4readEPjh>:
    1d5c:	a0 e2       	ldi	r26, 0x20	; 32
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e4 eb       	ldi	r30, 0xB4	; 180
    1d62:	fe e0       	ldi	r31, 0x0E	; 14
    1d64:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x16>
    1d68:	8c 01       	movw	r16, r24
    1d6a:	7b 01       	movw	r14, r22
    1d6c:	d4 2e       	mov	r13, r20
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	84 0f       	add	r24, r20
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	18 f4       	brcc	.+6      	; 0x1d7c <_ZN16PololuQTRSensors4readEPjh+0x20>
    1d76:	c8 01       	movw	r24, r16
    1d78:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN16PololuQTRSensors10emittersOnEv>
    1d7c:	d8 01       	movw	r26, r16
    1d7e:	50 96       	adiw	r26, 0x10	; 16
    1d80:	8c 91       	ld	r24, X
    1d82:	b7 01       	movw	r22, r14
    1d84:	81 11       	cpse	r24, r1
    1d86:	10 c0       	rjmp	.+32     	; 0x1da8 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1d88:	c8 01       	movw	r24, r16
    1d8a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d8e:	c8 01       	movw	r24, r16
    1d90:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZN16PololuQTRSensors11emittersOffEv>
    1d94:	b2 e0       	ldi	r27, 0x02	; 2
    1d96:	db 12       	cpse	r13, r27
    1d98:	3a c0       	rjmp	.+116    	; 0x1e0e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d9a:	be 01       	movw	r22, r28
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1da8:	c8 01       	movw	r24, r16
    1daa:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1dae:	c8 01       	movw	r24, r16
    1db0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZN16PololuQTRSensors11emittersOffEv>
    1db4:	e2 e0       	ldi	r30, 0x02	; 2
    1db6:	de 12       	cpse	r13, r30
    1db8:	2a c0       	rjmp	.+84     	; 0x1e0e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1dba:	be 01       	movw	r22, r28
    1dbc:	6f 5f       	subi	r22, 0xFF	; 255
    1dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	f8 01       	movw	r30, r16
    1dca:	80 85       	ldd	r24, Z+8	; 0x08
    1dcc:	48 17       	cp	r20, r24
    1dce:	f8 f4       	brcc	.+62     	; 0x1e0e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1dd0:	84 2f       	mov	r24, r20
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	f7 01       	movw	r30, r14
    1dda:	e8 0f       	add	r30, r24
    1ddc:	f9 1f       	adc	r31, r25
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	2c 0f       	add	r18, r28
    1de4:	3d 1f       	adc	r19, r29
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	d8 01       	movw	r26, r16
    1dec:	1e 96       	adiw	r26, 0x0e	; 14
    1dee:	2d 91       	ld	r18, X+
    1df0:	3c 91       	ld	r19, X
    1df2:	1f 97       	sbiw	r26, 0x0f	; 15
    1df4:	dc 01       	movw	r26, r24
    1df6:	8d 91       	ld	r24, X+
    1df8:	9c 91       	ld	r25, X
    1dfa:	28 1b       	sub	r18, r24
    1dfc:	39 0b       	sbc	r19, r25
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	82 0f       	add	r24, r18
    1e04:	93 1f       	adc	r25, r19
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	4f 5f       	subi	r20, 0xFF	; 255
    1e0c:	dd cf       	rjmp	.-70     	; 0x1dc8 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1e0e:	a0 96       	adiw	r28, 0x20	; 32
    1e10:	e7 e0       	ldi	r30, 0x07	; 7
    1e12:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x16>

00001e16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1e16:	2f 92       	push	r2
    1e18:	3f 92       	push	r3
    1e1a:	5f 92       	push	r5
    1e1c:	6f 92       	push	r6
    1e1e:	7f 92       	push	r7
    1e20:	8f 92       	push	r8
    1e22:	9f 92       	push	r9
    1e24:	af 92       	push	r10
    1e26:	bf 92       	push	r11
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	c0 56       	subi	r28, 0x60	; 96
    1e3e:	d1 09       	sbc	r29, r1
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	8c 01       	movw	r16, r24
    1e4c:	4b 01       	movw	r8, r22
    1e4e:	5a 01       	movw	r10, r20
    1e50:	52 2e       	mov	r5, r18
    1e52:	da 01       	movw	r26, r20
    1e54:	8d 91       	ld	r24, X+
    1e56:	9c 91       	ld	r25, X
    1e58:	89 2b       	or	r24, r25
    1e5a:	31 f0       	breq	.+12     	; 0x1e68 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1e5c:	f4 01       	movw	r30, r8
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	89 2b       	or	r24, r25
    1e64:	f1 f4       	brne	.+60     	; 0x1ea2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1e66:	24 c0       	rjmp	.+72     	; 0x1eb0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1e68:	d8 01       	movw	r26, r16
    1e6a:	18 96       	adiw	r26, 0x08	; 8
    1e6c:	8c 91       	ld	r24, X
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0e 94 44 12 	call	0x2488	; 0x2488 <malloc>
    1e78:	f5 01       	movw	r30, r10
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	80 83       	st	Z, r24
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1e82:	b1 c0       	rjmp	.+354    	; 0x1fe6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	d8 01       	movw	r26, r16
    1e8c:	18 96       	adiw	r26, 0x08	; 8
    1e8e:	8c 91       	ld	r24, X
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	28 17       	cp	r18, r24
    1e94:	39 07       	cpc	r19, r25
    1e96:	14 f7       	brge	.-60     	; 0x1e5c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1e98:	11 92       	st	Z+, r1
    1e9a:	11 92       	st	Z+, r1
    1e9c:	2f 5f       	subi	r18, 0xFF	; 255
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	f4 cf       	rjmp	.-24     	; 0x1e8a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1ea2:	e1 2c       	mov	r14, r1
    1ea4:	f1 2c       	mov	r15, r1
    1ea6:	6e 01       	movw	r12, r28
    1ea8:	b1 e2       	ldi	r27, 0x21	; 33
    1eaa:	cb 0e       	add	r12, r27
    1eac:	d1 1c       	adc	r13, r1
    1eae:	21 c0       	rjmp	.+66     	; 0x1ef2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	80 85       	ldd	r24, Z+8	; 0x08
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0e 94 44 12 	call	0x2488	; 0x2488 <malloc>
    1ebe:	d4 01       	movw	r26, r8
    1ec0:	8d 93       	st	X+, r24
    1ec2:	9c 93       	st	X, r25
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1ec8:	8e c0       	rjmp	.+284    	; 0x1fe6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	d8 01       	movw	r26, r16
    1ed2:	18 96       	adiw	r26, 0x08	; 8
    1ed4:	8c 91       	ld	r24, X
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	28 17       	cp	r18, r24
    1eda:	39 07       	cpc	r19, r25
    1edc:	14 f7       	brge	.-60     	; 0x1ea2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1ede:	d8 01       	movw	r26, r16
    1ee0:	1e 96       	adiw	r26, 0x0e	; 14
    1ee2:	8d 91       	ld	r24, X+
    1ee4:	9c 91       	ld	r25, X
    1ee6:	1f 97       	sbiw	r26, 0x0f	; 15
    1ee8:	81 93       	st	Z+, r24
    1eea:	91 93       	st	Z+, r25
    1eec:	2f 5f       	subi	r18, 0xFF	; 255
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	ef cf       	rjmp	.-34     	; 0x1ed0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1ef2:	45 2d       	mov	r20, r5
    1ef4:	be 01       	movw	r22, r28
    1ef6:	6f 5b       	subi	r22, 0xBF	; 191
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	c8 01       	movw	r24, r16
    1efc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN16PololuQTRSensors4readEPjh>
    1f00:	f8 01       	movw	r30, r16
    1f02:	60 84       	ldd	r6, Z+8	; 0x08
    1f04:	71 2c       	mov	r7, r1
    1f06:	fe 01       	movw	r30, r28
    1f08:	ef 5b       	subi	r30, 0xBF	; 191
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	9e 01       	movw	r18, r28
    1f10:	2f 5f       	subi	r18, 0xFF	; 255
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	19 01       	movw	r2, r18
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	26 15       	cp	r18, r6
    1f1c:	37 05       	cpc	r19, r7
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1f20:	e1 14       	cp	r14, r1
    1f22:	f1 04       	cpc	r15, r1
    1f24:	89 f0       	breq	.+34     	; 0x1f48 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1f26:	dc 01       	movw	r26, r24
    1f28:	6d 91       	ld	r22, X+
    1f2a:	7c 91       	ld	r23, X
    1f2c:	40 81       	ld	r20, Z
    1f2e:	51 81       	ldd	r21, Z+1	; 0x01
    1f30:	64 17       	cp	r22, r20
    1f32:	75 07       	cpc	r23, r21
    1f34:	48 f0       	brcs	.+18     	; 0x1f48 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1f36:	d1 01       	movw	r26, r2
    1f38:	6d 91       	ld	r22, X+
    1f3a:	7c 91       	ld	r23, X
    1f3c:	40 81       	ld	r20, Z
    1f3e:	51 81       	ldd	r21, Z+1	; 0x01
    1f40:	46 17       	cp	r20, r22
    1f42:	57 07       	cpc	r21, r23
    1f44:	48 f0       	brcs	.+18     	; 0x1f58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1f48:	40 81       	ld	r20, Z
    1f4a:	51 81       	ldd	r21, Z+1	; 0x01
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	4d 93       	st	X+, r20
    1f50:	5c 93       	st	X, r21
    1f52:	e1 14       	cp	r14, r1
    1f54:	f1 04       	cpc	r15, r1
    1f56:	79 f7       	brne	.-34     	; 0x1f36 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1f58:	40 81       	ld	r20, Z
    1f5a:	51 81       	ldd	r21, Z+1	; 0x01
    1f5c:	d1 01       	movw	r26, r2
    1f5e:	4d 93       	st	X+, r20
    1f60:	5c 93       	st	X, r21
    1f62:	2f 5f       	subi	r18, 0xFF	; 255
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	b2 e0       	ldi	r27, 0x02	; 2
    1f68:	2b 0e       	add	r2, r27
    1f6a:	31 1c       	adc	r3, r1
    1f6c:	32 96       	adiw	r30, 0x02	; 2
    1f6e:	02 96       	adiw	r24, 0x02	; 2
    1f70:	d4 cf       	rjmp	.-88     	; 0x1f1a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1f72:	ef ef       	ldi	r30, 0xFF	; 255
    1f74:	ee 1a       	sub	r14, r30
    1f76:	fe 0a       	sbc	r15, r30
    1f78:	fa e0       	ldi	r31, 0x0A	; 10
    1f7a:	ef 16       	cp	r14, r31
    1f7c:	f1 04       	cpc	r15, r1
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1f80:	b8 cf       	rjmp	.-144    	; 0x1ef2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1f82:	9e 01       	movw	r18, r28
    1f84:	2f 5f       	subi	r18, 0xFF	; 255
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	79 01       	movw	r14, r18
    1f8a:	36 01       	movw	r6, r12
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	f8 01       	movw	r30, r16
    1f92:	20 85       	ldd	r18, Z+8	; 0x08
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	82 17       	cp	r24, r18
    1f98:	93 07       	cpc	r25, r19
    1f9a:	2c f5       	brge	.+74     	; 0x1fe6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1f9c:	d7 01       	movw	r26, r14
    1f9e:	2d 91       	ld	r18, X+
    1fa0:	3d 91       	ld	r19, X+
    1fa2:	7d 01       	movw	r14, r26
    1fa4:	b3 01       	movw	r22, r6
    1fa6:	6c 19       	sub	r22, r12
    1fa8:	7d 09       	sbc	r23, r13
    1faa:	d5 01       	movw	r26, r10
    1fac:	ed 91       	ld	r30, X+
    1fae:	fc 91       	ld	r31, X
    1fb0:	e6 0f       	add	r30, r22
    1fb2:	f7 1f       	adc	r31, r23
    1fb4:	40 81       	ld	r20, Z
    1fb6:	51 81       	ldd	r21, Z+1	; 0x01
    1fb8:	42 17       	cp	r20, r18
    1fba:	53 07       	cpc	r21, r19
    1fbc:	10 f4       	brcc	.+4      	; 0x1fc2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1fbe:	31 83       	std	Z+1, r19	; 0x01
    1fc0:	20 83       	st	Z, r18
    1fc2:	f3 01       	movw	r30, r6
    1fc4:	21 91       	ld	r18, Z+
    1fc6:	31 91       	ld	r19, Z+
    1fc8:	3f 01       	movw	r6, r30
    1fca:	d4 01       	movw	r26, r8
    1fcc:	ed 91       	ld	r30, X+
    1fce:	fc 91       	ld	r31, X
    1fd0:	e6 0f       	add	r30, r22
    1fd2:	f7 1f       	adc	r31, r23
    1fd4:	40 81       	ld	r20, Z
    1fd6:	51 81       	ldd	r21, Z+1	; 0x01
    1fd8:	24 17       	cp	r18, r20
    1fda:	35 07       	cpc	r19, r21
    1fdc:	10 f4       	brcc	.+4      	; 0x1fe2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	20 83       	st	Z, r18
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	d5 cf       	rjmp	.-86     	; 0x1f90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1fe6:	c0 5a       	subi	r28, 0xA0	; 160
    1fe8:	df 4f       	sbci	r29, 0xFF	; 255
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	9f 90       	pop	r9
    200a:	8f 90       	pop	r8
    200c:	7f 90       	pop	r7
    200e:	6f 90       	pop	r6
    2010:	5f 90       	pop	r5
    2012:	3f 90       	pop	r3
    2014:	2f 90       	pop	r2
    2016:	08 95       	ret

00002018 <_ZN16PololuQTRSensors9calibrateEh>:
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	ec 01       	movw	r28, r24
    2020:	16 2f       	mov	r17, r22
    2022:	8f ef       	ldi	r24, 0xFF	; 255
    2024:	86 0f       	add	r24, r22
    2026:	82 30       	cpi	r24, 0x02	; 2
    2028:	18 f0       	brcs	.+6      	; 0x2030 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    202a:	66 23       	and	r22, r22
    202c:	59 f0       	breq	.+22     	; 0x2044 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2030:	21 e0       	ldi	r18, 0x01	; 1
    2032:	ae 01       	movw	r20, r28
    2034:	4e 5f       	subi	r20, 0xFE	; 254
    2036:	5f 4f       	sbci	r21, 0xFF	; 255
    2038:	be 01       	movw	r22, r28
    203a:	ce 01       	movw	r24, r28
    203c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2040:	12 30       	cpi	r17, 0x02	; 2
    2042:	51 f4       	brne	.+20     	; 0x2058 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2044:	ae 01       	movw	r20, r28
    2046:	4a 5f       	subi	r20, 0xFA	; 250
    2048:	5f 4f       	sbci	r21, 0xFF	; 255
    204a:	be 01       	movw	r22, r28
    204c:	6c 5f       	subi	r22, 0xFC	; 252
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	ce 01       	movw	r24, r28
    2054:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	08 95       	ret

00002060 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e6 e3       	ldi	r30, 0x36	; 54
    2066:	f0 e1       	ldi	r31, 0x10	; 16
    2068:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x12>
    206c:	ec 01       	movw	r28, r24
    206e:	8b 01       	movw	r16, r22
    2070:	b4 2e       	mov	r11, r20
    2072:	84 2f       	mov	r24, r20
    2074:	8d 7f       	andi	r24, 0xFD	; 253
    2076:	51 f4       	brne	.+20     	; 0x208c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	89 2b       	or	r24, r25
    207e:	09 f4       	brne	.+2      	; 0x2082 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2080:	97 c0       	rjmp	.+302    	; 0x21b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	89 2b       	or	r24, r25
    2088:	09 f4       	brne	.+2      	; 0x208c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    208a:	92 c0       	rjmp	.+292    	; 0x21b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	8b 0d       	add	r24, r11
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	50 f4       	brcc	.+20     	; 0x20a8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2094:	88 81       	ld	r24, Y
    2096:	99 81       	ldd	r25, Y+1	; 0x01
    2098:	89 2b       	or	r24, r25
    209a:	09 f4       	brne	.+2      	; 0x209e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    209c:	89 c0       	rjmp	.+274    	; 0x21b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	89 2b       	or	r24, r25
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    20a6:	84 c0       	rjmp	.+264    	; 0x21b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    20a8:	4b 2d       	mov	r20, r11
    20aa:	b8 01       	movw	r22, r16
    20ac:	ce 01       	movw	r24, r28
    20ae:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN16PololuQTRSensors4readEPjh>
    20b2:	78 01       	movw	r14, r16
    20b4:	00 e0       	ldi	r16, 0x00	; 0
    20b6:	10 e0       	ldi	r17, 0x00	; 0
    20b8:	c1 2c       	mov	r12, r1
    20ba:	d1 2c       	mov	r13, r1
    20bc:	88 85       	ldd	r24, Y+8	; 0x08
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	c8 16       	cp	r12, r24
    20c2:	d9 06       	cpc	r13, r25
    20c4:	0c f0       	brlt	.+2      	; 0x20c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    20c6:	74 c0       	rjmp	.+232    	; 0x21b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	b8 12       	cpse	r11, r24
    20cc:	0a c0       	rjmp	.+20     	; 0x20e2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    20ce:	ea 81       	ldd	r30, Y+2	; 0x02
    20d0:	fb 81       	ldd	r31, Y+3	; 0x03
    20d2:	e0 0f       	add	r30, r16
    20d4:	f1 1f       	adc	r31, r17
    20d6:	01 90       	ld	r0, Z+
    20d8:	f0 81       	ld	r31, Z
    20da:	e0 2d       	mov	r30, r0
    20dc:	a8 81       	ld	r26, Y
    20de:	b9 81       	ldd	r27, Y+1	; 0x01
    20e0:	0d c0       	rjmp	.+26     	; 0x20fc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	2e 81       	ldd	r18, Y+6	; 0x06
    20e8:	3f 81       	ldd	r19, Y+7	; 0x07
    20ea:	b1 10       	cpse	r11, r1
    20ec:	0c c0       	rjmp	.+24     	; 0x2106 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    20ee:	f9 01       	movw	r30, r18
    20f0:	e0 0f       	add	r30, r16
    20f2:	f1 1f       	adc	r31, r17
    20f4:	01 90       	ld	r0, Z+
    20f6:	f0 81       	ld	r31, Z
    20f8:	e0 2d       	mov	r30, r0
    20fa:	dc 01       	movw	r26, r24
    20fc:	a0 0f       	add	r26, r16
    20fe:	b1 1f       	adc	r27, r17
    2100:	8d 91       	ld	r24, X+
    2102:	9c 91       	ld	r25, X
    2104:	28 c0       	rjmp	.+80     	; 0x2156 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2106:	fc 01       	movw	r30, r24
    2108:	e0 0f       	add	r30, r16
    210a:	f1 1f       	adc	r31, r17
    210c:	40 81       	ld	r20, Z
    210e:	51 81       	ldd	r21, Z+1	; 0x01
    2110:	e8 81       	ld	r30, Y
    2112:	f9 81       	ldd	r31, Y+1	; 0x01
    2114:	e0 0f       	add	r30, r16
    2116:	f1 1f       	adc	r31, r17
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	ee 85       	ldd	r30, Y+14	; 0x0e
    211e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2120:	48 17       	cp	r20, r24
    2122:	59 07       	cpc	r21, r25
    2124:	10 f4       	brcc	.+4      	; 0x212a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2126:	cf 01       	movw	r24, r30
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    212a:	8e 0f       	add	r24, r30
    212c:	9f 1f       	adc	r25, r31
    212e:	84 1b       	sub	r24, r20
    2130:	95 0b       	sbc	r25, r21
    2132:	d9 01       	movw	r26, r18
    2134:	a0 0f       	add	r26, r16
    2136:	b1 1f       	adc	r27, r17
    2138:	2d 91       	ld	r18, X+
    213a:	3c 91       	ld	r19, X
    213c:	aa 81       	ldd	r26, Y+2	; 0x02
    213e:	bb 81       	ldd	r27, Y+3	; 0x03
    2140:	a0 0f       	add	r26, r16
    2142:	b1 1f       	adc	r27, r17
    2144:	4d 91       	ld	r20, X+
    2146:	5c 91       	ld	r21, X
    2148:	24 17       	cp	r18, r20
    214a:	35 07       	cpc	r19, r21
    214c:	20 f0       	brcs	.+8      	; 0x2156 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    214e:	e4 0f       	add	r30, r20
    2150:	f5 1f       	adc	r31, r21
    2152:	e2 1b       	sub	r30, r18
    2154:	f3 0b       	sbc	r31, r19
    2156:	e8 1b       	sub	r30, r24
    2158:	f9 0b       	sbc	r31, r25
    215a:	a9 f0       	breq	.+42     	; 0x2186 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    215c:	d7 01       	movw	r26, r14
    215e:	2d 91       	ld	r18, X+
    2160:	3c 91       	ld	r19, X
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	50 e0       	ldi	r21, 0x00	; 0
    2166:	28 1b       	sub	r18, r24
    2168:	39 0b       	sbc	r19, r25
    216a:	41 09       	sbc	r20, r1
    216c:	51 09       	sbc	r21, r1
    216e:	a8 ee       	ldi	r26, 0xE8	; 232
    2170:	b3 e0       	ldi	r27, 0x03	; 3
    2172:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__muluhisi3>
    2176:	9f 01       	movw	r18, r30
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	0e 94 c6 11 	call	0x238c	; 0x238c <__divmodsi4>
    2180:	37 fd       	sbrc	r19, 7
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2184:	02 c0       	rjmp	.+4      	; 0x218a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	29 3e       	cpi	r18, 0xE9	; 233
    218c:	b3 e0       	ldi	r27, 0x03	; 3
    218e:	3b 07       	cpc	r19, r27
    2190:	2c f0       	brlt	.+10     	; 0x219c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2192:	28 ee       	ldi	r18, 0xE8	; 232
    2194:	33 e0       	ldi	r19, 0x03	; 3
    2196:	02 c0       	rjmp	.+4      	; 0x219c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	f7 01       	movw	r30, r14
    219e:	21 93       	st	Z+, r18
    21a0:	31 93       	st	Z+, r19
    21a2:	7f 01       	movw	r14, r30
    21a4:	ff ef       	ldi	r31, 0xFF	; 255
    21a6:	cf 1a       	sub	r12, r31
    21a8:	df 0a       	sbc	r13, r31
    21aa:	0e 5f       	subi	r16, 0xFE	; 254
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	86 cf       	rjmp	.-244    	; 0x20bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	e9 e0       	ldi	r30, 0x09	; 9
    21b6:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x12>

000021ba <_ZN16PololuQTRSensors8readLineEPjhh>:
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__>
    21c6:	ec 01       	movw	r28, r24
    21c8:	8b 01       	movw	r16, r22
    21ca:	82 2e       	mov	r8, r18
    21cc:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    21d0:	28 84       	ldd	r2, Y+8	; 0x08
    21d2:	e8 01       	movw	r28, r16
    21d4:	41 2c       	mov	r4, r1
    21d6:	51 2c       	mov	r5, r1
    21d8:	32 01       	movw	r6, r4
    21da:	00 e0       	ldi	r16, 0x00	; 0
    21dc:	10 e0       	ldi	r17, 0x00	; 0
    21de:	c1 2c       	mov	r12, r1
    21e0:	d1 2c       	mov	r13, r1
    21e2:	76 01       	movw	r14, r12
    21e4:	31 2c       	mov	r3, r1
    21e6:	91 2c       	mov	r9, r1
    21e8:	58 ee       	ldi	r21, 0xE8	; 232
    21ea:	a5 2e       	mov	r10, r21
    21ec:	53 e0       	ldi	r21, 0x03	; 3
    21ee:	b5 2e       	mov	r11, r21
    21f0:	92 14       	cp	r9, r2
    21f2:	21 f1       	breq	.+72     	; 0x223c <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    21f4:	e9 91       	ld	r30, Y+
    21f6:	f9 91       	ld	r31, Y+
    21f8:	88 20       	and	r8, r8
    21fa:	21 f0       	breq	.+8      	; 0x2204 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    21fc:	c5 01       	movw	r24, r10
    21fe:	8e 1b       	sub	r24, r30
    2200:	9f 0b       	sbc	r25, r31
    2202:	fc 01       	movw	r30, r24
    2204:	e9 3c       	cpi	r30, 0xC9	; 201
    2206:	f1 05       	cpc	r31, r1
    2208:	24 f4       	brge	.+8      	; 0x2212 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    220a:	e3 33       	cpi	r30, 0x33	; 51
    220c:	f1 05       	cpc	r31, r1
    220e:	74 f0       	brlt	.+28     	; 0x222c <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2212:	33 24       	eor	r3, r3
    2214:	33 94       	inc	r3
    2216:	df 01       	movw	r26, r30
    2218:	a3 01       	movw	r20, r6
    221a:	92 01       	movw	r18, r4
    221c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__mulshisi3>
    2220:	c6 0e       	add	r12, r22
    2222:	d7 1e       	adc	r13, r23
    2224:	e8 1e       	adc	r14, r24
    2226:	f9 1e       	adc	r15, r25
    2228:	0e 0f       	add	r16, r30
    222a:	1f 1f       	adc	r17, r31
    222c:	93 94       	inc	r9
    222e:	98 ee       	ldi	r25, 0xE8	; 232
    2230:	49 0e       	add	r4, r25
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	59 1e       	adc	r5, r25
    2236:	61 1c       	adc	r6, r1
    2238:	71 1c       	adc	r7, r1
    223a:	da cf       	rjmp	.-76     	; 0x21f0 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    223c:	31 10       	cpse	r3, r1
    223e:	1e c0       	rjmp	.+60     	; 0x227c <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2240:	49 2d       	mov	r20, r9
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	41 50       	subi	r20, 0x01	; 1
    2246:	51 09       	sbc	r21, r1
    2248:	24 ef       	ldi	r18, 0xF4	; 244
    224a:	31 e0       	ldi	r19, 0x01	; 1
    224c:	42 9f       	mul	r20, r18
    224e:	c0 01       	movw	r24, r0
    2250:	43 9f       	mul	r20, r19
    2252:	90 0d       	add	r25, r0
    2254:	52 9f       	mul	r21, r18
    2256:	90 0d       	add	r25, r0
    2258:	11 24       	eor	r1, r1
    225a:	20 91 d9 01 	lds	r18, 0x01D9
    225e:	30 91 da 01 	lds	r19, 0x01DA
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	b4 f0       	brlt	.+44     	; 0x2294 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2268:	88 ee       	ldi	r24, 0xE8	; 232
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	48 9f       	mul	r20, r24
    226e:	90 01       	movw	r18, r0
    2270:	49 9f       	mul	r20, r25
    2272:	30 0d       	add	r19, r0
    2274:	58 9f       	mul	r21, r24
    2276:	30 0d       	add	r19, r0
    2278:	11 24       	eor	r1, r1
    227a:	0e c0       	rjmp	.+28     	; 0x2298 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    227c:	98 01       	movw	r18, r16
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	c7 01       	movw	r24, r14
    2284:	b6 01       	movw	r22, r12
    2286:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
    228a:	30 93 da 01 	sts	0x01DA, r19
    228e:	20 93 d9 01 	sts	0x01D9, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	c9 01       	movw	r24, r18
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	e2 e1       	ldi	r30, 0x12	; 18
    22a0:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__>

000022a4 <_ZN16PololuQTRSensorsD1Ev>:
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	ec 01       	movw	r28, r24
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	11 f0       	breq	.+4      	; 0x22b6 <_ZN16PololuQTRSensorsD1Ev+0x12>
    22b2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <free>
    22b6:	8e 81       	ldd	r24, Y+6	; 0x06
    22b8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	11 f0       	breq	.+4      	; 0x22c2 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    22be:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <free>
    22c2:	88 81       	ld	r24, Y
    22c4:	99 81       	ldd	r25, Y+1	; 0x01
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	11 f0       	breq	.+4      	; 0x22ce <_ZN16PololuQTRSensorsD1Ev+0x2a>
    22ca:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <free>
    22ce:	8c 81       	ldd	r24, Y+4	; 0x04
    22d0:	9d 81       	ldd	r25, Y+5	; 0x05
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	11 f0       	breq	.+4      	; 0x22da <_ZN16PololuQTRSensorsD1Ev+0x36>
    22d6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <free>
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <__udivmodqi4>:
    22e0:	99 1b       	sub	r25, r25
    22e2:	79 e0       	ldi	r23, 0x09	; 9
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__udivmodqi4_ep>

000022e6 <__udivmodqi4_loop>:
    22e6:	99 1f       	adc	r25, r25
    22e8:	96 17       	cp	r25, r22
    22ea:	08 f0       	brcs	.+2      	; 0x22ee <__udivmodqi4_ep>
    22ec:	96 1b       	sub	r25, r22

000022ee <__udivmodqi4_ep>:
    22ee:	88 1f       	adc	r24, r24
    22f0:	7a 95       	dec	r23
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <__udivmodqi4_loop>
    22f4:	80 95       	com	r24
    22f6:	08 95       	ret

000022f8 <__udivmodhi4>:
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	51 e1       	ldi	r21, 0x11	; 17
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <__udivmodhi4_ep>

00002300 <__udivmodhi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	a6 17       	cp	r26, r22
    2306:	b7 07       	cpc	r27, r23
    2308:	10 f0       	brcs	.+4      	; 0x230e <__udivmodhi4_ep>
    230a:	a6 1b       	sub	r26, r22
    230c:	b7 0b       	sbc	r27, r23

0000230e <__udivmodhi4_ep>:
    230e:	88 1f       	adc	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	5a 95       	dec	r21
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__udivmodhi4_loop>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	08 95       	ret

00002320 <__divmodhi4>:
    2320:	97 fb       	bst	r25, 7
    2322:	07 2e       	mov	r0, r23
    2324:	16 f4       	brtc	.+4      	; 0x232a <__divmodhi4+0xa>
    2326:	00 94       	com	r0
    2328:	07 d0       	rcall	.+14     	; 0x2338 <__divmodhi4_neg1>
    232a:	77 fd       	sbrc	r23, 7
    232c:	09 d0       	rcall	.+18     	; 0x2340 <__divmodhi4_neg2>
    232e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    2332:	07 fc       	sbrc	r0, 7
    2334:	05 d0       	rcall	.+10     	; 0x2340 <__divmodhi4_neg2>
    2336:	3e f4       	brtc	.+14     	; 0x2346 <__divmodhi4_exit>

00002338 <__divmodhi4_neg1>:
    2338:	90 95       	com	r25
    233a:	81 95       	neg	r24
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	08 95       	ret

00002340 <__divmodhi4_neg2>:
    2340:	70 95       	com	r23
    2342:	61 95       	neg	r22
    2344:	7f 4f       	sbci	r23, 0xFF	; 255

00002346 <__divmodhi4_exit>:
    2346:	08 95       	ret

00002348 <__udivmodsi4>:
    2348:	a1 e2       	ldi	r26, 0x21	; 33
    234a:	1a 2e       	mov	r1, r26
    234c:	aa 1b       	sub	r26, r26
    234e:	bb 1b       	sub	r27, r27
    2350:	fd 01       	movw	r30, r26
    2352:	0d c0       	rjmp	.+26     	; 0x236e <__udivmodsi4_ep>

00002354 <__udivmodsi4_loop>:
    2354:	aa 1f       	adc	r26, r26
    2356:	bb 1f       	adc	r27, r27
    2358:	ee 1f       	adc	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	a2 17       	cp	r26, r18
    235e:	b3 07       	cpc	r27, r19
    2360:	e4 07       	cpc	r30, r20
    2362:	f5 07       	cpc	r31, r21
    2364:	20 f0       	brcs	.+8      	; 0x236e <__udivmodsi4_ep>
    2366:	a2 1b       	sub	r26, r18
    2368:	b3 0b       	sbc	r27, r19
    236a:	e4 0b       	sbc	r30, r20
    236c:	f5 0b       	sbc	r31, r21

0000236e <__udivmodsi4_ep>:
    236e:	66 1f       	adc	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	88 1f       	adc	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	1a 94       	dec	r1
    2378:	69 f7       	brne	.-38     	; 0x2354 <__udivmodsi4_loop>
    237a:	60 95       	com	r22
    237c:	70 95       	com	r23
    237e:	80 95       	com	r24
    2380:	90 95       	com	r25
    2382:	9b 01       	movw	r18, r22
    2384:	ac 01       	movw	r20, r24
    2386:	bd 01       	movw	r22, r26
    2388:	cf 01       	movw	r24, r30
    238a:	08 95       	ret

0000238c <__divmodsi4>:
    238c:	05 2e       	mov	r0, r21
    238e:	97 fb       	bst	r25, 7
    2390:	1e f4       	brtc	.+6      	; 0x2398 <__divmodsi4+0xc>
    2392:	00 94       	com	r0
    2394:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__negsi2>
    2398:	57 fd       	sbrc	r21, 7
    239a:	07 d0       	rcall	.+14     	; 0x23aa <__divmodsi4_neg2>
    239c:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodsi4>
    23a0:	07 fc       	sbrc	r0, 7
    23a2:	03 d0       	rcall	.+6      	; 0x23aa <__divmodsi4_neg2>
    23a4:	4e f4       	brtc	.+18     	; 0x23b8 <__divmodsi4_exit>
    23a6:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__negsi2>

000023aa <__divmodsi4_neg2>:
    23aa:	50 95       	com	r21
    23ac:	40 95       	com	r20
    23ae:	30 95       	com	r19
    23b0:	21 95       	neg	r18
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255

000023b8 <__divmodsi4_exit>:
    23b8:	08 95       	ret

000023ba <__negsi2>:
    23ba:	90 95       	com	r25
    23bc:	80 95       	com	r24
    23be:	70 95       	com	r23
    23c0:	61 95       	neg	r22
    23c2:	7f 4f       	sbci	r23, 0xFF	; 255
    23c4:	8f 4f       	sbci	r24, 0xFF	; 255
    23c6:	9f 4f       	sbci	r25, 0xFF	; 255
    23c8:	08 95       	ret

000023ca <__umulhisi3>:
    23ca:	a2 9f       	mul	r26, r18
    23cc:	b0 01       	movw	r22, r0
    23ce:	b3 9f       	mul	r27, r19
    23d0:	c0 01       	movw	r24, r0
    23d2:	a3 9f       	mul	r26, r19
    23d4:	70 0d       	add	r23, r0
    23d6:	81 1d       	adc	r24, r1
    23d8:	11 24       	eor	r1, r1
    23da:	91 1d       	adc	r25, r1
    23dc:	b2 9f       	mul	r27, r18
    23de:	70 0d       	add	r23, r0
    23e0:	81 1d       	adc	r24, r1
    23e2:	11 24       	eor	r1, r1
    23e4:	91 1d       	adc	r25, r1
    23e6:	08 95       	ret

000023e8 <__muluhisi3>:
    23e8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
    23ec:	a5 9f       	mul	r26, r21
    23ee:	90 0d       	add	r25, r0
    23f0:	b4 9f       	mul	r27, r20
    23f2:	90 0d       	add	r25, r0
    23f4:	a4 9f       	mul	r26, r20
    23f6:	80 0d       	add	r24, r0
    23f8:	91 1d       	adc	r25, r1
    23fa:	11 24       	eor	r1, r1
    23fc:	08 95       	ret

000023fe <__mulshisi3>:
    23fe:	b7 ff       	sbrs	r27, 7
    2400:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__muluhisi3>

00002404 <__mulohisi3>:
    2404:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__muluhisi3>
    2408:	82 1b       	sub	r24, r18
    240a:	93 0b       	sbc	r25, r19
    240c:	08 95       	ret

0000240e <__prologue_saves__>:
    240e:	2f 92       	push	r2
    2410:	3f 92       	push	r3
    2412:	4f 92       	push	r4
    2414:	5f 92       	push	r5
    2416:	6f 92       	push	r6
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	ca 1b       	sub	r28, r26
    2438:	db 0b       	sbc	r29, r27
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	09 94       	ijmp

00002446 <__epilogue_restores__>:
    2446:	2a 88       	ldd	r2, Y+18	; 0x12
    2448:	39 88       	ldd	r3, Y+17	; 0x11
    244a:	48 88       	ldd	r4, Y+16	; 0x10
    244c:	5f 84       	ldd	r5, Y+15	; 0x0f
    244e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2450:	7d 84       	ldd	r7, Y+13	; 0x0d
    2452:	8c 84       	ldd	r8, Y+12	; 0x0c
    2454:	9b 84       	ldd	r9, Y+11	; 0x0b
    2456:	aa 84       	ldd	r10, Y+10	; 0x0a
    2458:	b9 84       	ldd	r11, Y+9	; 0x09
    245a:	c8 84       	ldd	r12, Y+8	; 0x08
    245c:	df 80       	ldd	r13, Y+7	; 0x07
    245e:	ee 80       	ldd	r14, Y+6	; 0x06
    2460:	fd 80       	ldd	r15, Y+5	; 0x05
    2462:	0c 81       	ldd	r16, Y+4	; 0x04
    2464:	1b 81       	ldd	r17, Y+3	; 0x03
    2466:	aa 81       	ldd	r26, Y+2	; 0x02
    2468:	b9 81       	ldd	r27, Y+1	; 0x01
    246a:	ce 0f       	add	r28, r30
    246c:	d1 1d       	adc	r29, r1
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	ed 01       	movw	r28, r26
    247a:	08 95       	ret

0000247c <__tablejump2__>:
    247c:	ee 0f       	add	r30, r30
    247e:	ff 1f       	adc	r31, r31
    2480:	05 90       	lpm	r0, Z+
    2482:	f4 91       	lpm	r31, Z
    2484:	e0 2d       	mov	r30, r0
    2486:	09 94       	ijmp

00002488 <malloc>:
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	82 30       	cpi	r24, 0x02	; 2
    248e:	91 05       	cpc	r25, r1
    2490:	10 f4       	brcc	.+4      	; 0x2496 <malloc+0xe>
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	e0 91 48 02 	lds	r30, 0x0248
    249a:	f0 91 49 02 	lds	r31, 0x0249
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	c0 e0       	ldi	r28, 0x00	; 0
    24a4:	d0 e0       	ldi	r29, 0x00	; 0
    24a6:	30 97       	sbiw	r30, 0x00	; 0
    24a8:	11 f1       	breq	.+68     	; 0x24ee <malloc+0x66>
    24aa:	40 81       	ld	r20, Z
    24ac:	51 81       	ldd	r21, Z+1	; 0x01
    24ae:	48 17       	cp	r20, r24
    24b0:	59 07       	cpc	r21, r25
    24b2:	c0 f0       	brcs	.+48     	; 0x24e4 <malloc+0x5c>
    24b4:	48 17       	cp	r20, r24
    24b6:	59 07       	cpc	r21, r25
    24b8:	61 f4       	brne	.+24     	; 0x24d2 <malloc+0x4a>
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 97       	sbiw	r28, 0x00	; 0
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <malloc+0x40>
    24c2:	9b 83       	std	Y+3, r25	; 0x03
    24c4:	8a 83       	std	Y+2, r24	; 0x02
    24c6:	2b c0       	rjmp	.+86     	; 0x251e <malloc+0x96>
    24c8:	90 93 49 02 	sts	0x0249, r25
    24cc:	80 93 48 02 	sts	0x0248, r24
    24d0:	26 c0       	rjmp	.+76     	; 0x251e <malloc+0x96>
    24d2:	21 15       	cp	r18, r1
    24d4:	31 05       	cpc	r19, r1
    24d6:	19 f0       	breq	.+6      	; 0x24de <malloc+0x56>
    24d8:	42 17       	cp	r20, r18
    24da:	53 07       	cpc	r21, r19
    24dc:	18 f4       	brcc	.+6      	; 0x24e4 <malloc+0x5c>
    24de:	9a 01       	movw	r18, r20
    24e0:	be 01       	movw	r22, r28
    24e2:	df 01       	movw	r26, r30
    24e4:	ef 01       	movw	r28, r30
    24e6:	02 80       	ldd	r0, Z+2	; 0x02
    24e8:	f3 81       	ldd	r31, Z+3	; 0x03
    24ea:	e0 2d       	mov	r30, r0
    24ec:	dc cf       	rjmp	.-72     	; 0x24a6 <malloc+0x1e>
    24ee:	21 15       	cp	r18, r1
    24f0:	31 05       	cpc	r19, r1
    24f2:	09 f1       	breq	.+66     	; 0x2536 <malloc+0xae>
    24f4:	28 1b       	sub	r18, r24
    24f6:	39 0b       	sbc	r19, r25
    24f8:	24 30       	cpi	r18, 0x04	; 4
    24fa:	31 05       	cpc	r19, r1
    24fc:	90 f4       	brcc	.+36     	; 0x2522 <malloc+0x9a>
    24fe:	12 96       	adiw	r26, 0x02	; 2
    2500:	8d 91       	ld	r24, X+
    2502:	9c 91       	ld	r25, X
    2504:	13 97       	sbiw	r26, 0x03	; 3
    2506:	61 15       	cp	r22, r1
    2508:	71 05       	cpc	r23, r1
    250a:	21 f0       	breq	.+8      	; 0x2514 <malloc+0x8c>
    250c:	fb 01       	movw	r30, r22
    250e:	93 83       	std	Z+3, r25	; 0x03
    2510:	82 83       	std	Z+2, r24	; 0x02
    2512:	04 c0       	rjmp	.+8      	; 0x251c <malloc+0x94>
    2514:	90 93 49 02 	sts	0x0249, r25
    2518:	80 93 48 02 	sts	0x0248, r24
    251c:	fd 01       	movw	r30, r26
    251e:	32 96       	adiw	r30, 0x02	; 2
    2520:	44 c0       	rjmp	.+136    	; 0x25aa <malloc+0x122>
    2522:	fd 01       	movw	r30, r26
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	81 93       	st	Z+, r24
    252a:	91 93       	st	Z+, r25
    252c:	22 50       	subi	r18, 0x02	; 2
    252e:	31 09       	sbc	r19, r1
    2530:	2d 93       	st	X+, r18
    2532:	3c 93       	st	X, r19
    2534:	3a c0       	rjmp	.+116    	; 0x25aa <malloc+0x122>
    2536:	20 91 46 02 	lds	r18, 0x0246
    253a:	30 91 47 02 	lds	r19, 0x0247
    253e:	23 2b       	or	r18, r19
    2540:	41 f4       	brne	.+16     	; 0x2552 <malloc+0xca>
    2542:	20 91 10 01 	lds	r18, 0x0110
    2546:	30 91 11 01 	lds	r19, 0x0111
    254a:	30 93 47 02 	sts	0x0247, r19
    254e:	20 93 46 02 	sts	0x0246, r18
    2552:	20 91 0e 01 	lds	r18, 0x010E
    2556:	30 91 0f 01 	lds	r19, 0x010F
    255a:	21 15       	cp	r18, r1
    255c:	31 05       	cpc	r19, r1
    255e:	41 f4       	brne	.+16     	; 0x2570 <malloc+0xe8>
    2560:	2d b7       	in	r18, 0x3d	; 61
    2562:	3e b7       	in	r19, 0x3e	; 62
    2564:	40 91 12 01 	lds	r20, 0x0112
    2568:	50 91 13 01 	lds	r21, 0x0113
    256c:	24 1b       	sub	r18, r20
    256e:	35 0b       	sbc	r19, r21
    2570:	e0 91 46 02 	lds	r30, 0x0246
    2574:	f0 91 47 02 	lds	r31, 0x0247
    2578:	e2 17       	cp	r30, r18
    257a:	f3 07       	cpc	r31, r19
    257c:	a0 f4       	brcc	.+40     	; 0x25a6 <malloc+0x11e>
    257e:	2e 1b       	sub	r18, r30
    2580:	3f 0b       	sbc	r19, r31
    2582:	28 17       	cp	r18, r24
    2584:	39 07       	cpc	r19, r25
    2586:	78 f0       	brcs	.+30     	; 0x25a6 <malloc+0x11e>
    2588:	ac 01       	movw	r20, r24
    258a:	4e 5f       	subi	r20, 0xFE	; 254
    258c:	5f 4f       	sbci	r21, 0xFF	; 255
    258e:	24 17       	cp	r18, r20
    2590:	35 07       	cpc	r19, r21
    2592:	48 f0       	brcs	.+18     	; 0x25a6 <malloc+0x11e>
    2594:	4e 0f       	add	r20, r30
    2596:	5f 1f       	adc	r21, r31
    2598:	50 93 47 02 	sts	0x0247, r21
    259c:	40 93 46 02 	sts	0x0246, r20
    25a0:	81 93       	st	Z+, r24
    25a2:	91 93       	st	Z+, r25
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <malloc+0x122>
    25a6:	e0 e0       	ldi	r30, 0x00	; 0
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	cf 01       	movw	r24, r30
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <free>:
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <free+0xe>
    25be:	8c c0       	rjmp	.+280    	; 0x26d8 <free+0x126>
    25c0:	fc 01       	movw	r30, r24
    25c2:	32 97       	sbiw	r30, 0x02	; 2
    25c4:	13 82       	std	Z+3, r1	; 0x03
    25c6:	12 82       	std	Z+2, r1	; 0x02
    25c8:	00 91 48 02 	lds	r16, 0x0248
    25cc:	10 91 49 02 	lds	r17, 0x0249
    25d0:	01 15       	cp	r16, r1
    25d2:	11 05       	cpc	r17, r1
    25d4:	81 f4       	brne	.+32     	; 0x25f6 <free+0x44>
    25d6:	20 81       	ld	r18, Z
    25d8:	31 81       	ldd	r19, Z+1	; 0x01
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	20 91 46 02 	lds	r18, 0x0246
    25e2:	30 91 47 02 	lds	r19, 0x0247
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	79 f5       	brne	.+94     	; 0x264a <free+0x98>
    25ec:	f0 93 47 02 	sts	0x0247, r31
    25f0:	e0 93 46 02 	sts	0x0246, r30
    25f4:	71 c0       	rjmp	.+226    	; 0x26d8 <free+0x126>
    25f6:	d8 01       	movw	r26, r16
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	ae 17       	cp	r26, r30
    25fe:	bf 07       	cpc	r27, r31
    2600:	50 f4       	brcc	.+20     	; 0x2616 <free+0x64>
    2602:	12 96       	adiw	r26, 0x02	; 2
    2604:	2d 91       	ld	r18, X+
    2606:	3c 91       	ld	r19, X
    2608:	13 97       	sbiw	r26, 0x03	; 3
    260a:	ad 01       	movw	r20, r26
    260c:	21 15       	cp	r18, r1
    260e:	31 05       	cpc	r19, r1
    2610:	09 f1       	breq	.+66     	; 0x2654 <free+0xa2>
    2612:	d9 01       	movw	r26, r18
    2614:	f3 cf       	rjmp	.-26     	; 0x25fc <free+0x4a>
    2616:	9d 01       	movw	r18, r26
    2618:	da 01       	movw	r26, r20
    261a:	33 83       	std	Z+3, r19	; 0x03
    261c:	22 83       	std	Z+2, r18	; 0x02
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	86 0f       	add	r24, r22
    2624:	97 1f       	adc	r25, r23
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	69 f4       	brne	.+26     	; 0x2646 <free+0x94>
    262c:	ec 01       	movw	r28, r24
    262e:	28 81       	ld	r18, Y
    2630:	39 81       	ldd	r19, Y+1	; 0x01
    2632:	26 0f       	add	r18, r22
    2634:	37 1f       	adc	r19, r23
    2636:	2e 5f       	subi	r18, 0xFE	; 254
    2638:	3f 4f       	sbci	r19, 0xFF	; 255
    263a:	31 83       	std	Z+1, r19	; 0x01
    263c:	20 83       	st	Z, r18
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	93 83       	std	Z+3, r25	; 0x03
    2644:	82 83       	std	Z+2, r24	; 0x02
    2646:	45 2b       	or	r20, r21
    2648:	29 f4       	brne	.+10     	; 0x2654 <free+0xa2>
    264a:	f0 93 49 02 	sts	0x0249, r31
    264e:	e0 93 48 02 	sts	0x0248, r30
    2652:	42 c0       	rjmp	.+132    	; 0x26d8 <free+0x126>
    2654:	13 96       	adiw	r26, 0x03	; 3
    2656:	fc 93       	st	X, r31
    2658:	ee 93       	st	-X, r30
    265a:	12 97       	sbiw	r26, 0x02	; 2
    265c:	ed 01       	movw	r28, r26
    265e:	49 91       	ld	r20, Y+
    2660:	59 91       	ld	r21, Y+
    2662:	9e 01       	movw	r18, r28
    2664:	24 0f       	add	r18, r20
    2666:	35 1f       	adc	r19, r21
    2668:	e2 17       	cp	r30, r18
    266a:	f3 07       	cpc	r31, r19
    266c:	71 f4       	brne	.+28     	; 0x268a <free+0xd8>
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	84 0f       	add	r24, r20
    2674:	95 1f       	adc	r25, r21
    2676:	02 96       	adiw	r24, 0x02	; 2
    2678:	11 96       	adiw	r26, 0x01	; 1
    267a:	9c 93       	st	X, r25
    267c:	8e 93       	st	-X, r24
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	13 96       	adiw	r26, 0x03	; 3
    2684:	9c 93       	st	X, r25
    2686:	8e 93       	st	-X, r24
    2688:	12 97       	sbiw	r26, 0x02	; 2
    268a:	e0 e0       	ldi	r30, 0x00	; 0
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	d8 01       	movw	r26, r16
    2690:	12 96       	adiw	r26, 0x02	; 2
    2692:	8d 91       	ld	r24, X+
    2694:	9c 91       	ld	r25, X
    2696:	13 97       	sbiw	r26, 0x03	; 3
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	19 f0       	breq	.+6      	; 0x26a2 <free+0xf0>
    269c:	f8 01       	movw	r30, r16
    269e:	8c 01       	movw	r16, r24
    26a0:	f6 cf       	rjmp	.-20     	; 0x268e <free+0xdc>
    26a2:	8d 91       	ld	r24, X+
    26a4:	9c 91       	ld	r25, X
    26a6:	98 01       	movw	r18, r16
    26a8:	2e 5f       	subi	r18, 0xFE	; 254
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	82 0f       	add	r24, r18
    26ae:	93 1f       	adc	r25, r19
    26b0:	20 91 46 02 	lds	r18, 0x0246
    26b4:	30 91 47 02 	lds	r19, 0x0247
    26b8:	28 17       	cp	r18, r24
    26ba:	39 07       	cpc	r19, r25
    26bc:	69 f4       	brne	.+26     	; 0x26d8 <free+0x126>
    26be:	30 97       	sbiw	r30, 0x00	; 0
    26c0:	29 f4       	brne	.+10     	; 0x26cc <free+0x11a>
    26c2:	10 92 49 02 	sts	0x0249, r1
    26c6:	10 92 48 02 	sts	0x0248, r1
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <free+0x11e>
    26cc:	13 82       	std	Z+3, r1	; 0x03
    26ce:	12 82       	std	Z+2, r1	; 0x02
    26d0:	10 93 47 02 	sts	0x0247, r17
    26d4:	00 93 46 02 	sts	0x0246, r16
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	08 95       	ret

000026e2 <__do_global_dtors>:
    26e2:	10 e0       	ldi	r17, 0x00	; 0
    26e4:	c5 e5       	ldi	r28, 0x55	; 85
    26e6:	d0 e0       	ldi	r29, 0x00	; 0
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <__do_global_dtors+0x10>
    26ea:	fe 01       	movw	r30, r28
    26ec:	0e 94 3e 12 	call	0x247c	; 0x247c <__tablejump2__>
    26f0:	21 96       	adiw	r28, 0x01	; 1
    26f2:	c6 35       	cpi	r28, 0x56	; 86
    26f4:	d1 07       	cpc	r29, r17
    26f6:	c9 f7       	brne	.-14     	; 0x26ea <__do_global_dtors+0x8>
    26f8:	f8 94       	cli

000026fa <__stop_program>:
    26fa:	ff cf       	rjmp	.-2      	; 0x26fa <__stop_program>
