
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000026be  00002752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  00800166  00800166  000027b8  2**0
                  ALLOC
  3 .stab         000076f8  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008f49  00000000  00000000  00009eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00012df9  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012e3c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  00012e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001297  00000000  00000000  00012f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000769  00000000  00000000  00014203  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f16  00000000  00000000  0001496c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000021c  00000000  00000000  00015884  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004c4  00000000  00000000  00015aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006df  00000000  00000000  00015f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  00016643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__dtors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_end>:
      aa:	45 0c       	add	r4, r5

000000ac <__dtors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ee eb       	ldi	r30, 0xBE	; 190
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 36       	cpi	r26, 0x66	; 102
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	a6 e6       	ldi	r26, 0x66	; 102
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a2 34       	cpi	r26, 0x42	; 66
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
      e2:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__do_global_dtors>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	88 e6       	ldi	r24, 0x68	; 104
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      fe:	62 e0       	ldi	r22, 0x02	; 2
     100:	8a e6       	ldi	r24, 0x6A	; 106
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	8b e6       	ldi	r24, 0x6B	; 107
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	8c e6       	ldi	r24, 0x6C	; 108
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	8d e6       	ldi	r24, 0x6D	; 109
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	8e e6       	ldi	r24, 0x6E	; 110
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 9e 08 	call	0x113c	; 0x113c <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     130:	0c 94 11 09 	jmp	0x1222	; 0x1222 <clear>

00000134 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2a 97       	sbiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	8c 01       	movw	r16, r24
     158:	7c 01       	movw	r14, r24
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	e8 0e       	add	r14, r24
     15e:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     164:	95 e6       	ldi	r25, 0x65	; 101
     166:	c9 2e       	mov	r12, r25
     168:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	e4 e1       	ldi	r30, 0x14	; 20
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	de 01       	movw	r26, r28
     170:	11 96       	adiw	r26, 0x01	; 1
     172:	8b 2d       	mov	r24, r11
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     17c:	f8 01       	movw	r30, r16
     17e:	81 91       	ld	r24, Z+
     180:	91 91       	ld	r25, Z+
     182:	8f 01       	movw	r16, r30
     184:	b6 01       	movw	r22, r12
     186:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ec 0f       	add	r30, r28
     190:	fd 1f       	adc	r31, r29
     192:	e6 0f       	add	r30, r22
     194:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     196:	80 81       	ld	r24, Z
     198:	0e 94 a1 08 	call	0x1142	; 0x1142 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     19c:	0e 15       	cp	r16, r14
     19e:	1f 05       	cpc	r17, r15
     1a0:	21 f7       	brne	.-56     	; 0x16a <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	08 95       	ret

000001c2 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1c2:	2f 92       	push	r2
     1c4:	3f 92       	push	r3
     1c6:	4f 92       	push	r4
     1c8:	5f 92       	push	r5
     1ca:	6f 92       	push	r6
     1cc:	7f 92       	push	r7
     1ce:	8f 92       	push	r8
     1d0:	9f 92       	push	r9
     1d2:	af 92       	push	r10
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1fc:	a1 2c       	mov	r10, r1
     1fe:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     200:	60 e1       	ldi	r22, 0x10	; 16
     202:	46 2e       	mov	r4, r22
     204:	67 e2       	ldi	r22, 0x27	; 39
     206:	56 2e       	mov	r5, r22
     208:	61 2c       	mov	r6, r1
     20a:	71 2c       	mov	r7, r1
     20c:	74 e1       	ldi	r23, 0x14	; 20
     20e:	27 2e       	mov	r2, r23
     210:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     212:	ec e3       	ldi	r30, 0x3C	; 60
     214:	8e 2e       	mov	r8, r30
     216:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     222:	8c 01       	movw	r16, r24
     224:	00 5d       	subi	r16, 0xD0	; 208
     226:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     228:	c8 01       	movw	r24, r16
     22a:	01 2e       	mov	r0, r17
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	c8 0e       	add	r12, r24
     234:	d9 1e       	adc	r13, r25
     236:	ea 1e       	adc	r14, r26
     238:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	a3 01       	movw	r20, r6
     240:	92 01       	movw	r18, r4
     242:	0e 94 a7 11 	call	0x234e	; 0x234e <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     246:	f8 01       	movw	r30, r16
     248:	ea 19       	sub	r30, r10
     24a:	fb 09       	sbc	r31, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     24c:	cf 01       	movw	r24, r30
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	8e 0f       	add	r24, r30
     254:	9f 1f       	adc	r25, r31
     256:	97 fd       	sbrc	r25, 7
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	95 95       	asr	r25
     25c:	87 95       	ror	r24
     25e:	28 0f       	add	r18, r24
     260:	39 1f       	adc	r19, r25
     262:	c8 01       	movw	r24, r16
     264:	b1 01       	movw	r22, r2
     266:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__divmodhi4>
     26a:	c9 01       	movw	r24, r18
     26c:	86 0f       	add	r24, r22
     26e:	97 1f       	adc	r25, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
     270:	8d 33       	cpi	r24, 0x3D	; 61
     272:	91 05       	cpc	r25, r1
     274:	6c f4       	brge	.+26     	; 0x290 <follow_segment+0xce>
			power_difference = max;
		if(power_difference < -max)
     276:	84 3c       	cpi	r24, 0xC4	; 196
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	92 07       	cpc	r25, r18
     27c:	1c f0       	brlt	.+6      	; 0x284 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     27e:	97 fd       	sbrc	r25, 7
     280:	03 c0       	rjmp	.+6      	; 0x288 <follow_segment+0xc6>
     282:	08 c0       	rjmp	.+16     	; 0x294 <follow_segment+0xd2>
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     284:	84 ec       	ldi	r24, 0xC4	; 196
     286:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     288:	6c e3       	ldi	r22, 0x3C	; 60
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	cc 96       	adiw	r24, 0x3c	; 60
     28e:	07 c0       	rjmp	.+14     	; 0x29e <follow_segment+0xdc>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     290:	8c e3       	ldi	r24, 0x3C	; 60
     292:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     294:	b4 01       	movw	r22, r8
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	8c e3       	ldi	r24, 0x3C	; 60
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	50 f4       	brcc	.+20     	; 0x2c0 <follow_segment+0xfe>
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	9e 81       	ldd	r25, Y+6	; 0x06
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <follow_segment+0xfe>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	60 f0       	brcs	.+24     	; 0x2d8 <follow_segment+0x116>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	38 f4       	brcc	.+14     	; 0x2d8 <follow_segment+0x116>
     2ca:	89 85       	ldd	r24, Y+9	; 0x09
     2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	10 f4       	brcc	.+4      	; 0x2d8 <follow_segment+0x116>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2d4:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2d6:	a0 cf       	rjmp	.-192    	; 0x218 <follow_segment+0x56>
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	08 95       	ret

0000030a <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	2a 97       	sbiw	r28, 0x0a	; 10
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     326:	80 ed       	ldi	r24, 0xD0	; 208
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	0e 94 41 0c 	call	0x1882	; 0x1882 <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     32e:	0e 94 75 00 	call	0xea	; 0xea <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     332:	82 ea       	ldi	r24, 0xA2	; 162
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 31 09 	call	0x1262	; 0x1262 <print_from_program_space>
	lcd_goto_xy(0,1);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 a9 09 	call	0x1352	; 0x1352 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     342:	89 e9       	ldi	r24, 0x99	; 153
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 31 09 	call	0x1262	; 0x1262 <print_from_program_space>
	play_from_program_space(welcome);
     34a:	83 e8       	ldi	r24, 0x83	; 131
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 de 07 	call	0xfbc	; 0xfbc <play_from_program_space>
	delay_ms(1000);
     352:	88 ee       	ldi	r24, 0xE8	; 232
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>

	clear();
     35a:	0e 94 11 09 	call	0x1222	; 0x1222 <clear>
	print_from_program_space(demo_name_line1);
     35e:	84 e9       	ldi	r24, 0x94	; 148
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 31 09 	call	0x1262	; 0x1262 <print_from_program_space>
	lcd_goto_xy(0,1);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 a9 09 	call	0x1352	; 0x1352 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     36e:	8d e8       	ldi	r24, 0x8D	; 141
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 31 09 	call	0x1262	; 0x1262 <print_from_program_space>
	delay_ms(1000);
     376:	88 ee       	ldi	r24, 0xE8	; 232
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>

	int flaga = 0;
     37e:	00 e0       	ldi	r16, 0x00	; 0
     380:	10 e0       	ldi	r17, 0x00	; 0
	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     382:	80 e1       	ldi	r24, 0x10	; 16
     384:	0e 94 a2 0a 	call	0x1544	; 0x1544 <button_is_pressed>
     388:	81 11       	cpse	r24, r1
     38a:	39 c0       	rjmp	.+114    	; 0x3fe <initialize+0xf4>
	{	
		if(get_single_debounced_button_press(BUTTON_A)){ //Rensyuu Kadai 2
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 49 0b 	call	0x1692	; 0x1692 <get_single_debounced_button_press>
     392:	88 23       	and	r24, r24
     394:	11 f0       	breq	.+4      	; 0x39a <initialize+0x90>
			if(flaga == 1){
				flaga = 0;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	08 27       	eor	r16, r24
			}else{
				flaga = 1;
			}
		}
		
		clear();
     39a:	0e 94 11 09 	call	0x1222	; 0x1222 <clear>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     39e:	0e 94 a3 04 	call	0x946	; 0x946 <read_battery_millivolts_3pi>
     3a2:	7c 01       	movw	r14, r24
		int bat = read_battery_millivolts();
		if(flaga == 1){
     3a4:	01 30       	cpi	r16, 0x01	; 1
     3a6:	11 05       	cpc	r17, r1
     3a8:	59 f4       	brne	.+22     	; 0x3c0 <initialize+0xb6>
			int mem = get_free_ram();
     3aa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <get_free_ram>
			print_long(mem);
     3ae:	bc 01       	movw	r22, r24
     3b0:	99 0f       	add	r25, r25
     3b2:	88 0b       	sbc	r24, r24
     3b4:	99 0b       	sbc	r25, r25
     3b6:	0e 94 86 09 	call	0x130c	; 0x130c <print_long>
			print("mem");
     3ba:	8b e3       	ldi	r24, 0x3B	; 59
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	08 c0       	rjmp	.+16     	; 0x3d0 <initialize+0xc6>
		}else{
			print_long(bat);
     3c0:	bc 01       	movw	r22, r24
     3c2:	99 0f       	add	r25, r25
     3c4:	88 0b       	sbc	r24, r24
     3c6:	99 0b       	sbc	r25, r25
     3c8:	0e 94 86 09 	call	0x130c	; 0x130c <print_long>
			print("mV");
     3cc:	8f e3       	ldi	r24, 0x3F	; 63
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 20 09 	call	0x1240	; 0x1240 <print>
		}
		
		lcd_goto_xy(0,1);
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 a9 09 	call	0x1352	; 0x1352 <lcd_goto_xy>
		if(bat > 4700){                 //Rensyuu Kadai 1
     3dc:	8d e5       	ldi	r24, 0x5D	; 93
     3de:	e8 16       	cp	r14, r24
     3e0:	82 e1       	ldi	r24, 0x12	; 18
     3e2:	f8 06       	cpc	r15, r24
     3e4:	1c f0       	brlt	.+6      	; 0x3ec <initialize+0xe2>
			print("Press B");
     3e6:	82 e4       	ldi	r24, 0x42	; 66
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <initialize+0xe6>
		}
		else{
			print("Replace!");
     3ec:	8a e4       	ldi	r24, 0x4A	; 74
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 20 09 	call	0x1240	; 0x1240 <print>
		}
		delay_ms(40);                  //RK2 100 -> 40
     3f4:	88 e2       	ldi	r24, 0x28	; 40
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
     3fc:	c2 cf       	rjmp	.-124    	; 0x382 <initialize+0x78>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	0e 94 8e 0a 	call	0x151c	; 0x151c <wait_for_button_release>
	delay_ms(1000);
     404:	88 ee       	ldi	r24, 0xE8	; 232
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
     40c:	0c ee       	ldi	r16, 0xEC	; 236
     40e:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     410:	08 32       	cpi	r16, 0x28	; 40
     412:	11 05       	cpc	r17, r1
     414:	28 f0       	brcs	.+10     	; 0x420 <initialize+0x116>
			set_motors(40,-40);
     416:	68 ed       	ldi	r22, 0xD8	; 216
     418:	7f ef       	ldi	r23, 0xFF	; 255
     41a:	88 e2       	ldi	r24, 0x28	; 40
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	04 c0       	rjmp	.+8      	; 0x428 <initialize+0x11e>
		else
			set_motors(-40,40);
     420:	68 e2       	ldi	r22, 0x28	; 40
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	88 ed       	ldi	r24, 0xD8	; 216
     426:	9f ef       	ldi	r25, 0xFF	; 255
     428:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 05 0c 	call	0x180a	; 0x180a <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     432:	84 e1       	ldi	r24, 0x14	; 20
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
     43a:	0f 5f       	subi	r16, 0xFF	; 255
     43c:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     43e:	0c 33       	cpi	r16, 0x3C	; 60
     440:	11 05       	cpc	r17, r1
     442:	31 f7       	brne	.-52     	; 0x410 <initialize+0x106>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 a2 0a 	call	0x1544	; 0x1544 <button_is_pressed>
     456:	81 11       	cpse	r24, r1
     458:	1a c0       	rjmp	.+52     	; 0x48e <initialize+0x184>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	0e 94 0b 0c 	call	0x1816	; 0x1816 <read_line>
     464:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     466:	0e 94 11 09 	call	0x1222	; 0x1222 <clear>
		print_long(position);
     46a:	b8 01       	movw	r22, r16
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 86 09 	call	0x130c	; 0x130c <print_long>
		lcd_goto_xy(0,1);
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 a9 09 	call	0x1352	; 0x1352 <lcd_goto_xy>
		display_readings(sensors);
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 9a 00 	call	0x134	; 0x134 <display_readings>

		delay_ms(100);
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
     48c:	e1 cf       	rjmp	.-62     	; 0x450 <initialize+0x146>
	}
	wait_for_button_release(BUTTON_B);
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	0e 94 8e 0a 	call	0x151c	; 0x151c <wait_for_button_release>

	clear();
     494:	0e 94 11 09 	call	0x1222	; 0x1222 <clear>

	print("Go!");		
     498:	83 e5       	ldi	r24, 0x53	; 83
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 20 09 	call	0x1240	; 0x1240 <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     4a0:	86 e7       	ldi	r24, 0x76	; 118
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 de 07 	call	0xfbc	; 0xfbc <play_from_program_space>
	while(is_playing());
     4a8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <is_playing>
     4ac:	81 11       	cpse	r24, r1
     4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <initialize+0x19e>
}
     4b0:	2a 96       	adiw	r28, 0x0a	; 10
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	08 95       	ret

000004ca <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     4ca:	0e 94 85 01 	call	0x30a	; 0x30a <initialize>

	// Call our maze solving routine.
	maze_solve();
     4ce:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <main+0x8>

000004d4 <display_path>:
void display_path()
{
	// Set the last character of the path to a 0 so that the print()
	// function can find the end of the string.  This is how strings
	// are normally terminated in C.
	path[path_length] = 0;
     4d4:	e0 91 d5 01 	lds	r30, 0x01D5
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	ea 52       	subi	r30, 0x2A	; 42
     4dc:	fe 4f       	sbci	r31, 0xFE	; 254
     4de:	10 82       	st	Z, r1

	clear();
     4e0:	0e 94 11 09 	call	0x1222	; 0x1222 <clear>
	print(path);
     4e4:	86 ed       	ldi	r24, 0xD6	; 214
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 20 09 	call	0x1240	; 0x1240 <print>

	if(path_length > 8)
     4ec:	80 91 d5 01 	lds	r24, 0x01D5
     4f0:	89 30       	cpi	r24, 0x09	; 9
     4f2:	40 f0       	brcs	.+16     	; 0x504 <display_path+0x30>
	{
		lcd_goto_xy(0,1);
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 a9 09 	call	0x1352	; 0x1352 <lcd_goto_xy>
		print(path+8);
     4fc:	8e ed       	ldi	r24, 0xDE	; 222
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0c 94 20 09 	jmp	0x1240	; 0x1240 <print>
     504:	08 95       	ret

00000506 <select_turn>:
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right)
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
     506:	81 11       	cpse	r24, r1
     508:	06 c0       	rjmp	.+12     	; 0x516 <select_turn+0x10>
		return 'L';
	else if(found_straight)
     50a:	61 11       	cpse	r22, r1
     50c:	06 c0       	rjmp	.+12     	; 0x51a <select_turn+0x14>
		return 'S';
	else if(found_right)
     50e:	41 11       	cpse	r20, r1
     510:	06 c0       	rjmp	.+12     	; 0x51e <select_turn+0x18>
		return 'R';
	else
		return 'B';
     512:	82 e4       	ldi	r24, 0x42	; 66
     514:	08 95       	ret
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
		return 'L';
     516:	8c e4       	ldi	r24, 0x4C	; 76
     518:	08 95       	ret
	else if(found_straight)
		return 'S';
     51a:	83 e5       	ldi	r24, 0x53	; 83
     51c:	08 95       	ret
	else if(found_right)
		return 'R';
     51e:	82 e5       	ldi	r24, 0x52	; 82
	else
		return 'B';
}
     520:	08 95       	ret

00000522 <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplify_path()
{
	// only simplify the path if the second-to-last turn was a 'B'
	if(path_length < 3 || path[path_length-2] != 'B')
     522:	40 91 d5 01 	lds	r20, 0x01D5
     526:	43 30       	cpi	r20, 0x03	; 3
     528:	08 f4       	brcc	.+2      	; 0x52c <simplify_path+0xa>
     52a:	45 c0       	rjmp	.+138    	; 0x5b6 <simplify_path+0x94>
     52c:	24 2f       	mov	r18, r20
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	2a 52       	subi	r18, 0x2A	; 42
     532:	3e 4f       	sbci	r19, 0xFE	; 254
     534:	f9 01       	movw	r30, r18
     536:	32 97       	sbiw	r30, 0x02	; 2
     538:	80 81       	ld	r24, Z
     53a:	82 34       	cpi	r24, 0x42	; 66
     53c:	e1 f5       	brne	.+120    	; 0x5b6 <simplify_path+0x94>
     53e:	f9 01       	movw	r30, r18
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
     548:	52 91       	ld	r21, -Z
     54a:	5c 34       	cpi	r21, 0x4C	; 76
     54c:	51 f0       	breq	.+20     	; 0x562 <simplify_path+0x40>
     54e:	52 35       	cpi	r21, 0x52	; 82
     550:	29 f0       	breq	.+10     	; 0x55c <simplify_path+0x3a>
     552:	52 34       	cpi	r21, 0x42	; 66
     554:	41 f4       	brne	.+16     	; 0x566 <simplify_path+0x44>
			break;
		case 'L':
			total_angle += 270;
			break;
		case 'B':
			total_angle += 180;
     556:	8c 54       	subi	r24, 0x4C	; 76
     558:	9f 4f       	sbci	r25, 0xFF	; 255
		  	break;
     55a:	05 c0       	rjmp	.+10     	; 0x566 <simplify_path+0x44>
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
		{
		case 'R':
			total_angle += 90;
     55c:	86 5a       	subi	r24, 0xA6	; 166
     55e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     560:	02 c0       	rjmp	.+4      	; 0x566 <simplify_path+0x44>
		case 'L':
			total_angle += 270;
     562:	82 5f       	subi	r24, 0xF2	; 242
     564:	9e 4f       	sbci	r25, 0xFE	; 254
	if(path_length < 3 || path[path_length-2] != 'B')
		return;

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	64 30       	cpi	r22, 0x04	; 4
     56c:	71 05       	cpc	r23, r1
     56e:	61 f7       	brne	.-40     	; 0x548 <simplify_path+0x26>
		  	break;
		}
	}

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;
     570:	68 e6       	ldi	r22, 0x68	; 104
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__divmodhi4>

	// Replace all of those turns with a single one.
	switch(total_angle)
     578:	8a 35       	cpi	r24, 0x5A	; 90
     57a:	91 05       	cpc	r25, r1
     57c:	89 f0       	breq	.+34     	; 0x5a0 <simplify_path+0x7e>
     57e:	34 f4       	brge	.+12     	; 0x58c <simplify_path+0x6a>
     580:	89 2b       	or	r24, r25
     582:	b1 f4       	brne	.+44     	; 0x5b0 <simplify_path+0x8e>
	{
	case 0:
		path[path_length - 3] = 'S';
     584:	f9 01       	movw	r30, r18
     586:	33 97       	sbiw	r30, 0x03	; 3
     588:	83 e5       	ldi	r24, 0x53	; 83
     58a:	11 c0       	rjmp	.+34     	; 0x5ae <simplify_path+0x8c>

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;

	// Replace all of those turns with a single one.
	switch(total_angle)
     58c:	84 3b       	cpi	r24, 0xB4	; 180
     58e:	91 05       	cpc	r25, r1
     590:	59 f0       	breq	.+22     	; 0x5a8 <simplify_path+0x86>
     592:	8e 30       	cpi	r24, 0x0E	; 14
     594:	91 40       	sbci	r25, 0x01	; 1
     596:	61 f4       	brne	.+24     	; 0x5b0 <simplify_path+0x8e>
		break;
	case 180:
		path[path_length - 3] = 'B';
		break;
	case 270:
		path[path_length - 3] = 'L';
     598:	f9 01       	movw	r30, r18
     59a:	33 97       	sbiw	r30, 0x03	; 3
     59c:	8c e4       	ldi	r24, 0x4C	; 76
     59e:	07 c0       	rjmp	.+14     	; 0x5ae <simplify_path+0x8c>
	{
	case 0:
		path[path_length - 3] = 'S';
		break;
	case 90:
		path[path_length - 3] = 'R';
     5a0:	f9 01       	movw	r30, r18
     5a2:	33 97       	sbiw	r30, 0x03	; 3
     5a4:	82 e5       	ldi	r24, 0x52	; 82
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <simplify_path+0x8c>
		break;
	case 180:
		path[path_length - 3] = 'B';
     5a8:	f9 01       	movw	r30, r18
     5aa:	33 97       	sbiw	r30, 0x03	; 3
     5ac:	82 e4       	ldi	r24, 0x42	; 66
		break;
	case 270:
		path[path_length - 3] = 'L';
     5ae:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	path_length -= 2;
     5b0:	42 50       	subi	r20, 0x02	; 2
     5b2:	40 93 d5 01 	sts	0x01D5, r20
     5b6:	08 95       	ret

000005b8 <maze_solve>:
}

// This function is called once, from main.c.
void maze_solve()
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	2b 97       	sbiw	r28, 0x0b	; 11
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
	// Loop until we have solved the maze.
	while(1)
	{
		// FIRST MAIN LOOP BODY  
		follow_segment();
     5cc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Drive straight a bit.  This helps us in case we entered the
		// intersection at an angle.
		// Note that we are slowing down - this prevents the robot
		// from tipping forward too much.
		set_motors(50,50);
     5d0:	62 e3       	ldi	r22, 0x32	; 50
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	82 e3       	ldi	r24, 0x32	; 50
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		delay_ms(50);
     5dc:	82 e3       	ldi	r24, 0x32	; 50
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
		unsigned char found_straight=0;
		unsigned char found_right=0;

		// Now read the sensors and check the intersection type.
		unsigned int sensors[5];
		read_line(sensors,IR_EMITTERS_ON);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	0e 94 0b 0c 	call	0x1816	; 0x1816 <read_line>

		// Check for left and right exits.
		if(sensors[0] > 100)
     5ee:	11 e0       	ldi	r17, 0x01	; 1
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	85 36       	cpi	r24, 0x65	; 101
     5f6:	91 05       	cpc	r25, r1
     5f8:	08 f4       	brcc	.+2      	; 0x5fc <maze_solve+0x44>
     5fa:	10 e0       	ldi	r17, 0x00	; 0
			found_left = 1;
		if(sensors[4] > 100)
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	89 85       	ldd	r24, Y+9	; 0x09
     600:	9a 85       	ldd	r25, Y+10	; 0x0a
     602:	85 36       	cpi	r24, 0x65	; 101
     604:	91 05       	cpc	r25, r1
     606:	08 f4       	brcc	.+2      	; 0x60a <maze_solve+0x52>
     608:	40 e0       	ldi	r20, 0x00	; 0
			found_right = 1;

		// Drive straight a bit more - this is enough to line up our
		// wheels with the intersection.
		set_motors(40,40);
     60a:	68 e2       	ldi	r22, 0x28	; 40
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	88 e2       	ldi	r24, 0x28	; 40
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	4b 87       	std	Y+11, r20	; 0x0b
     614:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		delay_ms(200);
     618:	88 ec       	ldi	r24, 0xC8	; 200
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>

		// Check for a straight exit.
		read_line(sensors,IR_EMITTERS_ON);
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	0e 94 0b 0c 	call	0x1816	; 0x1816 <read_line>
		if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200)
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	4b 85       	ldd	r20, Y+11	; 0x0b
     630:	89 3c       	cpi	r24, 0xC9	; 201
     632:	91 05       	cpc	r25, r1
     634:	60 f4       	brcc	.+24     	; 0x64e <maze_solve+0x96>
     636:	8d 81       	ldd	r24, Y+5	; 0x05
     638:	9e 81       	ldd	r25, Y+6	; 0x06
     63a:	89 3c       	cpi	r24, 0xC9	; 201
     63c:	91 05       	cpc	r25, r1
     63e:	a0 f4       	brcc	.+40     	; 0x668 <maze_solve+0xb0>
     640:	8f 81       	ldd	r24, Y+7	; 0x07
     642:	98 85       	ldd	r25, Y+8	; 0x08
     644:	89 3c       	cpi	r24, 0xC9	; 201
     646:	91 05       	cpc	r25, r1
     648:	78 f4       	brcc	.+30     	; 0x668 <maze_solve+0xb0>

		// These variables record whether the robot has seen a line to the
		// left, straight ahead, and right, whil examining the current
		// intersection.
		unsigned char found_left=0;
		unsigned char found_straight=0;
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	0e c0       	rjmp	.+28     	; 0x66a <maze_solve+0xb2>
			found_straight = 1;

		// Check for the ending spot.
		// If all three middle sensors are on dark black, we have
		// solved the maze.
		if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600)
     64e:	89 35       	cpi	r24, 0x59	; 89
     650:	92 40       	sbci	r25, 0x02	; 2
     652:	50 f0       	brcs	.+20     	; 0x668 <maze_solve+0xb0>
     654:	8d 81       	ldd	r24, Y+5	; 0x05
     656:	9e 81       	ldd	r25, Y+6	; 0x06
     658:	89 35       	cpi	r24, 0x59	; 89
     65a:	92 40       	sbci	r25, 0x02	; 2
     65c:	28 f0       	brcs	.+10     	; 0x668 <maze_solve+0xb0>
     65e:	8f 81       	ldd	r24, Y+7	; 0x07
     660:	98 85       	ldd	r25, Y+8	; 0x08
     662:	89 35       	cpi	r24, 0x59	; 89
     664:	92 40       	sbci	r25, 0x02	; 2
     666:	b0 f4       	brcc	.+44     	; 0x694 <maze_solve+0xdc>
     668:	61 e0       	ldi	r22, 0x01	; 1
			break;

		// Intersection identification is complete.
		// If the maze has been solved, we can follow the existing
		// path.  Otherwise, we need to learn the solution.
		unsigned char dir = select_turn(found_left, found_straight, found_right);
     66a:	81 2f       	mov	r24, r17
     66c:	0e 94 83 02 	call	0x506	; 0x506 <select_turn>
     670:	18 2f       	mov	r17, r24

		// Make the turn indicated by the path.
		turn(dir);
     672:	0e 94 b3 03 	call	0x766	; 0x766 <turn>

		// Store the intersection in the path variable.
		path[path_length] = dir;
     676:	90 91 d5 01 	lds	r25, 0x01D5
     67a:	e9 2f       	mov	r30, r25
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	ea 52       	subi	r30, 0x2A	; 42
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	10 83       	st	Z, r17
		path_length ++;
     684:	9f 5f       	subi	r25, 0xFF	; 255
     686:	90 93 d5 01 	sts	0x01D5, r25
		// You should check to make sure that the path_length does not
		// exceed the bounds of the array.  We'll ignore that in this
		// example.

		// Simplify the learned path.
		simplify_path();
     68a:	0e 94 91 02 	call	0x522	; 0x522 <simplify_path>

		// Display the path on the LCD.
		display_path();
     68e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_path>
	}
     692:	9c cf       	rjmp	.-200    	; 0x5cc <maze_solve+0x14>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
		{
			if(get_ms() % 2000 < 1000)
     694:	80 ed       	ldi	r24, 0xD0	; 208
     696:	c8 2e       	mov	r12, r24
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	d8 2e       	mov	r13, r24
     69c:	e1 2c       	mov	r14, r1
     69e:	f1 2c       	mov	r15, r1
	// Now enter an infinite loop - we can re-run the maze as many
	// times as we want to.
	while(1)
	{
		// Beep to show that we finished the maze.
		set_motors(0,0);
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		play(">>a32");
     6ac:	87 e5       	ldi	r24, 0x57	; 87
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <play>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <button_is_pressed>
     6ba:	81 11       	cpse	r24, r1
     6bc:	21 c0       	rjmp	.+66     	; 0x700 <maze_solve+0x148>
		{
			if(get_ms() % 2000 < 1000)
     6be:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <get_ms>
     6c2:	a7 01       	movw	r20, r14
     6c4:	96 01       	movw	r18, r12
     6c6:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
     6ca:	68 3e       	cpi	r22, 0xE8	; 232
     6cc:	73 40       	sbci	r23, 0x03	; 3
     6ce:	81 05       	cpc	r24, r1
     6d0:	91 05       	cpc	r25, r1
     6d2:	78 f4       	brcc	.+30     	; 0x6f2 <maze_solve+0x13a>
			{
				clear();
     6d4:	0e 94 11 09 	call	0x1222	; 0x1222 <clear>
				print("Solved!");
     6d8:	8d e5       	ldi	r24, 0x5D	; 93
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 20 09 	call	0x1240	; 0x1240 <print>
				lcd_goto_xy(0,1);
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 a9 09 	call	0x1352	; 0x1352 <lcd_goto_xy>
				print("Press B");
     6e8:	82 e4       	ldi	r24, 0x42	; 66
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 20 09 	call	0x1240	; 0x1240 <print>
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <maze_solve+0x13e>
			}
			else
				display_path();
     6f2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <display_path>
			delay_ms(30);
     6f6:	8e e1       	ldi	r24, 0x1E	; 30
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
     6fe:	da cf       	rjmp	.-76     	; 0x6b4 <maze_solve+0xfc>
		}
		while(button_is_pressed(BUTTON_B));
     700:	80 e1       	ldi	r24, 0x10	; 16
     702:	0e 94 a2 0a 	call	0x1544	; 0x1544 <button_is_pressed>
     706:	81 11       	cpse	r24, r1
     708:	fb cf       	rjmp	.-10     	; 0x700 <maze_solve+0x148>
	
		delay_ms(1000);
     70a:	88 ee       	ldi	r24, 0xE8	; 232
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>

		// Re-run the maze.  It's not necessary to identify the
		// intersections, so this loop is really simple.
		int i;
		for(i=0;i<path_length;i++)
     712:	06 ed       	ldi	r16, 0xD6	; 214
     714:	11 e0       	ldi	r17, 0x01	; 1
     716:	80 91 d5 01 	lds	r24, 0x01D5
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	a8 01       	movw	r20, r16
     71e:	46 5d       	subi	r20, 0xD6	; 214
     720:	51 40       	sbci	r21, 0x01	; 1
     722:	48 17       	cp	r20, r24
     724:	59 07       	cpc	r21, r25
     726:	e4 f4       	brge	.+56     	; 0x760 <maze_solve+0x1a8>
		{
			// SECOND MAIN LOOP BODY  
			follow_segment();
     728:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

			// Drive straight while slowing down, as before.
			set_motors(50,50);
     72c:	62 e3       	ldi	r22, 0x32	; 50
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	82 e3       	ldi	r24, 0x32	; 50
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
			delay_ms(50);
     738:	82 e3       	ldi	r24, 0x32	; 50
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
			set_motors(40,40);
     740:	68 e2       	ldi	r22, 0x28	; 40
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
			delay_ms(200);
     74c:	88 ec       	ldi	r24, 0xC8	; 200
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>

			// Make a turn according to the instruction stored in
			// path[i].
			turn(path[i]);
     754:	f8 01       	movw	r30, r16
     756:	81 91       	ld	r24, Z+
     758:	8f 01       	movw	r16, r30
     75a:	0e 94 b3 03 	call	0x766	; 0x766 <turn>
     75e:	db cf       	rjmp	.-74     	; 0x716 <maze_solve+0x15e>
		}
		
		// Follow the last segment up to the finish.
		follow_segment();
     760:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

		// Now we should be at the finish!  Restart the loop.
	}
     764:	9d cf       	rjmp	.-198    	; 0x6a0 <maze_solve+0xe8>

00000766 <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     766:	8c 34       	cpi	r24, 0x4C	; 76
     768:	69 f0       	breq	.+26     	; 0x784 <turn+0x1e>
     76a:	82 35       	cpi	r24, 0x52	; 82
     76c:	81 f0       	breq	.+32     	; 0x78e <turn+0x28>
     76e:	82 34       	cpi	r24, 0x42	; 66
     770:	c1 f4       	brne	.+48     	; 0x7a2 <turn+0x3c>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     772:	60 eb       	ldi	r22, 0xB0	; 176
     774:	7f ef       	ldi	r23, 0xFF	; 255
     776:	80 e5       	ldi	r24, 0x50	; 80
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		delay_ms(400);
     77e:	80 e9       	ldi	r24, 0x90	; 144
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0d c0       	rjmp	.+26     	; 0x79e <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     784:	60 e5       	ldi	r22, 0x50	; 80
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	80 eb       	ldi	r24, 0xB0	; 176
     78a:	9f ef       	ldi	r25, 0xFF	; 255
     78c:	04 c0       	rjmp	.+8      	; 0x796 <turn+0x30>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     78e:	60 eb       	ldi	r22, 0xB0	; 176
     790:	7f ef       	ldi	r23, 0xFF	; 255
     792:	80 e5       	ldi	r24, 0x50	; 80
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 5f 0a 	call	0x14be	; 0x14be <set_motors>
		delay_ms(200);
     79a:	88 ec       	ldi	r24, 0xC8	; 200
     79c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     79e:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <delay_ms>
     7a2:	08 95       	ret

000007a4 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     7a4:	ec e7       	ldi	r30, 0x7C	; 124
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	8f 7d       	andi	r24, 0xDF	; 223
     7ac:	80 83       	st	Z, r24
     7ae:	08 95       	ret

000007b0 <_ZN15OrangutanAnalog7setModeEh>:
     7b0:	81 11       	cpse	r24, r1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <_ZN15OrangutanAnalog7setModeEh+0xa>
     7b4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <_ZN15OrangutanAnalog7setModeEh.part.0>
     7b8:	08 95       	ret
     7ba:	80 91 7c 00 	lds	r24, 0x007C
     7be:	80 62       	ori	r24, 0x20	; 32
     7c0:	80 93 7c 00 	sts	0x007C, r24
     7c4:	08 95       	ret

000007c6 <_ZN15OrangutanAnalog7getModeEv>:
     7c6:	80 91 7c 00 	lds	r24, 0x007C
     7ca:	85 fb       	bst	r24, 5
     7cc:	88 27       	eor	r24, r24
     7ce:	80 f9       	bld	r24, 0
     7d0:	08 95       	ret

000007d2 <_ZN15OrangutanAnalog16conversionResultEv>:
     7d2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN15OrangutanAnalog7getModeEv>
     7d6:	88 23       	and	r24, r24
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     7da:	80 91 79 00 	lds	r24, 0x0079
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	08 95       	ret
     7e2:	80 91 78 00 	lds	r24, 0x0078
     7e6:	90 91 79 00 	lds	r25, 0x0079
     7ea:	08 95       	ret

000007ec <_ZN15OrangutanAnalog15startConversionEhh>:
     7ec:	80 32       	cpi	r24, 0x20	; 32
     7ee:	a0 f4       	brcc	.+40     	; 0x818 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     7f0:	97 e8       	ldi	r25, 0x87	; 135
     7f2:	90 93 7a 00 	sts	0x007A, r25
     7f6:	90 91 7c 00 	lds	r25, 0x007C
     7fa:	66 23       	and	r22, r22
     7fc:	11 f0       	breq	.+4      	; 0x802 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     7fe:	90 6c       	ori	r25, 0xC0	; 192
     800:	02 c0       	rjmp	.+4      	; 0x806 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     802:	9f 77       	andi	r25, 0x7F	; 127
     804:	90 64       	ori	r25, 0x40	; 64
     806:	90 7e       	andi	r25, 0xE0	; 224
     808:	98 2b       	or	r25, r24
     80a:	90 93 7c 00 	sts	0x007C, r25
     80e:	80 91 7a 00 	lds	r24, 0x007A
     812:	80 64       	ori	r24, 0x40	; 64
     814:	80 93 7a 00 	sts	0x007A, r24
     818:	08 95       	ret

0000081a <_ZN15OrangutanAnalog11readAverageEhj>:
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e3 e1       	ldi	r30, 0x13	; 19
     820:	f4 e0       	ldi	r31, 0x04	; 4
     822:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x14>
     826:	eb 01       	movw	r28, r22
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN15OrangutanAnalog15startConversionEhh>
     82e:	80 91 7a 00 	lds	r24, 0x007A
     832:	86 fd       	sbrc	r24, 6
     834:	fc cf       	rjmp	.-8      	; 0x82e <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     836:	8e 01       	movw	r16, r28
     838:	c1 2c       	mov	r12, r1
     83a:	d1 2c       	mov	r13, r1
     83c:	76 01       	movw	r14, r12
     83e:	80 91 7a 00 	lds	r24, 0x007A
     842:	80 64       	ori	r24, 0x40	; 64
     844:	80 93 7a 00 	sts	0x007A, r24
     848:	80 91 7a 00 	lds	r24, 0x007A
     84c:	86 fd       	sbrc	r24, 6
     84e:	fc cf       	rjmp	.-8      	; 0x848 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     850:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN15OrangutanAnalog16conversionResultEv>
     854:	c8 0e       	add	r12, r24
     856:	d9 1e       	adc	r13, r25
     858:	e1 1c       	adc	r14, r1
     85a:	f1 1c       	adc	r15, r1
     85c:	01 50       	subi	r16, 0x01	; 1
     85e:	11 09       	sbc	r17, r1
     860:	01 15       	cp	r16, r1
     862:	11 05       	cpc	r17, r1
     864:	61 f7       	brne	.-40     	; 0x83e <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     866:	ce 01       	movw	r24, r28
     868:	96 95       	lsr	r25
     86a:	87 95       	ror	r24
     86c:	c0 34       	cpi	r28, 0x40	; 64
     86e:	d1 05       	cpc	r29, r1
     870:	38 f4       	brcc	.+14     	; 0x880 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     872:	8c 0d       	add	r24, r12
     874:	9d 1d       	adc	r25, r13
     876:	be 01       	movw	r22, r28
     878:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     87c:	cb 01       	movw	r24, r22
     87e:	0e c0       	rjmp	.+28     	; 0x89c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     880:	a7 01       	movw	r20, r14
     882:	96 01       	movw	r18, r12
     884:	28 0f       	add	r18, r24
     886:	39 1f       	adc	r19, r25
     888:	41 1d       	adc	r20, r1
     88a:	51 1d       	adc	r21, r1
     88c:	ca 01       	movw	r24, r20
     88e:	b9 01       	movw	r22, r18
     890:	9e 01       	movw	r18, r28
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
     89a:	c9 01       	movw	r24, r18
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	e8 e0       	ldi	r30, 0x08	; 8
     8a2:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x14>

000008a6 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	a0 91 00 01 	lds	r26, 0x0100
     8b2:	b0 91 01 01 	lds	r27, 0x0101
     8b6:	9c 01       	movw	r18, r24
     8b8:	0e 94 c6 11 	call	0x238c	; 0x238c <__umulhisi3>
     8bc:	6b 01       	movw	r12, r22
     8be:	7c 01       	movw	r14, r24
     8c0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN15OrangutanAnalog7getModeEv>
     8c4:	88 23       	and	r24, r24
     8c6:	59 f0       	breq	.+22     	; 0x8de <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     8c8:	c7 01       	movw	r24, r14
     8ca:	b6 01       	movw	r22, r12
     8cc:	61 58       	subi	r22, 0x81	; 129
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	8f 4f       	sbci	r24, 0xFF	; 255
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	0a c0       	rjmp	.+20     	; 0x8f2 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     8de:	c7 01       	movw	r24, r14
     8e0:	b6 01       	movw	r22, r12
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	7e 4f       	sbci	r23, 0xFE	; 254
     8e6:	8f 4f       	sbci	r24, 0xFF	; 255
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	2f ef       	ldi	r18, 0xFF	; 255
     8ec:	33 e0       	ldi	r19, 0x03	; 3
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
     8f6:	c9 01       	movw	r24, r18
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     902:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN15OrangutanAnalog11readAverageEhj>
     906:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN15OrangutanAnalog12toMillivoltsEj>
     90a:	08 95       	ret

0000090c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN15OrangutanAnalog7getModeEv>
     916:	18 2f       	mov	r17, r24
     918:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <_ZN15OrangutanAnalog7setModeEh.part.0>
     91c:	6a e0       	ldi	r22, 0x0A	; 10
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	86 e0       	ldi	r24, 0x06	; 6
     922:	0e 94 81 04 	call	0x902	; 0x902 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     926:	ec 01       	movw	r28, r24
     928:	81 2f       	mov	r24, r17
     92a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN15OrangutanAnalog7setModeEh>
     92e:	ce 01       	movw	r24, r28
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	8c 0f       	add	r24, r28
     936:	9d 1f       	adc	r25, r29
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	96 95       	lsr	r25
     93c:	87 95       	ror	r24
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <read_battery_millivolts_3pi>:
     946:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     94a:	08 95       	ret

0000094c <_ZL16currentCharacterv>:
     94c:	90 91 6b 01 	lds	r25, 0x016B
     950:	e0 91 66 01 	lds	r30, 0x0166
     954:	f0 91 67 01 	lds	r31, 0x0167
     958:	99 23       	and	r25, r25
     95a:	11 f0       	breq	.+4      	; 0x960 <_ZL16currentCharacterv+0x14>
     95c:	84 91       	lpm	r24, Z
     95e:	01 c0       	rjmp	.+2      	; 0x962 <_ZL16currentCharacterv+0x16>
     960:	80 81       	ld	r24, Z
     962:	2f eb       	ldi	r18, 0xBF	; 191
     964:	28 0f       	add	r18, r24
     966:	2a 31       	cpi	r18, 0x1A	; 26
     968:	10 f4       	brcc	.+4      	; 0x96e <_ZL16currentCharacterv+0x22>
     96a:	80 5e       	subi	r24, 0xE0	; 224
     96c:	08 95       	ret
     96e:	80 32       	cpi	r24, 0x20	; 32
     970:	49 f4       	brne	.+18     	; 0x984 <_ZL16currentCharacterv+0x38>
     972:	9f 01       	movw	r18, r30
     974:	2f 5f       	subi	r18, 0xFF	; 255
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	30 93 67 01 	sts	0x0167, r19
     97c:	20 93 66 01 	sts	0x0166, r18
     980:	ef 2b       	or	r30, r31
     982:	31 f7       	brne	.-52     	; 0x950 <_ZL16currentCharacterv+0x4>
     984:	08 95       	ret

00000986 <_ZL9getNumberv>:
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	1a e0       	ldi	r17, 0x0A	; 10
     996:	90 ed       	ldi	r25, 0xD0	; 208
     998:	98 0f       	add	r25, r24
     99a:	9a 30       	cpi	r25, 0x0A	; 10
     99c:	b8 f4       	brcc	.+46     	; 0x9cc <_ZL9getNumberv+0x46>
     99e:	9e 01       	movw	r18, r28
     9a0:	12 9f       	mul	r17, r18
     9a2:	e0 01       	movw	r28, r0
     9a4:	13 9f       	mul	r17, r19
     9a6:	d0 0d       	add	r29, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	c8 0f       	add	r28, r24
     9ac:	d1 1d       	adc	r29, r1
     9ae:	87 fd       	sbrc	r24, 7
     9b0:	da 95       	dec	r29
     9b2:	e0 97       	sbiw	r28, 0x30	; 48
     9b4:	80 91 66 01 	lds	r24, 0x0166
     9b8:	90 91 67 01 	lds	r25, 0x0167
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	90 93 67 01 	sts	0x0167, r25
     9c2:	80 93 66 01 	sts	0x0166, r24
     9c6:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     9ca:	e5 cf       	rjmp	.-54     	; 0x996 <_ZL9getNumberv+0x10>
     9cc:	ce 01       	movw	r24, r28
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	08 95       	ret

000009d6 <_ZN15OrangutanBuzzer5init2Ev>:
     9d6:	10 92 6f 00 	sts	0x006F, r1
     9da:	83 e2       	ldi	r24, 0x23	; 35
     9dc:	80 93 80 00 	sts	0x0080, r24
     9e0:	81 e1       	ldi	r24, 0x11	; 17
     9e2:	80 93 81 00 	sts	0x0081, r24
     9e6:	10 92 82 00 	sts	0x0082, r1
     9ea:	80 e1       	ldi	r24, 0x10	; 16
     9ec:	97 e2       	ldi	r25, 0x27	; 39
     9ee:	90 93 89 00 	sts	0x0089, r25
     9f2:	80 93 88 00 	sts	0x0088, r24
     9f6:	10 92 8b 00 	sts	0x008B, r1
     9fa:	10 92 8a 00 	sts	0x008A, r1
     9fe:	22 9a       	sbi	0x04, 2	; 4
     a00:	78 94       	sei
     a02:	08 95       	ret

00000a04 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	5c 01       	movw	r10, r24
     a1c:	8b 01       	movw	r16, r22
     a1e:	d4 2e       	mov	r13, r20
     a20:	80 91 68 01 	lds	r24, 0x0168
     a24:	81 11       	cpse	r24, r1
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 68 01 	sts	0x0168, r24
     a2e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN15OrangutanBuzzer5init2Ev>
     a32:	10 92 0b 01 	sts	0x010B, r1
     a36:	b7 fe       	sbrs	r11, 7
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     a3a:	e8 94       	clt
     a3c:	b7 f8       	bld	r11, 7
     a3e:	2a e0       	ldi	r18, 0x0A	; 10
     a40:	f2 2e       	mov	r15, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     a44:	ff 24       	eor	r15, r15
     a46:	f3 94       	inc	r15
     a48:	e0 90 81 00 	lds	r14, 0x0081
     a4c:	2e 2d       	mov	r18, r14
     a4e:	28 7f       	andi	r18, 0xF8	; 248
     a50:	e2 2e       	mov	r14, r18
     a52:	48 ec       	ldi	r20, 0xC8	; 200
     a54:	f4 9e       	mul	r15, r20
     a56:	c0 01       	movw	r24, r0
     a58:	11 24       	eor	r1, r1
     a5a:	8a 15       	cp	r24, r10
     a5c:	9b 05       	cpc	r25, r11
     a5e:	e0 f4       	brcc	.+56     	; 0xa98 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     a60:	e5 01       	movw	r28, r10
     a62:	51 e1       	ldi	r21, 0x11	; 17
     a64:	a5 16       	cp	r10, r21
     a66:	57 e2       	ldi	r21, 0x27	; 39
     a68:	b5 06       	cpc	r11, r21
     a6a:	10 f0       	brcs	.+4      	; 0xa70 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     a6c:	c0 e1       	ldi	r28, 0x10	; 16
     a6e:	d7 e2       	ldi	r29, 0x27	; 39
     a70:	be 01       	movw	r22, r28
     a72:	76 95       	lsr	r23
     a74:	67 95       	ror	r22
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	60 58       	subi	r22, 0x80	; 128
     a7c:	79 46       	sbci	r23, 0x69	; 105
     a7e:	87 46       	sbci	r24, 0x67	; 103
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	4e 01       	movw	r8, r28
     a84:	a1 2c       	mov	r10, r1
     a86:	b1 2c       	mov	r11, r1
     a88:	a5 01       	movw	r20, r10
     a8a:	94 01       	movw	r18, r8
     a8c:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
     a90:	59 01       	movw	r10, r18
     a92:	8e 2d       	mov	r24, r14
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	24 c0       	rjmp	.+72     	; 0xae0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     a98:	c8 e2       	ldi	r28, 0x28	; 40
     a9a:	fc 9e       	mul	r15, r28
     a9c:	c0 2d       	mov	r28, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	d0 e0       	ldi	r29, 0x00	; 0
     aa2:	ca 15       	cp	r28, r10
     aa4:	db 05       	cpc	r29, r11
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     aa8:	e5 01       	movw	r28, r10
     aaa:	be 01       	movw	r22, r28
     aac:	76 95       	lsr	r23
     aae:	67 95       	ror	r22
     ab0:	9e 01       	movw	r18, r28
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	8a e0       	ldi	r24, 0x0A	; 10
     ab8:	f8 12       	cpse	r15, r24
     aba:	07 c0       	rjmp	.+14     	; 0xaca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	60 5e       	subi	r22, 0xE0	; 224
     ac2:	73 44       	sbci	r23, 0x43	; 67
     ac4:	81 44       	sbci	r24, 0x41	; 65
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	06 c0       	rjmp	.+12     	; 0xad6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	60 53       	subi	r22, 0x30	; 48
     ad0:	7d 4e       	sbci	r23, 0xED	; 237
     ad2:	8c 4e       	sbci	r24, 0xEC	; 236
     ad4:	9f 4f       	sbci	r25, 0xFF	; 255
     ad6:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
     ada:	59 01       	movw	r10, r18
     adc:	8e 2d       	mov	r24, r14
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	88 2e       	mov	r8, r24
     ae2:	2a e0       	ldi	r18, 0x0A	; 10
     ae4:	f2 12       	cpse	r15, r18
     ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     ae8:	ce 01       	movw	r24, r28
     aea:	05 96       	adiw	r24, 0x05	; 5
     aec:	6a e0       	ldi	r22, 0x0A	; 10
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     af4:	eb 01       	movw	r28, r22
     af6:	c8 3e       	cpi	r28, 0xE8	; 232
     af8:	43 e0       	ldi	r20, 0x03	; 3
     afa:	d4 07       	cpc	r29, r20
     afc:	59 f0       	breq	.+22     	; 0xb14 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     afe:	98 01       	movw	r18, r16
     b00:	de 01       	movw	r26, r28
     b02:	0e 94 c6 11 	call	0x238c	; 0x238c <__umulhisi3>
     b06:	28 ee       	ldi	r18, 0xE8	; 232
     b08:	33 e0       	ldi	r19, 0x03	; 3
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	0e 94 a7 11 	call	0x234e	; 0x234e <__divmodsi4>
     b12:	89 01       	movw	r16, r18
     b14:	10 92 6f 00 	sts	0x006F, r1
     b18:	80 92 81 00 	sts	0x0081, r8
     b1c:	b0 92 89 00 	sts	0x0089, r11
     b20:	a0 92 88 00 	sts	0x0088, r10
     b24:	20 91 88 00 	lds	r18, 0x0088
     b28:	30 91 89 00 	lds	r19, 0x0089
     b2c:	4d 2d       	mov	r20, r13
     b2e:	40 31       	cpi	r20, 0x10	; 16
     b30:	08 f0       	brcs	.+2      	; 0xb34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     b32:	4f e0       	ldi	r20, 0x0F	; 15
     b34:	80 e1       	ldi	r24, 0x10	; 16
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	84 1b       	sub	r24, r20
     b3a:	91 09       	sbc	r25, r1
     b3c:	a9 01       	movw	r20, r18
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     b40:	56 95       	lsr	r21
     b42:	47 95       	ror	r20
     b44:	8a 95       	dec	r24
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     b48:	50 93 8b 00 	sts	0x008B, r21
     b4c:	40 93 8a 00 	sts	0x008A, r20
     b50:	10 93 6e 01 	sts	0x016E, r17
     b54:	00 93 6d 01 	sts	0x016D, r16
     b58:	86 b3       	in	r24, 0x16	; 22
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	86 bb       	out	0x16, r24	; 22
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	80 93 6f 00 	sts	0x006F, r24
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	08 95       	ret

00000b7c <_ZN15OrangutanBuzzer8playNoteEhjh>:
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	eb 01       	movw	r28, r22
     b82:	8f 3f       	cpi	r24, 0xFF	; 255
     b84:	11 f0       	breq	.+4      	; 0xb8a <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     b86:	41 11       	cpse	r20, r1
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	be 01       	movw	r22, r28
     b8e:	88 ee       	ldi	r24, 0xE8	; 232
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	43 c0       	rjmp	.+134    	; 0xc1a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     b94:	81 31       	cpi	r24, 0x11	; 17
     b96:	30 f0       	brcs	.+12     	; 0xba4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     b98:	50 ef       	ldi	r21, 0xF0	; 240
     b9a:	58 0f       	add	r21, r24
     b9c:	50 36       	cpi	r21, 0x60	; 96
     b9e:	18 f0       	brcs	.+6      	; 0xba6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     ba0:	5f e5       	ldi	r21, 0x5F	; 95
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	85 2f       	mov	r24, r21
     ba8:	6c e0       	ldi	r22, 0x0C	; 12
     baa:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__udivmodqi4>
     bae:	68 2f       	mov	r22, r24
     bb0:	74 ef       	ldi	r23, 0xF4	; 244
     bb2:	76 03       	mulsu	r23, r22
     bb4:	90 01       	movw	r18, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	25 0f       	add	r18, r21
     bba:	31 1d       	adc	r19, r1
     bbc:	2c 30       	cpi	r18, 0x0C	; 12
     bbe:	31 05       	cpc	r19, r1
     bc0:	40 f4       	brcc	.+16     	; 0xbd2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     bc2:	f9 01       	movw	r30, r18
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e2 5e       	subi	r30, 0xE2	; 226
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	20 81       	ld	r18, Z
     bce:	31 81       	ldd	r19, Z+1	; 0x01
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	87 30       	cpi	r24, 0x07	; 7
     bd8:	81 f0       	breq	.+32     	; 0xbfa <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     bda:	08 2e       	mov	r0, r24
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	28 f0       	brcs	.+10     	; 0xbf4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     bea:	c9 01       	movw	r24, r18
     bec:	05 96       	adiw	r24, 0x05	; 5
     bee:	6a e0       	ldi	r22, 0x0A	; 10
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0c c0       	rjmp	.+24     	; 0xc0c <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     bf4:	c9 01       	movw	r24, r18
     bf6:	90 58       	subi	r25, 0x80	; 128
     bf8:	0c c0       	rjmp	.+24     	; 0xc12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     bfa:	c9 01       	movw	r24, r18
     bfc:	36 e0       	ldi	r19, 0x06	; 6
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	3a 95       	dec	r19
     c04:	e1 f7       	brne	.-8      	; 0xbfe <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     c06:	02 96       	adiw	r24, 0x02	; 2
     c08:	65 e0       	ldi	r22, 0x05	; 5
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     c10:	cb 01       	movw	r24, r22
     c12:	40 31       	cpi	r20, 0x10	; 16
     c14:	08 f0       	brcs	.+2      	; 0xc18 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     c16:	4f e0       	ldi	r20, 0x0F	; 15
     c18:	be 01       	movw	r22, r28
     c1a:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <_ZL8nextNotev>:
     c24:	a2 e0       	ldi	r26, 0x02	; 2
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e8 e1       	ldi	r30, 0x18	; 24
     c2a:	f6 e0       	ldi	r31, 0x06	; 6
     c2c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__prologue_saves__+0x4>
     c30:	90 90 0a 01 	lds	r9, 0x010A
     c34:	80 91 6a 01 	lds	r24, 0x016A
     c38:	88 23       	and	r24, r24
     c3a:	21 f0       	breq	.+8      	; 0xc44 <_ZL8nextNotev+0x20>
     c3c:	60 91 69 01 	lds	r22, 0x0169
     c40:	61 11       	cpse	r22, r1
     c42:	17 c0       	rjmp	.+46     	; 0xc72 <_ZL8nextNotev+0x4e>
     c44:	77 24       	eor	r7, r7
     c46:	73 94       	inc	r7
     c48:	b0 ec       	ldi	r27, 0xC0	; 192
     c4a:	ab 2e       	mov	r10, r27
     c4c:	bd e5       	ldi	r27, 0x5D	; 93
     c4e:	bb 2e       	mov	r11, r27
     c50:	1a e0       	ldi	r17, 0x0A	; 10
     c52:	61 2e       	mov	r6, r17
     c54:	04 e0       	ldi	r16, 0x04	; 4
     c56:	80 2e       	mov	r8, r16
     c58:	80 ed       	ldi	r24, 0xD0	; 208
     c5a:	c8 2e       	mov	r12, r24
     c5c:	87 e0       	ldi	r24, 0x07	; 7
     c5e:	d8 2e       	mov	r13, r24
     c60:	94 e0       	ldi	r25, 0x04	; 4
     c62:	e9 2e       	mov	r14, r25
     c64:	f1 2c       	mov	r15, r1
     c66:	04 ef       	ldi	r16, 0xF4	; 244
     c68:	11 e0       	ldi	r17, 0x01	; 1
     c6a:	2f e0       	ldi	r18, 0x0F	; 15
     c6c:	42 2e       	mov	r4, r18
     c6e:	51 2c       	mov	r5, r1
     c70:	15 c0       	rjmp	.+42     	; 0xc9c <_ZL8nextNotev+0x78>
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	88 ee       	ldi	r24, 0xE8	; 232
     c78:	93 e0       	ldi	r25, 0x03	; 3
     c7a:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     c7e:	10 92 69 01 	sts	0x0169, r1
     c82:	17 c1       	rjmp	.+558    	; 0xeb2 <_ZL8nextNotev+0x28e>
     c84:	86 36       	cpi	r24, 0x66	; 102
     c86:	d4 f5       	brge	.+116    	; 0xcfc <_ZL8nextNotev+0xd8>
     c88:	81 36       	cpi	r24, 0x61	; 97
     c8a:	09 f4       	brne	.+2      	; 0xc8e <_ZL8nextNotev+0x6a>
     c8c:	a9 c0       	rjmp	.+338    	; 0xde0 <_ZL8nextNotev+0x1bc>
     c8e:	7c f5       	brge	.+94     	; 0xcee <_ZL8nextNotev+0xca>
     c90:	8c 33       	cpi	r24, 0x3C	; 60
     c92:	09 f4       	brne	.+2      	; 0xc96 <_ZL8nextNotev+0x72>
     c94:	60 c0       	rjmp	.+192    	; 0xd56 <_ZL8nextNotev+0x132>
     c96:	8e 33       	cpi	r24, 0x3E	; 62
     c98:	81 f4       	brne	.+32     	; 0xcba <_ZL8nextNotev+0x96>
     c9a:	93 94       	inc	r9
     c9c:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     ca0:	20 91 66 01 	lds	r18, 0x0166
     ca4:	30 91 67 01 	lds	r19, 0x0167
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	30 93 67 01 	sts	0x0167, r19
     cb0:	20 93 66 01 	sts	0x0166, r18
     cb4:	85 36       	cpi	r24, 0x65	; 101
     cb6:	31 f7       	brne	.-52     	; 0xc84 <_ZL8nextNotev+0x60>
     cb8:	52 c0       	rjmp	.+164    	; 0xd5e <_ZL8nextNotev+0x13a>
     cba:	81 32       	cpi	r24, 0x21	; 33
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <_ZL8nextNotev+0x9c>
     cbe:	8b c0       	rjmp	.+278    	; 0xdd6 <_ZL8nextNotev+0x1b2>
     cc0:	80 92 0a 01 	sts	0x010A, r8
     cc4:	d0 92 09 01 	sts	0x0109, r13
     cc8:	c0 92 08 01 	sts	0x0108, r12
     ccc:	f0 92 07 01 	sts	0x0107, r15
     cd0:	e0 92 06 01 	sts	0x0106, r14
     cd4:	10 93 05 01 	sts	0x0105, r17
     cd8:	00 93 04 01 	sts	0x0104, r16
     cdc:	50 92 03 01 	sts	0x0103, r5
     ce0:	40 92 02 01 	sts	0x0102, r4
     ce4:	10 92 6a 01 	sts	0x016A, r1
     ce8:	a4 e0       	ldi	r26, 0x04	; 4
     cea:	9a 2e       	mov	r9, r26
     cec:	d7 cf       	rjmp	.-82     	; 0xc9c <_ZL8nextNotev+0x78>
     cee:	83 36       	cpi	r24, 0x63	; 99
     cf0:	a1 f1       	breq	.+104    	; 0xd5a <_ZL8nextNotev+0x136>
     cf2:	0c f4       	brge	.+2      	; 0xcf6 <_ZL8nextNotev+0xd2>
     cf4:	78 c0       	rjmp	.+240    	; 0xde6 <_ZL8nextNotev+0x1c2>
     cf6:	10 e0       	ldi	r17, 0x00	; 0
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	77 c0       	rjmp	.+238    	; 0xdea <_ZL8nextNotev+0x1c6>
     cfc:	8d 36       	cpi	r24, 0x6D	; 109
     cfe:	c1 f1       	breq	.+112    	; 0xd70 <_ZL8nextNotev+0x14c>
     d00:	94 f4       	brge	.+36     	; 0xd26 <_ZL8nextNotev+0x102>
     d02:	87 36       	cpi	r24, 0x67	; 103
     d04:	91 f1       	breq	.+100    	; 0xd6a <_ZL8nextNotev+0x146>
     d06:	74 f1       	brlt	.+92     	; 0xd64 <_ZL8nextNotev+0x140>
     d08:	8c 36       	cpi	r24, 0x6C	; 108
     d0a:	09 f0       	breq	.+2      	; 0xd0e <_ZL8nextNotev+0xea>
     d0c:	64 c0       	rjmp	.+200    	; 0xdd6 <_ZL8nextNotev+0x1b2>
     d0e:	0e 94 c3 04 	call	0x986	; 0x986 <_ZL9getNumberv>
     d12:	bc 01       	movw	r22, r24
     d14:	90 93 07 01 	sts	0x0107, r25
     d18:	80 93 06 01 	sts	0x0106, r24
     d1c:	80 91 08 01 	lds	r24, 0x0108
     d20:	90 91 09 01 	lds	r25, 0x0109
     d24:	51 c0       	rjmp	.+162    	; 0xdc8 <_ZL8nextNotev+0x1a4>
     d26:	82 37       	cpi	r24, 0x72	; 114
     d28:	c9 f1       	breq	.+114    	; 0xd9c <_ZL8nextNotev+0x178>
     d2a:	4c f4       	brge	.+18     	; 0xd3e <_ZL8nextNotev+0x11a>
     d2c:	8f 36       	cpi	r24, 0x6F	; 111
     d2e:	09 f0       	breq	.+2      	; 0xd32 <_ZL8nextNotev+0x10e>
     d30:	52 c0       	rjmp	.+164    	; 0xdd6 <_ZL8nextNotev+0x1b2>
     d32:	0e 94 c3 04 	call	0x986	; 0x986 <_ZL9getNumberv>
     d36:	98 2e       	mov	r9, r24
     d38:	80 93 0a 01 	sts	0x010A, r24
     d3c:	af cf       	rjmp	.-162    	; 0xc9c <_ZL8nextNotev+0x78>
     d3e:	84 37       	cpi	r24, 0x74	; 116
     d40:	81 f1       	breq	.+96     	; 0xda2 <_ZL8nextNotev+0x17e>
     d42:	86 37       	cpi	r24, 0x76	; 118
     d44:	09 f0       	breq	.+2      	; 0xd48 <_ZL8nextNotev+0x124>
     d46:	47 c0       	rjmp	.+142    	; 0xdd6 <_ZL8nextNotev+0x1b2>
     d48:	0e 94 c3 04 	call	0x986	; 0x986 <_ZL9getNumberv>
     d4c:	90 93 03 01 	sts	0x0103, r25
     d50:	80 93 02 01 	sts	0x0102, r24
     d54:	a3 cf       	rjmp	.-186    	; 0xc9c <_ZL8nextNotev+0x78>
     d56:	9a 94       	dec	r9
     d58:	a1 cf       	rjmp	.-190    	; 0xc9c <_ZL8nextNotev+0x78>
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	20 c0       	rjmp	.+64     	; 0xd9e <_ZL8nextNotev+0x17a>
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	84 e0       	ldi	r24, 0x04	; 4
     d62:	43 c0       	rjmp	.+134    	; 0xdea <_ZL8nextNotev+0x1c6>
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	85 e0       	ldi	r24, 0x05	; 5
     d68:	40 c0       	rjmp	.+128    	; 0xdea <_ZL8nextNotev+0x1c6>
     d6a:	10 e0       	ldi	r17, 0x00	; 0
     d6c:	87 e0       	ldi	r24, 0x07	; 7
     d6e:	3d c0       	rjmp	.+122    	; 0xdea <_ZL8nextNotev+0x1c6>
     d70:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     d74:	8c 36       	cpi	r24, 0x6C	; 108
     d76:	19 f4       	brne	.+6      	; 0xd7e <_ZL8nextNotev+0x15a>
     d78:	10 92 6a 01 	sts	0x016A, r1
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <_ZL8nextNotev+0x162>
     d7e:	70 92 6a 01 	sts	0x016A, r7
     d82:	10 92 69 01 	sts	0x0169, r1
     d86:	20 91 66 01 	lds	r18, 0x0166
     d8a:	30 91 67 01 	lds	r19, 0x0167
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	30 93 67 01 	sts	0x0167, r19
     d96:	20 93 66 01 	sts	0x0166, r18
     d9a:	80 cf       	rjmp	.-256    	; 0xc9c <_ZL8nextNotev+0x78>
     d9c:	11 e0       	ldi	r17, 0x01	; 1
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	24 c0       	rjmp	.+72     	; 0xdea <_ZL8nextNotev+0x1c6>
     da2:	0e 94 c3 04 	call	0x986	; 0x986 <_ZL9getNumberv>
     da6:	bc 01       	movw	r22, r24
     da8:	c5 01       	movw	r24, r10
     daa:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     dae:	66 9e       	mul	r6, r22
     db0:	c0 01       	movw	r24, r0
     db2:	67 9e       	mul	r6, r23
     db4:	90 0d       	add	r25, r0
     db6:	11 24       	eor	r1, r1
     db8:	90 93 09 01 	sts	0x0109, r25
     dbc:	80 93 08 01 	sts	0x0108, r24
     dc0:	60 91 06 01 	lds	r22, 0x0106
     dc4:	70 91 07 01 	lds	r23, 0x0107
     dc8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     dcc:	70 93 05 01 	sts	0x0105, r23
     dd0:	60 93 04 01 	sts	0x0104, r22
     dd4:	63 cf       	rjmp	.-314    	; 0xc9c <_ZL8nextNotev+0x78>
     dd6:	10 92 67 01 	sts	0x0167, r1
     dda:	10 92 66 01 	sts	0x0166, r1
     dde:	69 c0       	rjmp	.+210    	; 0xeb2 <_ZL8nextNotev+0x28e>
     de0:	10 e0       	ldi	r17, 0x00	; 0
     de2:	89 e0       	ldi	r24, 0x09	; 9
     de4:	02 c0       	rjmp	.+4      	; 0xdea <_ZL8nextNotev+0x1c6>
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	8b e0       	ldi	r24, 0x0B	; 11
     dea:	08 2f       	mov	r16, r24
     dec:	9c e0       	ldi	r25, 0x0C	; 12
     dee:	99 9e       	mul	r9, r25
     df0:	00 0d       	add	r16, r0
     df2:	11 24       	eor	r1, r1
     df4:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     df8:	98 2f       	mov	r25, r24
     dfa:	97 7f       	andi	r25, 0xF7	; 247
     dfc:	93 32       	cpi	r25, 0x23	; 35
     dfe:	61 f4       	brne	.+24     	; 0xe18 <_ZL8nextNotev+0x1f4>
     e00:	20 91 66 01 	lds	r18, 0x0166
     e04:	30 91 67 01 	lds	r19, 0x0167
     e08:	2f 5f       	subi	r18, 0xFF	; 255
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
     e0c:	30 93 67 01 	sts	0x0167, r19
     e10:	20 93 66 01 	sts	0x0166, r18
     e14:	0f 5f       	subi	r16, 0xFF	; 255
     e16:	ee cf       	rjmp	.-36     	; 0xdf4 <_ZL8nextNotev+0x1d0>
     e18:	8d 32       	cpi	r24, 0x2D	; 45
     e1a:	71 f4       	brne	.+28     	; 0xe38 <_ZL8nextNotev+0x214>
     e1c:	20 91 66 01 	lds	r18, 0x0166
     e20:	30 91 67 01 	lds	r19, 0x0167
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	30 93 67 01 	sts	0x0167, r19
     e2c:	20 93 66 01 	sts	0x0166, r18
     e30:	01 50       	subi	r16, 0x01	; 1
     e32:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     e36:	f0 cf       	rjmp	.-32     	; 0xe18 <_ZL8nextNotev+0x1f4>
     e38:	60 91 04 01 	lds	r22, 0x0104
     e3c:	70 91 05 01 	lds	r23, 0x0105
     e40:	81 53       	subi	r24, 0x31	; 49
     e42:	88 30       	cpi	r24, 0x08	; 8
     e44:	50 f4       	brcc	.+20     	; 0xe5a <_ZL8nextNotev+0x236>
     e46:	e0 90 08 01 	lds	r14, 0x0108
     e4a:	f0 90 09 01 	lds	r15, 0x0109
     e4e:	0e 94 c3 04 	call	0x986	; 0x986 <_ZL9getNumberv>
     e52:	bc 01       	movw	r22, r24
     e54:	c7 01       	movw	r24, r14
     e56:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
     e5a:	7b 01       	movw	r14, r22
     e5c:	f6 94       	lsr	r15
     e5e:	e7 94       	ror	r14
     e60:	69 83       	std	Y+1, r22	; 0x01
     e62:	7a 83       	std	Y+2, r23	; 0x02
     e64:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZL16currentCharacterv>
     e68:	69 81       	ldd	r22, Y+1	; 0x01
     e6a:	7a 81       	ldd	r23, Y+2	; 0x02
     e6c:	8e 32       	cpi	r24, 0x2E	; 46
     e6e:	69 f4       	brne	.+26     	; 0xe8a <_ZL8nextNotev+0x266>
     e70:	20 91 66 01 	lds	r18, 0x0166
     e74:	30 91 67 01 	lds	r19, 0x0167
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	30 93 67 01 	sts	0x0167, r19
     e80:	20 93 66 01 	sts	0x0166, r18
     e84:	6e 0d       	add	r22, r14
     e86:	7f 1d       	adc	r23, r15
     e88:	e9 cf       	rjmp	.-46     	; 0xe5c <_ZL8nextNotev+0x238>
     e8a:	80 91 6a 01 	lds	r24, 0x016A
     e8e:	88 23       	and	r24, r24
     e90:	39 f0       	breq	.+14     	; 0xea0 <_ZL8nextNotev+0x27c>
     e92:	9b 01       	movw	r18, r22
     e94:	36 95       	lsr	r19
     e96:	27 95       	ror	r18
     e98:	20 93 69 01 	sts	0x0169, r18
     e9c:	62 1b       	sub	r22, r18
     e9e:	71 09       	sbc	r23, r1
     ea0:	40 91 02 01 	lds	r20, 0x0102
     ea4:	11 23       	and	r17, r17
     ea6:	11 f0       	breq	.+4      	; 0xeac <_ZL8nextNotev+0x288>
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <_ZL8nextNotev+0x28a>
     eac:	80 2f       	mov	r24, r16
     eae:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN15OrangutanBuzzer8playNoteEhjh>
     eb2:	22 96       	adiw	r28, 0x02	; 2
     eb4:	e0 e1       	ldi	r30, 0x10	; 16
     eb6:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__+0x4>

00000eba <__vector_13>:
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	80 91 6d 01 	lds	r24, 0x016D
     ee0:	90 91 6e 01 	lds	r25, 0x016E
     ee4:	9c 01       	movw	r18, r24
     ee6:	21 50       	subi	r18, 0x01	; 1
     ee8:	31 09       	sbc	r19, r1
     eea:	30 93 6e 01 	sts	0x016E, r19
     eee:	20 93 6d 01 	sts	0x016D, r18
     ef2:	89 2b       	or	r24, r25
     ef4:	11 f5       	brne	.+68     	; 0xf3a <__vector_13+0x80>
     ef6:	10 92 6f 00 	sts	0x006F, r1
     efa:	78 94       	sei
     efc:	80 91 81 00 	lds	r24, 0x0081
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	80 93 81 00 	sts	0x0081, r24
     f08:	80 e1       	ldi	r24, 0x10	; 16
     f0a:	97 e2       	ldi	r25, 0x27	; 39
     f0c:	90 93 89 00 	sts	0x0089, r25
     f10:	80 93 88 00 	sts	0x0088, r24
     f14:	10 92 8b 00 	sts	0x008B, r1
     f18:	10 92 8a 00 	sts	0x008A, r1
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	80 93 0b 01 	sts	0x010B, r24
     f22:	80 91 66 01 	lds	r24, 0x0166
     f26:	90 91 67 01 	lds	r25, 0x0167
     f2a:	89 2b       	or	r24, r25
     f2c:	31 f0       	breq	.+12     	; 0xf3a <__vector_13+0x80>
     f2e:	80 91 6c 01 	lds	r24, 0x016C
     f32:	81 11       	cpse	r24, r1
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <__vector_13+0x80>
     f36:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZL8nextNotev>
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <_ZN15OrangutanBuzzer9isPlayingEv>:
     f5c:	80 91 0b 01 	lds	r24, 0x010B
     f60:	88 23       	and	r24, r24
     f62:	49 f0       	breq	.+18     	; 0xf76 <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	20 91 66 01 	lds	r18, 0x0166
     f6a:	30 91 67 01 	lds	r19, 0x0167
     f6e:	23 2b       	or	r18, r19
     f70:	19 f4       	brne	.+6      	; 0xf78 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret

00000f7a <is_playing>:
     f7a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN15OrangutanBuzzer9isPlayingEv>
     f7e:	08 95       	ret

00000f80 <_ZN15OrangutanBuzzer4playEPKc>:
     f80:	10 92 6f 00 	sts	0x006F, r1
     f84:	90 93 67 01 	sts	0x0167, r25
     f88:	80 93 66 01 	sts	0x0166, r24
     f8c:	10 92 6b 01 	sts	0x016B, r1
     f90:	10 92 69 01 	sts	0x0169, r1
     f94:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZL8nextNotev>
     f98:	08 95       	ret

00000f9a <play>:
     f9a:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN15OrangutanBuzzer4playEPKc>
     f9e:	08 95       	ret

00000fa0 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
     fa0:	10 92 6f 00 	sts	0x006F, r1
     fa4:	90 93 67 01 	sts	0x0167, r25
     fa8:	80 93 66 01 	sts	0x0166, r24
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 6b 01 	sts	0x016B, r24
     fb2:	10 92 69 01 	sts	0x0169, r1
     fb6:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZL8nextNotev>
     fba:	08 95       	ret

00000fbc <play_from_program_space>:
     fbc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
     fc0:	08 95       	ret

00000fc2 <delay_us.constprop.0>:
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	6f 93       	push	r22
     fc8:	64 e0       	ldi	r22, 0x04	; 4
     fca:	6a 95       	dec	r22
     fcc:	f1 f7       	brne	.-4      	; 0xfca <delay_us.constprop.0+0x8>
     fce:	6f 91       	pop	r22
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <delay_us.constprop.0+0x4>
     fd4:	08 95       	ret

00000fd6 <_ZN12OrangutanLCD8busyWaitEv>:
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	1a b1       	in	r17, 0x0a	; 10
     fe0:	57 98       	cbi	0x0a, 7	; 10
     fe2:	5a 98       	cbi	0x0b, 2	; 11
     fe4:	28 9a       	sbi	0x05, 0	; 5
     fe6:	c0 e0       	ldi	r28, 0x00	; 0
     fe8:	d0 e0       	ldi	r29, 0x00	; 0
     fea:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <delay_us.constprop.0>
     fee:	5c 9a       	sbi	0x0b, 4	; 11
     ff0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <delay_us.constprop.0>
     ff4:	09 b1       	in	r16, 0x09	; 9
     ff6:	5c 98       	cbi	0x0b, 4	; 11
     ff8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <delay_us.constprop.0>
     ffc:	5c 9a       	sbi	0x0b, 4	; 11
     ffe:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <delay_us.constprop.0>
    1002:	5c 98       	cbi	0x0b, 4	; 11
    1004:	24 96       	adiw	r28, 0x04	; 4
    1006:	07 ff       	sbrs	r16, 7
    1008:	10 c0       	rjmp	.+32     	; 0x102a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    100a:	ae 01       	movw	r20, r28
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 91 6f 01 	lds	r24, 0x016F
    1014:	90 91 70 01 	lds	r25, 0x0170
    1018:	a0 91 71 01 	lds	r26, 0x0171
    101c:	b0 91 72 01 	lds	r27, 0x0172
    1020:	48 17       	cp	r20, r24
    1022:	59 07       	cpc	r21, r25
    1024:	6a 07       	cpc	r22, r26
    1026:	7b 07       	cpc	r23, r27
    1028:	00 f3       	brcs	.-64     	; 0xfea <_ZN12OrangutanLCD8busyWaitEv+0x14>
    102a:	1a b9       	out	0x0a, r17	; 10
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <_ZN12OrangutanLCD8sendDataEh>:
    1036:	95 b1       	in	r25, 0x05	; 5
    1038:	28 2f       	mov	r18, r24
    103a:	21 70       	andi	r18, 0x01	; 1
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	22 0f       	add	r18, r18
    1040:	33 1f       	adc	r19, r19
    1042:	48 2f       	mov	r20, r24
    1044:	46 70       	andi	r20, 0x06	; 6
    1046:	68 e0       	ldi	r22, 0x08	; 8
    1048:	46 9f       	mul	r20, r22
    104a:	a0 01       	movw	r20, r0
    104c:	11 24       	eor	r1, r1
    104e:	24 2b       	or	r18, r20
    1050:	9d 7c       	andi	r25, 0xCD	; 205
    1052:	29 2b       	or	r18, r25
    1054:	25 b9       	out	0x05, r18	; 5
    1056:	9b b1       	in	r25, 0x0b	; 11
    1058:	88 70       	andi	r24, 0x08	; 8
    105a:	82 95       	swap	r24
    105c:	80 7f       	andi	r24, 0xF0	; 240
    105e:	9f 77       	andi	r25, 0x7F	; 127
    1060:	89 2b       	or	r24, r25
    1062:	8b b9       	out	0x0b, r24	; 11
    1064:	5c 9a       	sbi	0x0b, 4	; 11
    1066:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <delay_us.constprop.0>
    106a:	5c 98       	cbi	0x0b, 4	; 11
    106c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <delay_us.constprop.0>
    1070:	08 95       	ret

00001072 <_ZN12OrangutanLCD4sendEhhh>:
    1072:	a0 e0       	ldi	r26, 0x00	; 0
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ef e3       	ldi	r30, 0x3F	; 63
    1078:	f8 e0       	ldi	r31, 0x08	; 8
    107a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x16>
    107e:	c8 2f       	mov	r28, r24
    1080:	d6 2e       	mov	r13, r22
    1082:	e4 2e       	mov	r14, r20
    1084:	80 91 3a 02 	lds	r24, 0x023A
    1088:	81 11       	cpse	r24, r1
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <_ZN12OrangutanLCD4sendEhhh+0x24>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 3a 02 	sts	0x023A, r24
    1092:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN12OrangutanLCD5init2Ev>
    1096:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_ZN12OrangutanLCD8busyWaitEv>
    109a:	14 b1       	in	r17, 0x04	; 4
    109c:	d5 b1       	in	r29, 0x05	; 5
    109e:	fa b0       	in	r15, 0x0a	; 10
    10a0:	0b b1       	in	r16, 0x0b	; 11
    10a2:	28 98       	cbi	0x05, 0	; 5
    10a4:	dd 20       	and	r13, r13
    10a6:	11 f0       	breq	.+4      	; 0x10ac <_ZN12OrangutanLCD4sendEhhh+0x3a>
    10a8:	5a 9a       	sbi	0x0b, 2	; 11
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <_ZN12OrangutanLCD4sendEhhh+0x3c>
    10ac:	5a 98       	cbi	0x0b, 2	; 11
    10ae:	94 b1       	in	r25, 0x04	; 4
    10b0:	92 63       	ori	r25, 0x32	; 50
    10b2:	94 b9       	out	0x04, r25	; 4
    10b4:	57 9a       	sbi	0x0a, 7	; 10
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	e8 16       	cp	r14, r24
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <_ZN12OrangutanLCD4sendEhhh+0x54>
    10bc:	8c 2f       	mov	r24, r28
    10be:	82 95       	swap	r24
    10c0:	8f 70       	andi	r24, 0x0F	; 15
    10c2:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN12OrangutanLCD8sendDataEh>
    10c6:	8c 2f       	mov	r24, r28
    10c8:	8f 70       	andi	r24, 0x0F	; 15
    10ca:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN12OrangutanLCD8sendDataEh>
    10ce:	fa b8       	out	0x0a, r15	; 10
    10d0:	0b b9       	out	0x0b, r16	; 11
    10d2:	14 b9       	out	0x04, r17	; 4
    10d4:	d5 b9       	out	0x05, r29	; 5
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	e7 e0       	ldi	r30, 0x07	; 7
    10dc:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x16>

000010e0 <_ZN12OrangutanLCD8send_cmdEh>:
    10e0:	42 e0       	ldi	r20, 0x02	; 2
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN12OrangutanLCD4sendEhhh>
    10e8:	08 95       	ret

000010ea <_ZN12OrangutanLCD9send_dataEh>:
    10ea:	42 e0       	ldi	r20, 0x02	; 2
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN12OrangutanLCD4sendEhhh>
    10f2:	08 95       	ret

000010f4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    10f4:	a1 e0       	ldi	r26, 0x01	; 1
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e0 e8       	ldi	r30, 0x80	; 128
    10fa:	f8 e0       	ldi	r31, 0x08	; 8
    10fc:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x18>
    1100:	8c 01       	movw	r16, r24
    1102:	66 0f       	add	r22, r22
    1104:	66 0f       	add	r22, r22
    1106:	66 0f       	add	r22, r22
    1108:	e1 2c       	mov	r14, r1
    110a:	f1 2c       	mov	r15, r1
    110c:	8e 2d       	mov	r24, r14
    110e:	86 0f       	add	r24, r22
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	69 83       	std	Y+1, r22	; 0x01
    1114:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    1118:	f8 01       	movw	r30, r16
    111a:	ee 0d       	add	r30, r14
    111c:	ff 1d       	adc	r31, r15
    111e:	84 91       	lpm	r24, Z
    1120:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD9send_dataEh>
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	e8 1a       	sub	r14, r24
    1128:	f8 0a       	sbc	r15, r24
    112a:	69 81       	ldd	r22, Y+1	; 0x01
    112c:	e8 e0       	ldi	r30, 0x08	; 8
    112e:	ee 16       	cp	r14, r30
    1130:	f1 04       	cpc	r15, r1
    1132:	61 f7       	brne	.-40     	; 0x110c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    1134:	21 96       	adiw	r28, 0x01	; 1
    1136:	e6 e0       	ldi	r30, 0x06	; 6
    1138:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x18>

0000113c <lcd_load_custom_character>:
    113c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    1140:	08 95       	ret

00001142 <print_character>:
    1142:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD9send_dataEh>
    1146:	08 95       	ret

00001148 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN12OrangutanLCD4sendEhhh>
    1150:	08 95       	ret

00001152 <_ZN12OrangutanLCD5init2Ev>:
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	97 e2       	ldi	r25, 0x27	; 39
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	80 93 6f 01 	sts	0x016F, r24
    115e:	90 93 70 01 	sts	0x0170, r25
    1162:	a0 93 71 01 	sts	0x0171, r26
    1166:	b0 93 72 01 	sts	0x0172, r27
    116a:	52 9a       	sbi	0x0a, 2	; 10
    116c:	20 9a       	sbi	0x04, 0	; 4
    116e:	54 9a       	sbi	0x0a, 4	; 10
    1170:	8e e1       	ldi	r24, 0x1E	; 30
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
    11b0:	88 e2       	ldi	r24, 0x28	; 40
    11b2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    11b6:	88 e0       	ldi	r24, 0x08	; 8
    11b8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    11c2:	86 e0       	ldi	r24, 0x06	; 6
    11c4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    11c8:	8c e0       	ldi	r24, 0x0C	; 12
    11ca:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    11ce:	08 95       	ret

000011d0 <_ZN12OrangutanLCD5clearEv>:
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    11d6:	80 91 75 01 	lds	r24, 0x0175
    11da:	90 91 76 01 	lds	r25, 0x0176
    11de:	89 2b       	or	r24, r25
    11e0:	f9 f0       	breq	.+62     	; 0x1220 <_ZN12OrangutanLCD5clearEv+0x50>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	a0 e2       	ldi	r26, 0x20	; 32
    11e6:	26 2f       	mov	r18, r22
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	70 91 0c 01 	lds	r23, 0x010C
    11ee:	80 91 0d 01 	lds	r24, 0x010D
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	78 9f       	mul	r23, r24
    11f8:	a0 01       	movw	r20, r0
    11fa:	79 9f       	mul	r23, r25
    11fc:	50 0d       	add	r21, r0
    11fe:	11 24       	eor	r1, r1
    1200:	24 17       	cp	r18, r20
    1202:	35 07       	cpc	r19, r21
    1204:	4c f4       	brge	.+18     	; 0x1218 <_ZN12OrangutanLCD5clearEv+0x48>
    1206:	e0 91 75 01 	lds	r30, 0x0175
    120a:	f0 91 76 01 	lds	r31, 0x0176
    120e:	e2 0f       	add	r30, r18
    1210:	f3 1f       	adc	r31, r19
    1212:	a0 83       	st	Z, r26
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	e7 cf       	rjmp	.-50     	; 0x11e6 <_ZN12OrangutanLCD5clearEv+0x16>
    1218:	10 92 73 01 	sts	0x0173, r1
    121c:	10 92 74 01 	sts	0x0174, r1
    1220:	08 95       	ret

00001222 <clear>:
    1222:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN12OrangutanLCD5clearEv>
    1226:	08 95       	ret

00001228 <_ZN12OrangutanLCD5printEPKc>:
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
    122e:	89 91       	ld	r24, Y+
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <_ZN12OrangutanLCD5printEPKc+0x12>
    1234:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD9send_dataEh>
    1238:	fa cf       	rjmp	.-12     	; 0x122e <_ZN12OrangutanLCD5printEPKc+0x6>
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <print>:
    1240:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN12OrangutanLCD5printEPKc>
    1244:	08 95       	ret

00001246 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	ec 01       	movw	r28, r24
    124c:	fe 01       	movw	r30, r28
    124e:	84 91       	lpm	r24, Z
    1250:	88 23       	and	r24, r24
    1252:	21 f0       	breq	.+8      	; 0x125c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    1254:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD9send_dataEh>
    1258:	21 96       	adiw	r28, 0x01	; 1
    125a:	f8 cf       	rjmp	.-16     	; 0x124c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <print_from_program_space>:
    1262:	0e 94 23 09 	call	0x1246	; 0x1246 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1266:	08 95       	ret

00001268 <_ZN12OrangutanLCD5printEm>:
    1268:	aa e0       	ldi	r26, 0x0A	; 10
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x14>
    1274:	1a e0       	ldi	r17, 0x0A	; 10
    1276:	5a e0       	ldi	r21, 0x0A	; 10
    1278:	c5 2e       	mov	r12, r21
    127a:	d1 2c       	mov	r13, r1
    127c:	e1 2c       	mov	r14, r1
    127e:	f1 2c       	mov	r15, r1
    1280:	06 2f       	mov	r16, r22
    1282:	a7 01       	movw	r20, r14
    1284:	96 01       	movw	r18, r12
    1286:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
    128a:	ca 01       	movw	r24, r20
    128c:	b9 01       	movw	r22, r18
    128e:	11 50       	subi	r17, 0x01	; 1
    1290:	e1 e0       	ldi	r30, 0x01	; 1
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	ec 0f       	add	r30, r28
    1296:	fd 1f       	adc	r31, r29
    1298:	e1 0f       	add	r30, r17
    129a:	f1 1d       	adc	r31, r1
    129c:	00 5d       	subi	r16, 0xD0	; 208
    129e:	2a e0       	ldi	r18, 0x0A	; 10
    12a0:	62 9f       	mul	r22, r18
    12a2:	00 19       	sub	r16, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	00 83       	st	Z, r16
    12a8:	61 15       	cp	r22, r1
    12aa:	71 05       	cpc	r23, r1
    12ac:	81 05       	cpc	r24, r1
    12ae:	91 05       	cpc	r25, r1
    12b0:	39 f7       	brne	.-50     	; 0x1280 <_ZN12OrangutanLCD5printEm+0x18>
    12b2:	1a 30       	cpi	r17, 0x0A	; 10
    12b4:	58 f4       	brcc	.+22     	; 0x12cc <_ZN12OrangutanLCD5printEm+0x64>
    12b6:	e1 e0       	ldi	r30, 0x01	; 1
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	ec 0f       	add	r30, r28
    12bc:	fd 1f       	adc	r31, r29
    12be:	e1 0f       	add	r30, r17
    12c0:	f1 1d       	adc	r31, r1
    12c2:	80 81       	ld	r24, Z
    12c4:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD9send_dataEh>
    12c8:	1f 5f       	subi	r17, 0xFF	; 255
    12ca:	f3 cf       	rjmp	.-26     	; 0x12b2 <_ZN12OrangutanLCD5printEm+0x4a>
    12cc:	2a 96       	adiw	r28, 0x0a	; 10
    12ce:	e8 e0       	ldi	r30, 0x08	; 8
    12d0:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x14>

000012d4 <_ZN12OrangutanLCD5printEl>:
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	6b 01       	movw	r12, r22
    12de:	7c 01       	movw	r14, r24
    12e0:	97 ff       	sbrs	r25, 7
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <_ZN12OrangutanLCD5printEl+0x26>
    12e4:	f0 94       	com	r15
    12e6:	e0 94       	com	r14
    12e8:	d0 94       	com	r13
    12ea:	c0 94       	com	r12
    12ec:	c1 1c       	adc	r12, r1
    12ee:	d1 1c       	adc	r13, r1
    12f0:	e1 1c       	adc	r14, r1
    12f2:	f1 1c       	adc	r15, r1
    12f4:	8d e2       	ldi	r24, 0x2D	; 45
    12f6:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD9send_dataEh>
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN12OrangutanLCD5printEm>
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <print_long>:
    130c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN12OrangutanLCD5printEl>
    1310:	08 95       	ret

00001312 <_ZN12OrangutanLCD6gotoXYEhh>:
    1312:	a5 e0       	ldi	r26, 0x05	; 5
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e8       	ldi	r30, 0x8F	; 143
    1318:	f9 e0       	ldi	r31, 0x09	; 9
    131a:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x1e>
    131e:	18 2f       	mov	r17, r24
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	80 ec       	ldi	r24, 0xC0	; 192
    1326:	8a 83       	std	Y+2, r24	; 0x02
    1328:	84 e9       	ldi	r24, 0x94	; 148
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	84 ed       	ldi	r24, 0xD4	; 212
    132e:	8c 83       	std	Y+4, r24	; 0x04
    1330:	fe 01       	movw	r30, r28
    1332:	e6 0f       	add	r30, r22
    1334:	f1 1d       	adc	r31, r1
    1336:	81 81       	ldd	r24, Z+1	; 0x01
    1338:	81 0f       	add	r24, r17
    133a:	6d 83       	std	Y+5, r22	; 0x05
    133c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12OrangutanLCD8send_cmdEh>
    1340:	10 93 73 01 	sts	0x0173, r17
    1344:	6d 81       	ldd	r22, Y+5	; 0x05
    1346:	60 93 74 01 	sts	0x0174, r22
    134a:	25 96       	adiw	r28, 0x05	; 5
    134c:	e3 e0       	ldi	r30, 0x03	; 3
    134e:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x1e>

00001352 <lcd_goto_xy>:
    1352:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN12OrangutanLCD6gotoXYEhh>
    1356:	08 95       	ret

00001358 <_ZN16OrangutanDigital9setOutputEhh>:
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	58 f4       	brcc	.+22     	; 0x1372 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1360:	99 0f       	add	r25, r25
    1362:	8a 95       	dec	r24
    1364:	ea f7       	brpl	.-6      	; 0x1360 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1366:	89 2f       	mov	r24, r25
    1368:	aa e2       	ldi	r26, 0x2A	; 42
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	eb e2       	ldi	r30, 0x2B	; 43
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	21 c0       	rjmp	.+66     	; 0x13b4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1372:	8e 30       	cpi	r24, 0x0E	; 14
    1374:	60 f4       	brcc	.+24     	; 0x138e <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1376:	98 ef       	ldi	r25, 0xF8	; 248
    1378:	98 0f       	add	r25, r24
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    137e:	88 0f       	add	r24, r24
    1380:	9a 95       	dec	r25
    1382:	ea f7       	brpl	.-6      	; 0x137e <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1384:	a4 e2       	ldi	r26, 0x24	; 36
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e2       	ldi	r30, 0x25	; 37
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	13 c0       	rjmp	.+38     	; 0x13b4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    138e:	85 31       	cpi	r24, 0x15	; 21
    1390:	60 f4       	brcc	.+24     	; 0x13aa <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1392:	92 ef       	ldi	r25, 0xF2	; 242
    1394:	98 0f       	add	r25, r24
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	01 c0       	rjmp	.+2      	; 0x139c <_ZN16OrangutanDigital9setOutputEhh+0x44>
    139a:	88 0f       	add	r24, r24
    139c:	9a 95       	dec	r25
    139e:	ea f7       	brpl	.-6      	; 0x139a <_ZN16OrangutanDigital9setOutputEhh+0x42>
    13a0:	a7 e2       	ldi	r26, 0x27	; 39
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e8 e2       	ldi	r30, 0x28	; 40
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	6f 3f       	cpi	r22, 0xFF	; 255
    13b6:	19 f4       	brne	.+6      	; 0x13be <_ZN16OrangutanDigital9setOutputEhh+0x66>
    13b8:	90 81       	ld	r25, Z
    13ba:	98 27       	eor	r25, r24
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    13be:	66 23       	and	r22, r22
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    13c2:	90 81       	ld	r25, Z
    13c4:	98 2b       	or	r25, r24
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    13c8:	20 81       	ld	r18, Z
    13ca:	98 2f       	mov	r25, r24
    13cc:	90 95       	com	r25
    13ce:	92 23       	and	r25, r18
    13d0:	90 83       	st	Z, r25
    13d2:	9c 91       	ld	r25, X
    13d4:	98 2b       	or	r25, r24
    13d6:	9c 93       	st	X, r25
    13d8:	08 95       	ret

000013da <_ZN15OrangutanMotors5init2Ev>:
    13da:	83 ef       	ldi	r24, 0xF3	; 243
    13dc:	80 93 b0 00 	sts	0x00B0, r24
    13e0:	84 bd       	out	0x24, r24	; 36
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 93 b1 00 	sts	0x00B1, r24
    13e8:	85 bd       	out	0x25, r24	; 37
    13ea:	10 92 b4 00 	sts	0x00B4, r1
    13ee:	10 92 b3 00 	sts	0x00B3, r1
    13f2:	18 bc       	out	0x28, r1	; 40
    13f4:	17 bc       	out	0x27, r1	; 39
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	86 e0       	ldi	r24, 0x06	; 6
    13fa:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN16OrangutanDigital9setOutputEhh>
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	85 e0       	ldi	r24, 0x05	; 5
    1402:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN16OrangutanDigital9setOutputEhh>
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	8b e0       	ldi	r24, 0x0B	; 11
    140a:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN16OrangutanDigital9setOutputEhh>
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN16OrangutanDigital9setOutputEhh>
    1416:	08 95       	ret

00001418 <_ZN15OrangutanMotors4initEv>:
    1418:	80 91 3b 02 	lds	r24, 0x023B
    141c:	81 11       	cpse	r24, r1
    141e:	05 c0       	rjmp	.+10     	; 0x142a <_ZN15OrangutanMotors4initEv+0x12>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 93 3b 02 	sts	0x023B, r24
    1426:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN15OrangutanMotors5init2Ev>
    142a:	08 95       	ret

0000142c <_ZN15OrangutanMotors10setM1SpeedEi>:
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
    1432:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_ZN15OrangutanMotors4initEv>
    1436:	d7 ff       	sbrs	r29, 7
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    143a:	d1 95       	neg	r29
    143c:	c1 95       	neg	r28
    143e:	d1 09       	sbc	r29, r1
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	cf 3f       	cpi	r28, 0xFF	; 255
    1448:	d1 05       	cpc	r29, r1
    144a:	19 f0       	breq	.+6      	; 0x1452 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    144c:	14 f0       	brlt	.+4      	; 0x1452 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    144e:	cf ef       	ldi	r28, 0xFF	; 255
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1456:	18 bc       	out	0x28, r1	; 40
    1458:	c7 bd       	out	0x27, r28	; 39
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    145c:	c8 bd       	out	0x28, r28	; 40
    145e:	17 bc       	out	0x27, r1	; 39
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	ec 01       	movw	r28, r24
    146c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_ZN15OrangutanMotors4initEv>
    1470:	d7 ff       	sbrs	r29, 7
    1472:	05 c0       	rjmp	.+10     	; 0x147e <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1474:	d1 95       	neg	r29
    1476:	c1 95       	neg	r28
    1478:	d1 09       	sbc	r29, r1
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	cf 3f       	cpi	r28, 0xFF	; 255
    1482:	d1 05       	cpc	r29, r1
    1484:	19 f0       	breq	.+6      	; 0x148c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1486:	14 f0       	brlt	.+4      	; 0x148c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1488:	cf ef       	ldi	r28, 0xFF	; 255
    148a:	d0 e0       	ldi	r29, 0x00	; 0
    148c:	88 23       	and	r24, r24
    148e:	29 f0       	breq	.+10     	; 0x149a <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1490:	10 92 b4 00 	sts	0x00B4, r1
    1494:	c0 93 b3 00 	sts	0x00B3, r28
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    149a:	c0 93 b4 00 	sts	0x00B4, r28
    149e:	10 92 b3 00 	sts	0x00B3, r1
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <_ZN15OrangutanMotors9setSpeedsEii>:
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	eb 01       	movw	r28, r22
    14ae:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN15OrangutanMotors10setM1SpeedEi>
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN15OrangutanMotors10setM2SpeedEi>
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <set_motors>:
    14be:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_ZN15OrangutanMotors9setSpeedsEii>
    14c2:	08 95       	ret

000014c4 <_ZN20OrangutanPushbuttons5init2Ev>:
    14c4:	84 b1       	in	r24, 0x04	; 4
    14c6:	8d 7c       	andi	r24, 0xCD	; 205
    14c8:	84 b9       	out	0x04, r24	; 4
    14ca:	85 b1       	in	r24, 0x05	; 5
    14cc:	82 63       	ori	r24, 0x32	; 50
    14ce:	85 b9       	out	0x05, r24	; 5
    14d0:	85 e0       	ldi	r24, 0x05	; 5
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	6f 93       	push	r22
    14d6:	64 e0       	ldi	r22, 0x04	; 4
    14d8:	6a 95       	dec	r22
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    14dc:	6f 91       	pop	r22
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    14e2:	08 95       	ret

000014e4 <_ZN20OrangutanPushbuttons4initEv>:
    14e4:	80 91 3c 02 	lds	r24, 0x023C
    14e8:	81 11       	cpse	r24, r1
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <_ZN20OrangutanPushbuttons4initEv+0x12>
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 3c 02 	sts	0x023C, r24
    14f2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN20OrangutanPushbuttons5init2Ev>
    14f6:	08 95       	ret

000014f8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    14f8:	cf 93       	push	r28
    14fa:	c8 2f       	mov	r28, r24
    14fc:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN20OrangutanPushbuttons4initEv>
    1500:	83 b1       	in	r24, 0x03	; 3
    1502:	8c 23       	and	r24, r28
    1504:	e9 f3       	breq	.-6      	; 0x1500 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1506:	8a e0       	ldi	r24, 0x0A	; 10
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <delay_ms>
    150e:	83 b1       	in	r24, 0x03	; 3
    1510:	8c 23       	and	r24, r28
    1512:	b1 f3       	breq	.-20     	; 0x1500 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1514:	83 b1       	in	r24, 0x03	; 3
    1516:	8c 23       	and	r24, r28
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <wait_for_button_release>:
    151c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1520:	08 95       	ret

00001522 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1522:	a1 e0       	ldi	r26, 0x01	; 1
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e9       	ldi	r30, 0x97	; 151
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x20>
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN20OrangutanPushbuttons4initEv>
    1534:	93 b1       	in	r25, 0x03	; 3
    1536:	90 95       	com	r25
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	89 23       	and	r24, r25
    153c:	21 96       	adiw	r28, 0x01	; 1
    153e:	e2 e0       	ldi	r30, 0x02	; 2
    1540:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x20>

00001544 <button_is_pressed>:
    1544:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN20OrangutanPushbuttons9isPressedEh>
    1548:	08 95       	ret

0000154a <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>:
    154a:	a4 e0       	ldi	r26, 0x04	; 4
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb ea       	ldi	r30, 0xAB	; 171
    1550:	fa e0       	ldi	r31, 0x0A	; 10
    1552:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x1a>
    1556:	18 2f       	mov	r17, r24
    1558:	f3 b0       	in	r15, 0x03	; 3
    155a:	f0 94       	com	r15
    155c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <get_ms>
    1560:	69 83       	std	Y+1, r22	; 0x01
    1562:	7a 83       	std	Y+2, r23	; 0x02
    1564:	8b 83       	std	Y+3, r24	; 0x03
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN20OrangutanPushbuttons4initEv>
    156c:	20 91 82 01 	lds	r18, 0x0182
    1570:	69 81       	ldd	r22, Y+1	; 0x01
    1572:	7a 81       	ldd	r23, Y+2	; 0x02
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	21 30       	cpi	r18, 0x01	; 1
    157a:	09 f1       	breq	.+66     	; 0x15be <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x74>
    157c:	38 f0       	brcs	.+14     	; 0x158c <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x42>
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	09 f4       	brne	.+2      	; 0x1584 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x3a>
    1582:	53 c0       	rjmp	.+166    	; 0x162a <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xe0>
    1584:	23 30       	cpi	r18, 0x03	; 3
    1586:	09 f4       	brne	.+2      	; 0x158a <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x40>
    1588:	63 c0       	rjmp	.+198    	; 0x1650 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x106>
    158a:	7e c0       	rjmp	.+252    	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    158c:	21 2f       	mov	r18, r17
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4f 2d       	mov	r20, r15
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	40 95       	com	r20
    1596:	50 95       	com	r21
    1598:	24 23       	and	r18, r20
    159a:	35 23       	and	r19, r21
    159c:	23 2b       	or	r18, r19
    159e:	09 f4       	brne	.+2      	; 0x15a2 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x58>
    15a0:	73 c0       	rjmp	.+230    	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    15a2:	f0 94       	com	r15
    15a4:	f1 22       	and	r15, r17
    15a6:	f0 92 81 01 	sts	0x0181, r15
    15aa:	60 93 7d 01 	sts	0x017D, r22
    15ae:	70 93 7e 01 	sts	0x017E, r23
    15b2:	80 93 7f 01 	sts	0x017F, r24
    15b6:	90 93 80 01 	sts	0x0180, r25
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	63 c0       	rjmp	.+198    	; 0x1684 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13a>
    15be:	00 91 7d 01 	lds	r16, 0x017D
    15c2:	10 91 7e 01 	lds	r17, 0x017E
    15c6:	20 91 7f 01 	lds	r18, 0x017F
    15ca:	30 91 80 01 	lds	r19, 0x0180
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	80 1b       	sub	r24, r16
    15d4:	91 0b       	sbc	r25, r17
    15d6:	a2 0b       	sbc	r26, r18
    15d8:	b3 0b       	sbc	r27, r19
    15da:	0f 97       	sbiw	r24, 0x0f	; 15
    15dc:	a1 05       	cpc	r26, r1
    15de:	b1 05       	cpc	r27, r1
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x9a>
    15e2:	52 c0       	rjmp	.+164    	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    15e4:	40 91 81 01 	lds	r20, 0x0181
    15e8:	8f 2d       	mov	r24, r15
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	80 95       	com	r24
    15ee:	90 95       	com	r25
    15f0:	24 2f       	mov	r18, r20
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	82 23       	and	r24, r18
    15f6:	93 23       	and	r25, r19
    15f8:	89 2b       	or	r24, r25
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xda>
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	80 93 82 01 	sts	0x0182, r24
    1602:	f0 94       	com	r15
    1604:	f4 22       	and	r15, r20
    1606:	f0 92 81 01 	sts	0x0181, r15
    160a:	3e c0       	rjmp	.+124    	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 2f       	mov	r24, r17
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	4f 2d       	mov	r20, r15
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	40 95       	com	r20
    1618:	50 95       	com	r21
    161a:	84 23       	and	r24, r20
    161c:	95 23       	and	r25, r21
    161e:	28 17       	cp	r18, r24
    1620:	39 07       	cpc	r19, r25
    1622:	91 f1       	breq	.+100    	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    1624:	10 92 82 01 	sts	0x0182, r1
    1628:	2f c0       	rjmp	.+94     	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    162a:	20 91 81 01 	lds	r18, 0x0181
    162e:	3f 2d       	mov	r19, r15
    1630:	32 23       	and	r19, r18
    1632:	61 f3       	breq	.-40     	; 0x160c <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xc2>
    1634:	23 e0       	ldi	r18, 0x03	; 3
    1636:	20 93 82 01 	sts	0x0182, r18
    163a:	30 93 81 01 	sts	0x0181, r19
    163e:	60 93 7d 01 	sts	0x017D, r22
    1642:	70 93 7e 01 	sts	0x017E, r23
    1646:	80 93 7f 01 	sts	0x017F, r24
    164a:	90 93 80 01 	sts	0x0180, r25
    164e:	1c c0       	rjmp	.+56     	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    1650:	00 91 7d 01 	lds	r16, 0x017D
    1654:	10 91 7e 01 	lds	r17, 0x017E
    1658:	20 91 7f 01 	lds	r18, 0x017F
    165c:	30 91 80 01 	lds	r19, 0x0180
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	80 1b       	sub	r24, r16
    1666:	91 0b       	sbc	r25, r17
    1668:	a2 0b       	sbc	r26, r18
    166a:	b3 0b       	sbc	r27, r19
    166c:	0f 97       	sbiw	r24, 0x0f	; 15
    166e:	a1 05       	cpc	r26, r1
    1670:	b1 05       	cpc	r27, r1
    1672:	50 f0       	brcs	.+20     	; 0x1688 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
    1674:	80 91 81 01 	lds	r24, 0x0181
    1678:	8f 21       	and	r24, r15
    167a:	19 f0       	breq	.+6      	; 0x1682 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x138>
    167c:	10 92 82 01 	sts	0x0182, r1
    1680:	04 c0       	rjmp	.+8      	; 0x168a <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x140>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	80 93 82 01 	sts	0x0182, r24
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	24 96       	adiw	r28, 0x04	; 4
    168c:	e5 e0       	ldi	r30, 0x05	; 5
    168e:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x1a>

00001692 <get_single_debounced_button_press>:
    1692:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>
    1696:	08 95       	ret

00001698 <_ZN18OrangutanResources10getFreeRAMEv>:
    1698:	a2 e0       	ldi	r26, 0x02	; 2
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e2 e5       	ldi	r30, 0x52	; 82
    169e:	fb e0       	ldi	r31, 0x0B	; 11
    16a0:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x20>
    16a4:	80 91 3e 02 	lds	r24, 0x023E
    16a8:	90 91 3f 02 	lds	r25, 0x023F
    16ac:	9e 01       	movw	r18, r28
    16ae:	2f 5f       	subi	r18, 0xFF	; 255
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	19 f4       	brne	.+6      	; 0x16bc <_ZN18OrangutanResources10getFreeRAMEv+0x24>
    16b6:	22 54       	subi	r18, 0x42	; 66
    16b8:	32 40       	sbci	r19, 0x02	; 2
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <_ZN18OrangutanResources10getFreeRAMEv+0x28>
    16bc:	28 1b       	sub	r18, r24
    16be:	39 0b       	sbc	r19, r25
    16c0:	3a 83       	std	Y+2, r19	; 0x02
    16c2:	29 83       	std	Y+1, r18	; 0x01
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	22 96       	adiw	r28, 0x02	; 2
    16ca:	e2 e0       	ldi	r30, 0x02	; 2
    16cc:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x20>

000016d0 <get_free_ram>:
    16d0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN18OrangutanResources10getFreeRAMEv>
    16d4:	08 95       	ret

000016d6 <__vector_9>:
    16d6:	2f 92       	push	r2
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	2f b6       	in	r2, 0x3f	; 63
    16de:	80 91 8a 01 	lds	r24, 0x018A
    16e2:	90 91 8b 01 	lds	r25, 0x018B
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	80 93 8a 01 	sts	0x018A, r24
    16ec:	90 93 8b 01 	sts	0x018B, r25
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	80 91 8c 01 	lds	r24, 0x018C
    16f6:	89 1f       	adc	r24, r25
    16f8:	80 93 8c 01 	sts	0x018C, r24
    16fc:	90 91 84 01 	lds	r25, 0x0184
    1700:	9c 5f       	subi	r25, 0xFC	; 252
    1702:	90 93 84 01 	sts	0x0184, r25
    1706:	80 91 83 01 	lds	r24, 0x0183
    170a:	80 51       	subi	r24, 0x10	; 16
    170c:	97 42       	sbci	r25, 0x27	; 39
    170e:	c0 f0       	brcs	.+48     	; 0x1740 <end>
    1710:	90 93 84 01 	sts	0x0184, r25
    1714:	80 93 83 01 	sts	0x0183, r24
    1718:	80 91 85 01 	lds	r24, 0x0185
    171c:	90 91 86 01 	lds	r25, 0x0186
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	80 93 85 01 	sts	0x0185, r24
    1726:	90 93 86 01 	sts	0x0186, r25
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	80 91 87 01 	lds	r24, 0x0187
    1730:	89 1f       	adc	r24, r25
    1732:	80 93 87 01 	sts	0x0187, r24
    1736:	80 91 88 01 	lds	r24, 0x0188
    173a:	89 1f       	adc	r24, r25
    173c:	80 93 88 01 	sts	0x0188, r24

00001740 <end>:
    1740:	2f be       	out	0x3f, r2	; 63
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	2f 90       	pop	r2
    1748:	18 95       	reti

0000174a <_ZN13OrangutanTime17delayMillisecondsEj>:
    174a:	28 ee       	ldi	r18, 0xE8	; 232
    174c:	33 e0       	ldi	r19, 0x03	; 3
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	48 f0       	brcs	.+18     	; 0x1764 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1752:	f9 01       	movw	r30, r18
    1754:	6f 93       	push	r22
    1756:	64 e0       	ldi	r22, 0x04	; 4
    1758:	6a 95       	dec	r22
    175a:	f1 f7       	brne	.-4      	; 0x1758 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    175c:	6f 91       	pop	r22
    175e:	31 97       	sbiw	r30, 0x01	; 1
    1760:	c9 f7       	brne	.-14     	; 0x1754 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1762:	f5 cf       	rjmp	.-22     	; 0x174e <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1764:	08 95       	ret

00001766 <delay_ms>:
    1766:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN13OrangutanTime17delayMillisecondsEj>
    176a:	08 95       	ret

0000176c <_ZN13OrangutanTime5init2Ev>:
    176c:	e0 e7       	ldi	r30, 0x70	; 112
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8e 7f       	andi	r24, 0xFE	; 254
    1774:	80 83       	st	Z, r24
    1776:	a0 eb       	ldi	r26, 0xB0	; 176
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	8c 91       	ld	r24, X
    177c:	83 60       	ori	r24, 0x03	; 3
    177e:	8c 93       	st	X, r24
    1780:	a1 eb       	ldi	r26, 0xB1	; 177
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	8c 91       	ld	r24, X
    1786:	80 7f       	andi	r24, 0xF0	; 240
    1788:	8c 93       	st	X, r24
    178a:	8c 91       	ld	r24, X
    178c:	82 60       	ori	r24, 0x02	; 2
    178e:	8c 93       	st	X, r24
    1790:	b8 9a       	sbi	0x17, 0	; 23
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	80 83       	st	Z, r24
    1798:	78 94       	sei
    179a:	08 95       	ret

0000179c <_ZN13OrangutanTime4initEv>:
    179c:	80 91 3d 02 	lds	r24, 0x023D
    17a0:	81 11       	cpse	r24, r1
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <_ZN13OrangutanTime4initEv+0x12>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 93 3d 02 	sts	0x023D, r24
    17aa:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN13OrangutanTime5init2Ev>
    17ae:	08 95       	ret

000017b0 <_ZN13OrangutanTime2msEv>:
    17b0:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN13OrangutanTime4initEv>
    17b4:	e0 e7       	ldi	r30, 0x70	; 112
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8e 7f       	andi	r24, 0xFE	; 254
    17bc:	80 83       	st	Z, r24
    17be:	60 91 85 01 	lds	r22, 0x0185
    17c2:	70 91 86 01 	lds	r23, 0x0186
    17c6:	80 91 87 01 	lds	r24, 0x0187
    17ca:	90 91 88 01 	lds	r25, 0x0188
    17ce:	20 81       	ld	r18, Z
    17d0:	21 60       	ori	r18, 0x01	; 1
    17d2:	20 83       	st	Z, r18
    17d4:	08 95       	ret

000017d6 <get_ms>:
    17d6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13OrangutanTime2msEv>
    17da:	08 95       	ret

000017dc <_ZN13OrangutanTime5resetEv>:
    17dc:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN13OrangutanTime4initEv>
    17e0:	e0 e7       	ldi	r30, 0x70	; 112
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8e 7f       	andi	r24, 0xFE	; 254
    17e8:	80 83       	st	Z, r24
    17ea:	10 92 85 01 	sts	0x0185, r1
    17ee:	10 92 86 01 	sts	0x0186, r1
    17f2:	10 92 87 01 	sts	0x0187, r1
    17f6:	10 92 88 01 	sts	0x0188, r1
    17fa:	10 92 84 01 	sts	0x0184, r1
    17fe:	10 92 83 01 	sts	0x0183, r1
    1802:	80 81       	ld	r24, Z
    1804:	81 60       	ori	r24, 0x01	; 1
    1806:	80 83       	st	Z, r24
    1808:	08 95       	ret

0000180a <calibrate_line_sensors>:
    180a:	68 2f       	mov	r22, r24
    180c:	8d e8       	ldi	r24, 0x8D	; 141
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_ZN16PololuQTRSensors9calibrateEh>
    1814:	08 95       	ret

00001816 <read_line>:
    1816:	46 2f       	mov	r20, r22
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	bc 01       	movw	r22, r24
    181c:	8d e8       	ldi	r24, 0x8D	; 141
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 be 10 	call	0x217c	; 0x217c <_ZN16PololuQTRSensors8readLineEPjhh>
    1824:	08 95       	ret

00001826 <_ZN9Pololu3pi4initEjh>:
    1826:	0f 93       	push	r16
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	00 d0       	rcall	.+0      	; 0x182e <_ZN9Pololu3pi4initEjh+0x8>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <_ZN9Pololu3pi4initEjh+0xa>
    1830:	1f 92       	push	r1
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	9c 01       	movw	r18, r24
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	e6 e3       	ldi	r30, 0x36	; 54
    183c:	f1 e0       	ldi	r31, 0x01	; 1
    183e:	de 01       	movw	r26, r28
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	01 90       	ld	r0, Z+
    1844:	0d 92       	st	X+, r0
    1846:	8a 95       	dec	r24
    1848:	e1 f7       	brne	.-8      	; 0x1842 <_ZN9Pololu3pi4initEjh+0x1c>
    184a:	66 23       	and	r22, r22
    184c:	11 f0       	breq	.+4      	; 0x1852 <_ZN9Pololu3pi4initEjh+0x2c>
    184e:	0f ef       	ldi	r16, 0xFF	; 255
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <_ZN9Pololu3pi4initEjh+0x2e>
    1852:	03 e1       	ldi	r16, 0x13	; 19
    1854:	45 e0       	ldi	r20, 0x05	; 5
    1856:	be 01       	movw	r22, r28
    1858:	6f 5f       	subi	r22, 0xFF	; 255
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	8d e8       	ldi	r24, 0x8D	; 141
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1864:	8d e8       	ldi	r24, 0x8D	; 141
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN16PololuQTRSensors11emittersOffEv>
    186c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN13OrangutanTime5resetEv>
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	0f 91       	pop	r16
    1880:	08 95       	ret

00001882 <pololu_3pi_init>:
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN9Pololu3pi4initEjh>
    1888:	08 95       	ret

0000188a <_GLOBAL__sub_D_pololu_3pi_init>:
    188a:	8d e8       	ldi	r24, 0x8D	; 141
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN16PololuQTRSensorsD1Ev>
    1892:	08 95       	ret

00001894 <delay_us>:
    1894:	6f 93       	push	r22
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	6a 95       	dec	r22
    189a:	f1 f7       	brne	.-4      	; 0x1898 <delay_us+0x4>
    189c:	6f 91       	pop	r22
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	c9 f7       	brne	.-14     	; 0x1894 <delay_us>
    18a2:	08 95       	ret

000018a4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    18a4:	fc 01       	movw	r30, r24
    18a6:	11 82       	std	Z+1, r1	; 0x01
    18a8:	10 82       	st	Z, r1
    18aa:	13 82       	std	Z+3, r1	; 0x03
    18ac:	12 82       	std	Z+2, r1	; 0x02
    18ae:	15 82       	std	Z+5, r1	; 0x05
    18b0:	14 82       	std	Z+4, r1	; 0x04
    18b2:	16 82       	std	Z+6, r1	; 0x06
    18b4:	68 30       	cpi	r22, 0x08	; 8
    18b6:	68 f4       	brcc	.+26     	; 0x18d2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    18b8:	89 e2       	ldi	r24, 0x29	; 41
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	8b e2       	ldi	r24, 0x2B	; 43
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	93 83       	std	Z+3, r25	; 0x03
    18c6:	82 83       	std	Z+2, r24	; 0x02
    18c8:	8a e2       	ldi	r24, 0x2A	; 42
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	95 83       	std	Z+5, r25	; 0x05
    18ce:	84 83       	std	Z+4, r24	; 0x04
    18d0:	1f c0       	rjmp	.+62     	; 0x1910 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18d2:	6e 30       	cpi	r22, 0x0E	; 14
    18d4:	70 f4       	brcc	.+28     	; 0x18f2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    18d6:	83 e2       	ldi	r24, 0x23	; 35
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
    18de:	85 e2       	ldi	r24, 0x25	; 37
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	93 83       	std	Z+3, r25	; 0x03
    18e4:	82 83       	std	Z+2, r24	; 0x02
    18e6:	84 e2       	ldi	r24, 0x24	; 36
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	95 83       	std	Z+5, r25	; 0x05
    18ec:	84 83       	std	Z+4, r24	; 0x04
    18ee:	68 50       	subi	r22, 0x08	; 8
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18f2:	65 31       	cpi	r22, 0x15	; 21
    18f4:	98 f4       	brcc	.+38     	; 0x191c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    18f6:	86 e2       	ldi	r24, 0x26	; 38
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
    18fe:	88 e2       	ldi	r24, 0x28	; 40
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	93 83       	std	Z+3, r25	; 0x03
    1904:	82 83       	std	Z+2, r24	; 0x02
    1906:	87 e2       	ldi	r24, 0x27	; 39
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	95 83       	std	Z+5, r25	; 0x05
    190c:	84 83       	std	Z+4, r24	; 0x04
    190e:	6e 50       	subi	r22, 0x0E	; 14
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1914:	88 0f       	add	r24, r24
    1916:	6a 95       	dec	r22
    1918:	ea f7       	brpl	.-6      	; 0x1914 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    191a:	86 83       	std	Z+6, r24	; 0x06
    191c:	08 95       	ret

0000191e <_ZN16PololuQTRSensors4initEhhh>:
    191e:	a7 e0       	ldi	r26, 0x07	; 7
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e5 e9       	ldi	r30, 0x95	; 149
    1924:	fc e0       	ldi	r31, 0x0C	; 12
    1926:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x1c>
    192a:	8c 01       	movw	r16, r24
    192c:	fc 01       	movw	r30, r24
    192e:	11 82       	std	Z+1, r1	; 0x01
    1930:	10 82       	st	Z, r1
    1932:	13 82       	std	Z+3, r1	; 0x03
    1934:	12 82       	std	Z+2, r1	; 0x02
    1936:	15 82       	std	Z+5, r1	; 0x05
    1938:	14 82       	std	Z+4, r1	; 0x04
    193a:	17 82       	std	Z+7, r1	; 0x07
    193c:	16 82       	std	Z+6, r1	; 0x06
    193e:	61 31       	cpi	r22, 0x11	; 17
    1940:	18 f0       	brcs	.+6      	; 0x1948 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1942:	80 e1       	ldi	r24, 0x10	; 16
    1944:	80 87       	std	Z+8, r24	; 0x08
    1946:	02 c0       	rjmp	.+4      	; 0x194c <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1948:	fc 01       	movw	r30, r24
    194a:	60 87       	std	Z+8, r22	; 0x08
    194c:	f8 01       	movw	r30, r16
    194e:	20 8b       	std	Z+16, r18	; 0x10
    1950:	64 2f       	mov	r22, r20
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    195a:	8f 81       	ldd	r24, Y+7	; 0x07
    195c:	f8 01       	movw	r30, r16
    195e:	81 87       	std	Z+9, r24	; 0x09
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	93 87       	std	Z+11, r25	; 0x0b
    1966:	82 87       	std	Z+10, r24	; 0x0a
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	95 87       	std	Z+13, r25	; 0x0d
    196e:	84 87       	std	Z+12, r24	; 0x0c
    1970:	27 96       	adiw	r28, 0x07	; 7
    1972:	e4 e0       	ldi	r30, 0x04	; 4
    1974:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x1c>

00001978 <_ZN16PololuQTRSensors11emittersOffEv>:
    1978:	fc 01       	movw	r30, r24
    197a:	a4 85       	ldd	r26, Z+12	; 0x0c
    197c:	b5 85       	ldd	r27, Z+13	; 0x0d
    197e:	10 97       	sbiw	r26, 0x00	; 0
    1980:	79 f0       	breq	.+30     	; 0x19a0 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1982:	8c 91       	ld	r24, X
    1984:	91 85       	ldd	r25, Z+9	; 0x09
    1986:	89 2b       	or	r24, r25
    1988:	8c 93       	st	X, r24
    198a:	a2 85       	ldd	r26, Z+10	; 0x0a
    198c:	b3 85       	ldd	r27, Z+11	; 0x0b
    198e:	9c 91       	ld	r25, X
    1990:	81 85       	ldd	r24, Z+9	; 0x09
    1992:	80 95       	com	r24
    1994:	89 23       	and	r24, r25
    1996:	8c 93       	st	X, r24
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <delay_us>
    19a0:	08 95       	ret

000019a2 <_ZN16PololuQTRSensors10emittersOnEv>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    19a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    19a8:	10 97       	sbiw	r26, 0x00	; 0
    19aa:	71 f0       	breq	.+28     	; 0x19c8 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    19ac:	8c 91       	ld	r24, X
    19ae:	91 85       	ldd	r25, Z+9	; 0x09
    19b0:	89 2b       	or	r24, r25
    19b2:	8c 93       	st	X, r24
    19b4:	a2 85       	ldd	r26, Z+10	; 0x0a
    19b6:	b3 85       	ldd	r27, Z+11	; 0x0b
    19b8:	8c 91       	ld	r24, X
    19ba:	91 85       	ldd	r25, Z+9	; 0x09
    19bc:	89 2b       	or	r24, r25
    19be:	8c 93       	st	X, r24
    19c0:	88 ec       	ldi	r24, 0xC8	; 200
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <delay_us>
    19c8:	08 95       	ret

000019ca <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    19ca:	a7 e0       	ldi	r26, 0x07	; 7
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	eb ee       	ldi	r30, 0xEB	; 235
    19d0:	fc e0       	ldi	r31, 0x0C	; 12
    19d2:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x6>
    19d6:	7c 01       	movw	r14, r24
    19d8:	4b 01       	movw	r8, r22
    19da:	64 2f       	mov	r22, r20
    19dc:	39 01       	movw	r6, r18
    19de:	40 2f       	mov	r20, r16
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN16PololuQTRSensors4initEhhh>
    19e6:	87 01       	movw	r16, r14
    19e8:	0f 5b       	subi	r16, 0xBF	; 191
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	f8 01       	movw	r30, r16
    19ee:	10 82       	st	Z, r1
    19f0:	67 01       	movw	r12, r14
    19f2:	f2 e4       	ldi	r31, 0x42	; 66
    19f4:	cf 0e       	add	r12, r31
    19f6:	d1 1c       	adc	r13, r1
    19f8:	f6 01       	movw	r30, r12
    19fa:	10 82       	st	Z, r1
    19fc:	57 01       	movw	r10, r14
    19fe:	f3 e4       	ldi	r31, 0x43	; 67
    1a00:	af 0e       	add	r10, r31
    1a02:	b1 1c       	adc	r11, r1
    1a04:	f5 01       	movw	r30, r10
    1a06:	10 82       	st	Z, r1
    1a08:	f7 01       	movw	r30, r14
    1a0a:	77 86       	std	Z+15, r7	; 0x0f
    1a0c:	66 86       	std	Z+14, r6	; 0x0e
    1a0e:	51 2c       	mov	r5, r1
    1a10:	f7 01       	movw	r30, r14
    1a12:	80 85       	ldd	r24, Z+8	; 0x08
    1a14:	58 16       	cp	r5, r24
    1a16:	50 f5       	brcc	.+84     	; 0x1a6c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1a18:	65 2c       	mov	r6, r5
    1a1a:	71 2c       	mov	r7, r1
    1a1c:	f4 01       	movw	r30, r8
    1a1e:	e6 0d       	add	r30, r6
    1a20:	f7 1d       	adc	r31, r7
    1a22:	60 81       	ld	r22, Z
    1a24:	ce 01       	movw	r24, r28
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1a2c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a2e:	f7 01       	movw	r30, r14
    1a30:	e6 0d       	add	r30, r6
    1a32:	f7 1d       	adc	r31, r7
    1a34:	21 8b       	std	Z+17, r18	; 0x11
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	f3 01       	movw	r30, r6
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	ee 0d       	add	r30, r14
    1a42:	ff 1d       	adc	r31, r15
    1a44:	92 a3       	std	Z+34, r25	; 0x22
    1a46:	81 a3       	std	Z+33, r24	; 0x21
    1a48:	83 32       	cpi	r24, 0x23	; 35
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1a4e:	f8 01       	movw	r30, r16
    1a50:	08 c0       	rjmp	.+16     	; 0x1a62 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a52:	86 32       	cpi	r24, 0x26	; 38
    1a54:	91 05       	cpc	r25, r1
    1a56:	11 f4       	brne	.+4      	; 0x1a5c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1a58:	f6 01       	movw	r30, r12
    1a5a:	03 c0       	rjmp	.+6      	; 0x1a62 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a5c:	89 97       	sbiw	r24, 0x29	; 41
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1a60:	f5 01       	movw	r30, r10
    1a62:	80 81       	ld	r24, Z
    1a64:	82 2b       	or	r24, r18
    1a66:	80 83       	st	Z, r24
    1a68:	53 94       	inc	r5
    1a6a:	d2 cf       	rjmp	.-92     	; 0x1a10 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1a6c:	27 96       	adiw	r28, 0x07	; 7
    1a6e:	ef e0       	ldi	r30, 0x0F	; 15
    1a70:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x6>

00001a74 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1a74:	a0 e0       	ldi	r26, 0x00	; 0
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e0 e4       	ldi	r30, 0x40	; 64
    1a7a:	fd e0       	ldi	r31, 0x0D	; 13
    1a7c:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__+0xa>
    1a80:	ec 01       	movw	r28, r24
    1a82:	5b 01       	movw	r10, r22
    1a84:	6c 01       	movw	r12, r24
    1a86:	81 e4       	ldi	r24, 0x41	; 65
    1a88:	c8 0e       	add	r12, r24
    1a8a:	d1 1c       	adc	r13, r1
    1a8c:	f6 01       	movw	r30, r12
    1a8e:	80 80       	ld	r8, Z
    1a90:	7e 01       	movw	r14, r28
    1a92:	f2 e4       	ldi	r31, 0x42	; 66
    1a94:	ef 0e       	add	r14, r31
    1a96:	f1 1c       	adc	r15, r1
    1a98:	f7 01       	movw	r30, r14
    1a9a:	70 80       	ld	r7, Z
    1a9c:	8e 01       	movw	r16, r28
    1a9e:	0d 5b       	subi	r16, 0xBD	; 189
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	90 80       	ld	r9, Z
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	98 85       	ldd	r25, Y+8	; 0x08
    1aaa:	89 17       	cp	r24, r25
    1aac:	48 f4       	brcc	.+18     	; 0x1ac0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1aae:	f5 01       	movw	r30, r10
    1ab0:	e8 0f       	add	r30, r24
    1ab2:	f1 1d       	adc	r31, r1
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f1 1d       	adc	r31, r1
    1ab8:	11 82       	std	Z+1, r1	; 0x01
    1aba:	10 82       	st	Z, r1
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	f4 cf       	rjmp	.-24     	; 0x1aa8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1ac0:	84 b1       	in	r24, 0x04	; 4
    1ac2:	f6 01       	movw	r30, r12
    1ac4:	90 81       	ld	r25, Z
    1ac6:	89 2b       	or	r24, r25
    1ac8:	84 b9       	out	0x04, r24	; 4
    1aca:	87 b1       	in	r24, 0x07	; 7
    1acc:	f7 01       	movw	r30, r14
    1ace:	90 81       	ld	r25, Z
    1ad0:	89 2b       	or	r24, r25
    1ad2:	87 b9       	out	0x07, r24	; 7
    1ad4:	8a b1       	in	r24, 0x0a	; 10
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	90 81       	ld	r25, Z
    1ada:	89 2b       	or	r24, r25
    1adc:	8a b9       	out	0x0a, r24	; 10
    1ade:	85 b1       	in	r24, 0x05	; 5
    1ae0:	f6 01       	movw	r30, r12
    1ae2:	90 81       	ld	r25, Z
    1ae4:	89 2b       	or	r24, r25
    1ae6:	85 b9       	out	0x05, r24	; 5
    1ae8:	88 b1       	in	r24, 0x08	; 8
    1aea:	f7 01       	movw	r30, r14
    1aec:	90 81       	ld	r25, Z
    1aee:	89 2b       	or	r24, r25
    1af0:	88 b9       	out	0x08, r24	; 8
    1af2:	8b b1       	in	r24, 0x0b	; 11
    1af4:	f8 01       	movw	r30, r16
    1af6:	90 81       	ld	r25, Z
    1af8:	89 2b       	or	r24, r25
    1afa:	8b b9       	out	0x0b, r24	; 11
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 4a 0c 	call	0x1894	; 0x1894 <delay_us>
    1b04:	94 b1       	in	r25, 0x04	; 4
    1b06:	f6 01       	movw	r30, r12
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 95       	com	r24
    1b0c:	89 23       	and	r24, r25
    1b0e:	84 b9       	out	0x04, r24	; 4
    1b10:	97 b1       	in	r25, 0x07	; 7
    1b12:	f7 01       	movw	r30, r14
    1b14:	80 81       	ld	r24, Z
    1b16:	80 95       	com	r24
    1b18:	89 23       	and	r24, r25
    1b1a:	87 b9       	out	0x07, r24	; 7
    1b1c:	9a b1       	in	r25, 0x0a	; 10
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 81       	ld	r24, Z
    1b22:	80 95       	com	r24
    1b24:	89 23       	and	r24, r25
    1b26:	8a b9       	out	0x0a, r24	; 10
    1b28:	95 b1       	in	r25, 0x05	; 5
    1b2a:	f6 01       	movw	r30, r12
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 95       	com	r24
    1b30:	89 23       	and	r24, r25
    1b32:	85 b9       	out	0x05, r24	; 5
    1b34:	98 b1       	in	r25, 0x08	; 8
    1b36:	f7 01       	movw	r30, r14
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 95       	com	r24
    1b3c:	89 23       	and	r24, r25
    1b3e:	88 b9       	out	0x08, r24	; 8
    1b40:	9b b1       	in	r25, 0x0b	; 11
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 81       	ld	r24, Z
    1b46:	80 95       	com	r24
    1b48:	89 23       	and	r24, r25
    1b4a:	8b b9       	out	0x0b, r24	; 11
    1b4c:	e0 90 b0 00 	lds	r14, 0x00B0
    1b50:	d0 90 b1 00 	lds	r13, 0x00B1
    1b54:	80 91 b0 00 	lds	r24, 0x00B0
    1b58:	83 60       	ori	r24, 0x03	; 3
    1b5a:	80 93 b0 00 	sts	0x00B0, r24
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	80 93 b1 00 	sts	0x00B1, r24
    1b64:	40 91 b2 00 	lds	r20, 0x00B2
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b6e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b70:	82 17       	cp	r24, r18
    1b72:	93 07       	cpc	r25, r19
    1b74:	20 f5       	brcc	.+72     	; 0x1bbe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1b76:	c0 90 b2 00 	lds	r12, 0x00B2
    1b7a:	2c 2d       	mov	r18, r12
    1b7c:	24 1b       	sub	r18, r20
    1b7e:	82 0f       	add	r24, r18
    1b80:	91 1d       	adc	r25, r1
    1b82:	03 b1       	in	r16, 0x03	; 3
    1b84:	08 11       	cpse	r16, r8
    1b86:	32 c0       	rjmp	.+100    	; 0x1bec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b88:	f6 b0       	in	r15, 0x06	; 6
    1b8a:	f7 10       	cpse	r15, r7
    1b8c:	2f c0       	rjmp	.+94     	; 0x1bec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b8e:	29 b1       	in	r18, 0x09	; 9
    1b90:	29 11       	cpse	r18, r9
    1b92:	2c c0       	rjmp	.+88     	; 0x1bec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b94:	10 c0       	rjmp	.+32     	; 0x1bb6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1b96:	21 2f       	mov	r18, r17
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	a9 01       	movw	r20, r18
    1b9c:	44 0f       	add	r20, r20
    1b9e:	55 1f       	adc	r21, r21
    1ba0:	f5 01       	movw	r30, r10
    1ba2:	e4 0f       	add	r30, r20
    1ba4:	f5 1f       	adc	r31, r21
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	67 2b       	or	r22, r23
    1bac:	21 f1       	breq	.+72     	; 0x1bf6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1bae:	1f 5f       	subi	r17, 0xFF	; 255
    1bb0:	28 85       	ldd	r18, Y+8	; 0x08
    1bb2:	12 17       	cp	r17, r18
    1bb4:	80 f3       	brcs	.-32     	; 0x1b96 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1bb6:	7f 2c       	mov	r7, r15
    1bb8:	80 2e       	mov	r8, r16
    1bba:	4c 2d       	mov	r20, r12
    1bbc:	d7 cf       	rjmp	.-82     	; 0x1b6c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1bbe:	e0 92 b0 00 	sts	0x00B0, r14
    1bc2:	d0 92 b1 00 	sts	0x00B1, r13
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	88 85       	ldd	r24, Y+8	; 0x08
    1bca:	28 17       	cp	r18, r24
    1bcc:	30 f5       	brcc	.+76     	; 0x1c1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1bce:	f5 01       	movw	r30, r10
    1bd0:	e2 0f       	add	r30, r18
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	e2 0f       	add	r30, r18
    1bd6:	f1 1d       	adc	r31, r1
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	89 2b       	or	r24, r25
    1bde:	21 f4       	brne	.+8      	; 0x1be8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1be0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	80 83       	st	Z, r24
    1be8:	2f 5f       	subi	r18, 0xFF	; 255
    1bea:	ee cf       	rjmp	.-36     	; 0x1bc8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1bec:	03 b1       	in	r16, 0x03	; 3
    1bee:	f6 b0       	in	r15, 0x06	; 6
    1bf0:	99 b0       	in	r9, 0x09	; 9
    1bf2:	10 e0       	ldi	r17, 0x00	; 0
    1bf4:	dd cf       	rjmp	.-70     	; 0x1bb0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1bf6:	de 01       	movw	r26, r28
    1bf8:	a4 0f       	add	r26, r20
    1bfa:	b5 1f       	adc	r27, r21
    1bfc:	91 96       	adiw	r26, 0x21	; 33
    1bfe:	0d 90       	ld	r0, X+
    1c00:	bc 91       	ld	r27, X
    1c02:	a0 2d       	mov	r26, r0
    1c04:	4c 91       	ld	r20, X
    1c06:	de 01       	movw	r26, r28
    1c08:	a2 0f       	add	r26, r18
    1c0a:	b3 1f       	adc	r27, r19
    1c0c:	51 96       	adiw	r26, 0x11	; 17
    1c0e:	2c 91       	ld	r18, X
    1c10:	42 23       	and	r20, r18
    1c12:	69 f6       	brne	.-102    	; 0x1bae <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	ca cf       	rjmp	.-108    	; 0x1bae <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	ed e0       	ldi	r30, 0x0D	; 13
    1c20:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__+0xa>

00001c24 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	fc 01       	movw	r30, r24
    1c32:	9b 01       	movw	r18, r22
    1c34:	f0 90 7c 00 	lds	r15, 0x007C
    1c38:	00 91 7a 00 	lds	r16, 0x007A
    1c3c:	47 b1       	in	r20, 0x07	; 7
    1c3e:	18 b1       	in	r17, 0x08	; 8
    1c40:	80 91 7a 00 	lds	r24, 0x007A
    1c44:	86 fd       	sbrc	r24, 6
    1c46:	fc cf       	rjmp	.-8      	; 0x1c40 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 85       	ldd	r25, Z+8	; 0x08
    1c4c:	89 17       	cp	r24, r25
    1c4e:	48 f4       	brcc	.+18     	; 0x1c62 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1c50:	d9 01       	movw	r26, r18
    1c52:	a8 0f       	add	r26, r24
    1c54:	b1 1d       	adc	r27, r1
    1c56:	a8 0f       	add	r26, r24
    1c58:	b1 1d       	adc	r27, r1
    1c5a:	1d 92       	st	X+, r1
    1c5c:	1c 92       	st	X, r1
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	f4 cf       	rjmp	.-24     	; 0x1c4a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1c62:	97 b1       	in	r25, 0x07	; 7
    1c64:	82 a1       	ldd	r24, Z+34	; 0x22
    1c66:	80 95       	com	r24
    1c68:	89 23       	and	r24, r25
    1c6a:	87 b9       	out	0x07, r24	; 7
    1c6c:	98 b1       	in	r25, 0x08	; 8
    1c6e:	82 a1       	ldd	r24, Z+34	; 0x22
    1c70:	80 95       	com	r24
    1c72:	89 23       	and	r24, r25
    1c74:	88 b9       	out	0x08, r24	; 8
    1c76:	87 e8       	ldi	r24, 0x87	; 135
    1c78:	80 93 7a 00 	sts	0x007A, r24
    1c7c:	e1 2c       	mov	r14, r1
    1c7e:	81 a1       	ldd	r24, Z+33	; 0x21
    1c80:	e8 16       	cp	r14, r24
    1c82:	10 f0       	brcs	.+4      	; 0x1c88 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1c84:	e1 2c       	mov	r14, r1
    1c86:	29 c0       	rjmp	.+82     	; 0x1cda <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	80 85       	ldd	r24, Z+8	; 0x08
    1c8c:	58 17       	cp	r21, r24
    1c8e:	18 f5       	brcc	.+70     	; 0x1cd6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1c90:	a5 2f       	mov	r26, r21
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ef 01       	movw	r28, r30
    1c96:	ca 0f       	add	r28, r26
    1c98:	db 1f       	adc	r29, r27
    1c9a:	89 89       	ldd	r24, Y+17	; 0x11
    1c9c:	80 64       	ori	r24, 0x40	; 64
    1c9e:	80 93 7c 00 	sts	0x007C, r24
    1ca2:	80 91 7a 00 	lds	r24, 0x007A
    1ca6:	80 64       	ori	r24, 0x40	; 64
    1ca8:	80 93 7a 00 	sts	0x007A, r24
    1cac:	80 91 7a 00 	lds	r24, 0x007A
    1cb0:	86 fd       	sbrc	r24, 6
    1cb2:	fc cf       	rjmp	.-8      	; 0x1cac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1cb4:	60 91 78 00 	lds	r22, 0x0078
    1cb8:	70 91 79 00 	lds	r23, 0x0079
    1cbc:	aa 0f       	add	r26, r26
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	a2 0f       	add	r26, r18
    1cc2:	b3 1f       	adc	r27, r19
    1cc4:	8d 91       	ld	r24, X+
    1cc6:	9c 91       	ld	r25, X
    1cc8:	11 97       	sbiw	r26, 0x01	; 1
    1cca:	86 0f       	add	r24, r22
    1ccc:	97 1f       	adc	r25, r23
    1cce:	8d 93       	st	X+, r24
    1cd0:	9c 93       	st	X, r25
    1cd2:	5f 5f       	subi	r21, 0xFF	; 255
    1cd4:	da cf       	rjmp	.-76     	; 0x1c8a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1cd6:	e3 94       	inc	r14
    1cd8:	d2 cf       	rjmp	.-92     	; 0x1c7e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1cda:	80 85       	ldd	r24, Z+8	; 0x08
    1cdc:	e8 16       	cp	r14, r24
    1cde:	a0 f4       	brcc	.+40     	; 0x1d08 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1ce0:	e9 01       	movw	r28, r18
    1ce2:	ce 0d       	add	r28, r14
    1ce4:	d1 1d       	adc	r29, r1
    1ce6:	ce 0d       	add	r28, r14
    1ce8:	d1 1d       	adc	r29, r1
    1cea:	61 a1       	ldd	r22, Z+33	; 0x21
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	cb 01       	movw	r24, r22
    1cf0:	95 95       	asr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	a8 81       	ld	r26, Y
    1cf6:	b9 81       	ldd	r27, Y+1	; 0x01
    1cf8:	8a 0f       	add	r24, r26
    1cfa:	9b 1f       	adc	r25, r27
    1cfc:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
    1d00:	79 83       	std	Y+1, r23	; 0x01
    1d02:	68 83       	st	Y, r22
    1d04:	e3 94       	inc	r14
    1d06:	e9 cf       	rjmp	.-46     	; 0x1cda <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1d08:	f0 92 7c 00 	sts	0x007C, r15
    1d0c:	00 93 7a 00 	sts	0x007A, r16
    1d10:	18 b9       	out	0x08, r17	; 8
    1d12:	47 b9       	out	0x07, r20	; 7
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	e6 e0       	ldi	r30, 0x06	; 6
    1d1a:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x18>

00001d1e <_ZN16PololuQTRSensors4readEPjh>:
    1d1e:	a0 e2       	ldi	r26, 0x20	; 32
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e9       	ldi	r30, 0x95	; 149
    1d24:	fe e0       	ldi	r31, 0x0E	; 14
    1d26:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x16>
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	7b 01       	movw	r14, r22
    1d2e:	d4 2e       	mov	r13, r20
    1d30:	8f ef       	ldi	r24, 0xFF	; 255
    1d32:	84 0f       	add	r24, r20
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	18 f4       	brcc	.+6      	; 0x1d3e <_ZN16PololuQTRSensors4readEPjh+0x20>
    1d38:	c8 01       	movw	r24, r16
    1d3a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN16PololuQTRSensors10emittersOnEv>
    1d3e:	d8 01       	movw	r26, r16
    1d40:	50 96       	adiw	r26, 0x10	; 16
    1d42:	8c 91       	ld	r24, X
    1d44:	b7 01       	movw	r22, r14
    1d46:	81 11       	cpse	r24, r1
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d50:	c8 01       	movw	r24, r16
    1d52:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN16PololuQTRSensors11emittersOffEv>
    1d56:	b2 e0       	ldi	r27, 0x02	; 2
    1d58:	db 12       	cpse	r13, r27
    1d5a:	3a c0       	rjmp	.+116    	; 0x1dd0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d5c:	be 01       	movw	r22, r28
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	c8 01       	movw	r24, r16
    1d64:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d70:	c8 01       	movw	r24, r16
    1d72:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN16PololuQTRSensors11emittersOffEv>
    1d76:	e2 e0       	ldi	r30, 0x02	; 2
    1d78:	de 12       	cpse	r13, r30
    1d7a:	2a c0       	rjmp	.+84     	; 0x1dd0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d7c:	be 01       	movw	r22, r28
    1d7e:	6f 5f       	subi	r22, 0xFF	; 255
    1d80:	7f 4f       	sbci	r23, 0xFF	; 255
    1d82:	c8 01       	movw	r24, r16
    1d84:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	80 85       	ldd	r24, Z+8	; 0x08
    1d8e:	48 17       	cp	r20, r24
    1d90:	f8 f4       	brcc	.+62     	; 0x1dd0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d92:	84 2f       	mov	r24, r20
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	e8 0f       	add	r30, r24
    1d9e:	f9 1f       	adc	r31, r25
    1da0:	21 e0       	ldi	r18, 0x01	; 1
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	2c 0f       	add	r18, r28
    1da6:	3d 1f       	adc	r19, r29
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	d8 01       	movw	r26, r16
    1dae:	1e 96       	adiw	r26, 0x0e	; 14
    1db0:	2d 91       	ld	r18, X+
    1db2:	3c 91       	ld	r19, X
    1db4:	1f 97       	sbiw	r26, 0x0f	; 15
    1db6:	dc 01       	movw	r26, r24
    1db8:	8d 91       	ld	r24, X+
    1dba:	9c 91       	ld	r25, X
    1dbc:	28 1b       	sub	r18, r24
    1dbe:	39 0b       	sbc	r19, r25
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	82 0f       	add	r24, r18
    1dc6:	93 1f       	adc	r25, r19
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	4f 5f       	subi	r20, 0xFF	; 255
    1dce:	dd cf       	rjmp	.-70     	; 0x1d8a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1dd0:	a0 96       	adiw	r28, 0x20	; 32
    1dd2:	e7 e0       	ldi	r30, 0x07	; 7
    1dd4:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x16>

00001dd8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1dd8:	2f 92       	push	r2
    1dda:	3f 92       	push	r3
    1ddc:	5f 92       	push	r5
    1dde:	6f 92       	push	r6
    1de0:	7f 92       	push	r7
    1de2:	8f 92       	push	r8
    1de4:	9f 92       	push	r9
    1de6:	af 92       	push	r10
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	c0 56       	subi	r28, 0x60	; 96
    1e00:	d1 09       	sbc	r29, r1
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	8c 01       	movw	r16, r24
    1e0e:	4b 01       	movw	r8, r22
    1e10:	5a 01       	movw	r10, r20
    1e12:	52 2e       	mov	r5, r18
    1e14:	da 01       	movw	r26, r20
    1e16:	8d 91       	ld	r24, X+
    1e18:	9c 91       	ld	r25, X
    1e1a:	89 2b       	or	r24, r25
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1e1e:	f4 01       	movw	r30, r8
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	89 2b       	or	r24, r25
    1e26:	f1 f4       	brne	.+60     	; 0x1e64 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1e28:	24 c0       	rjmp	.+72     	; 0x1e72 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1e2a:	d8 01       	movw	r26, r16
    1e2c:	18 96       	adiw	r26, 0x08	; 8
    1e2e:	8c 91       	ld	r24, X
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0e 94 25 12 	call	0x244a	; 0x244a <malloc>
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1e44:	b1 c0       	rjmp	.+354    	; 0x1fa8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	d8 01       	movw	r26, r16
    1e4e:	18 96       	adiw	r26, 0x08	; 8
    1e50:	8c 91       	ld	r24, X
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	28 17       	cp	r18, r24
    1e56:	39 07       	cpc	r19, r25
    1e58:	14 f7       	brge	.-60     	; 0x1e1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1e5a:	11 92       	st	Z+, r1
    1e5c:	11 92       	st	Z+, r1
    1e5e:	2f 5f       	subi	r18, 0xFF	; 255
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	f4 cf       	rjmp	.-24     	; 0x1e4c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1e64:	e1 2c       	mov	r14, r1
    1e66:	f1 2c       	mov	r15, r1
    1e68:	6e 01       	movw	r12, r28
    1e6a:	b1 e2       	ldi	r27, 0x21	; 33
    1e6c:	cb 0e       	add	r12, r27
    1e6e:	d1 1c       	adc	r13, r1
    1e70:	21 c0       	rjmp	.+66     	; 0x1eb4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e72:	f8 01       	movw	r30, r16
    1e74:	80 85       	ldd	r24, Z+8	; 0x08
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0e 94 25 12 	call	0x244a	; 0x244a <malloc>
    1e80:	d4 01       	movw	r26, r8
    1e82:	8d 93       	st	X+, r24
    1e84:	9c 93       	st	X, r25
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1e8a:	8e c0       	rjmp	.+284    	; 0x1fa8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	d8 01       	movw	r26, r16
    1e94:	18 96       	adiw	r26, 0x08	; 8
    1e96:	8c 91       	ld	r24, X
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	28 17       	cp	r18, r24
    1e9c:	39 07       	cpc	r19, r25
    1e9e:	14 f7       	brge	.-60     	; 0x1e64 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1ea0:	d8 01       	movw	r26, r16
    1ea2:	1e 96       	adiw	r26, 0x0e	; 14
    1ea4:	8d 91       	ld	r24, X+
    1ea6:	9c 91       	ld	r25, X
    1ea8:	1f 97       	sbiw	r26, 0x0f	; 15
    1eaa:	81 93       	st	Z+, r24
    1eac:	91 93       	st	Z+, r25
    1eae:	2f 5f       	subi	r18, 0xFF	; 255
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	ef cf       	rjmp	.-34     	; 0x1e92 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1eb4:	45 2d       	mov	r20, r5
    1eb6:	be 01       	movw	r22, r28
    1eb8:	6f 5b       	subi	r22, 0xBF	; 191
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16PololuQTRSensors4readEPjh>
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	60 84       	ldd	r6, Z+8	; 0x08
    1ec6:	71 2c       	mov	r7, r1
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ef 5b       	subi	r30, 0xBF	; 191
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	c6 01       	movw	r24, r12
    1ed0:	9e 01       	movw	r18, r28
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	19 01       	movw	r2, r18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	26 15       	cp	r18, r6
    1ede:	37 05       	cpc	r19, r7
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1ee2:	e1 14       	cp	r14, r1
    1ee4:	f1 04       	cpc	r15, r1
    1ee6:	89 f0       	breq	.+34     	; 0x1f0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	6d 91       	ld	r22, X+
    1eec:	7c 91       	ld	r23, X
    1eee:	40 81       	ld	r20, Z
    1ef0:	51 81       	ldd	r21, Z+1	; 0x01
    1ef2:	64 17       	cp	r22, r20
    1ef4:	75 07       	cpc	r23, r21
    1ef6:	48 f0       	brcs	.+18     	; 0x1f0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1ef8:	d1 01       	movw	r26, r2
    1efa:	6d 91       	ld	r22, X+
    1efc:	7c 91       	ld	r23, X
    1efe:	40 81       	ld	r20, Z
    1f00:	51 81       	ldd	r21, Z+1	; 0x01
    1f02:	46 17       	cp	r20, r22
    1f04:	57 07       	cpc	r21, r23
    1f06:	48 f0       	brcs	.+18     	; 0x1f1a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1f08:	0d c0       	rjmp	.+26     	; 0x1f24 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1f0a:	40 81       	ld	r20, Z
    1f0c:	51 81       	ldd	r21, Z+1	; 0x01
    1f0e:	dc 01       	movw	r26, r24
    1f10:	4d 93       	st	X+, r20
    1f12:	5c 93       	st	X, r21
    1f14:	e1 14       	cp	r14, r1
    1f16:	f1 04       	cpc	r15, r1
    1f18:	79 f7       	brne	.-34     	; 0x1ef8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	d1 01       	movw	r26, r2
    1f20:	4d 93       	st	X+, r20
    1f22:	5c 93       	st	X, r21
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	b2 e0       	ldi	r27, 0x02	; 2
    1f2a:	2b 0e       	add	r2, r27
    1f2c:	31 1c       	adc	r3, r1
    1f2e:	32 96       	adiw	r30, 0x02	; 2
    1f30:	02 96       	adiw	r24, 0x02	; 2
    1f32:	d4 cf       	rjmp	.-88     	; 0x1edc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1f34:	ef ef       	ldi	r30, 0xFF	; 255
    1f36:	ee 1a       	sub	r14, r30
    1f38:	fe 0a       	sbc	r15, r30
    1f3a:	fa e0       	ldi	r31, 0x0A	; 10
    1f3c:	ef 16       	cp	r14, r31
    1f3e:	f1 04       	cpc	r15, r1
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1f42:	b8 cf       	rjmp	.-144    	; 0x1eb4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1f44:	9e 01       	movw	r18, r28
    1f46:	2f 5f       	subi	r18, 0xFF	; 255
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	79 01       	movw	r14, r18
    1f4c:	36 01       	movw	r6, r12
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	f8 01       	movw	r30, r16
    1f54:	20 85       	ldd	r18, Z+8	; 0x08
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	82 17       	cp	r24, r18
    1f5a:	93 07       	cpc	r25, r19
    1f5c:	2c f5       	brge	.+74     	; 0x1fa8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1f5e:	d7 01       	movw	r26, r14
    1f60:	2d 91       	ld	r18, X+
    1f62:	3d 91       	ld	r19, X+
    1f64:	7d 01       	movw	r14, r26
    1f66:	b3 01       	movw	r22, r6
    1f68:	6c 19       	sub	r22, r12
    1f6a:	7d 09       	sbc	r23, r13
    1f6c:	d5 01       	movw	r26, r10
    1f6e:	ed 91       	ld	r30, X+
    1f70:	fc 91       	ld	r31, X
    1f72:	e6 0f       	add	r30, r22
    1f74:	f7 1f       	adc	r31, r23
    1f76:	40 81       	ld	r20, Z
    1f78:	51 81       	ldd	r21, Z+1	; 0x01
    1f7a:	42 17       	cp	r20, r18
    1f7c:	53 07       	cpc	r21, r19
    1f7e:	10 f4       	brcc	.+4      	; 0x1f84 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1f80:	31 83       	std	Z+1, r19	; 0x01
    1f82:	20 83       	st	Z, r18
    1f84:	f3 01       	movw	r30, r6
    1f86:	21 91       	ld	r18, Z+
    1f88:	31 91       	ld	r19, Z+
    1f8a:	3f 01       	movw	r6, r30
    1f8c:	d4 01       	movw	r26, r8
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fc 91       	ld	r31, X
    1f92:	e6 0f       	add	r30, r22
    1f94:	f7 1f       	adc	r31, r23
    1f96:	40 81       	ld	r20, Z
    1f98:	51 81       	ldd	r21, Z+1	; 0x01
    1f9a:	24 17       	cp	r18, r20
    1f9c:	35 07       	cpc	r19, r21
    1f9e:	10 f4       	brcc	.+4      	; 0x1fa4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1fa0:	31 83       	std	Z+1, r19	; 0x01
    1fa2:	20 83       	st	Z, r18
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	d5 cf       	rjmp	.-86     	; 0x1f52 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1fa8:	c0 5a       	subi	r28, 0xA0	; 160
    1faa:	df 4f       	sbci	r29, 0xFF	; 255
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	ff 90       	pop	r15
    1fc0:	ef 90       	pop	r14
    1fc2:	df 90       	pop	r13
    1fc4:	cf 90       	pop	r12
    1fc6:	bf 90       	pop	r11
    1fc8:	af 90       	pop	r10
    1fca:	9f 90       	pop	r9
    1fcc:	8f 90       	pop	r8
    1fce:	7f 90       	pop	r7
    1fd0:	6f 90       	pop	r6
    1fd2:	5f 90       	pop	r5
    1fd4:	3f 90       	pop	r3
    1fd6:	2f 90       	pop	r2
    1fd8:	08 95       	ret

00001fda <_ZN16PololuQTRSensors9calibrateEh>:
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	ec 01       	movw	r28, r24
    1fe2:	16 2f       	mov	r17, r22
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	86 0f       	add	r24, r22
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	18 f0       	brcs	.+6      	; 0x1ff2 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1fec:	66 23       	and	r22, r22
    1fee:	59 f0       	breq	.+22     	; 0x2006 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1ff0:	14 c0       	rjmp	.+40     	; 0x201a <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ff2:	21 e0       	ldi	r18, 0x01	; 1
    1ff4:	ae 01       	movw	r20, r28
    1ff6:	4e 5f       	subi	r20, 0xFE	; 254
    1ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffa:	be 01       	movw	r22, r28
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2002:	12 30       	cpi	r17, 0x02	; 2
    2004:	51 f4       	brne	.+20     	; 0x201a <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2006:	ae 01       	movw	r20, r28
    2008:	4a 5f       	subi	r20, 0xFA	; 250
    200a:	5f 4f       	sbci	r21, 0xFF	; 255
    200c:	be 01       	movw	r22, r28
    200e:	6c 5f       	subi	r22, 0xFC	; 252
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	ce 01       	movw	r24, r28
    2016:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	08 95       	ret

00002022 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e7 e1       	ldi	r30, 0x17	; 23
    2028:	f0 e1       	ldi	r31, 0x10	; 16
    202a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x12>
    202e:	ec 01       	movw	r28, r24
    2030:	8b 01       	movw	r16, r22
    2032:	b4 2e       	mov	r11, r20
    2034:	84 2f       	mov	r24, r20
    2036:	8d 7f       	andi	r24, 0xFD	; 253
    2038:	51 f4       	brne	.+20     	; 0x204e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	9d 81       	ldd	r25, Y+5	; 0x05
    203e:	89 2b       	or	r24, r25
    2040:	09 f4       	brne	.+2      	; 0x2044 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2042:	97 c0       	rjmp	.+302    	; 0x2172 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	89 2b       	or	r24, r25
    204a:	09 f4       	brne	.+2      	; 0x204e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    204c:	92 c0       	rjmp	.+292    	; 0x2172 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	8b 0d       	add	r24, r11
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	50 f4       	brcc	.+20     	; 0x206a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2056:	88 81       	ld	r24, Y
    2058:	99 81       	ldd	r25, Y+1	; 0x01
    205a:	89 2b       	or	r24, r25
    205c:	09 f4       	brne	.+2      	; 0x2060 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    205e:	89 c0       	rjmp	.+274    	; 0x2172 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	9b 81       	ldd	r25, Y+3	; 0x03
    2064:	89 2b       	or	r24, r25
    2066:	09 f4       	brne	.+2      	; 0x206a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2068:	84 c0       	rjmp	.+264    	; 0x2172 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    206a:	4b 2d       	mov	r20, r11
    206c:	b8 01       	movw	r22, r16
    206e:	ce 01       	movw	r24, r28
    2070:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16PololuQTRSensors4readEPjh>
    2074:	78 01       	movw	r14, r16
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	c1 2c       	mov	r12, r1
    207c:	d1 2c       	mov	r13, r1
    207e:	88 85       	ldd	r24, Y+8	; 0x08
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	c8 16       	cp	r12, r24
    2084:	d9 06       	cpc	r13, r25
    2086:	0c f0       	brlt	.+2      	; 0x208a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2088:	74 c0       	rjmp	.+232    	; 0x2172 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	b8 12       	cpse	r11, r24
    208e:	0a c0       	rjmp	.+20     	; 0x20a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2090:	ea 81       	ldd	r30, Y+2	; 0x02
    2092:	fb 81       	ldd	r31, Y+3	; 0x03
    2094:	e0 0f       	add	r30, r16
    2096:	f1 1f       	adc	r31, r17
    2098:	01 90       	ld	r0, Z+
    209a:	f0 81       	ld	r31, Z
    209c:	e0 2d       	mov	r30, r0
    209e:	a8 81       	ld	r26, Y
    20a0:	b9 81       	ldd	r27, Y+1	; 0x01
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	2e 81       	ldd	r18, Y+6	; 0x06
    20aa:	3f 81       	ldd	r19, Y+7	; 0x07
    20ac:	b1 10       	cpse	r11, r1
    20ae:	0c c0       	rjmp	.+24     	; 0x20c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    20b0:	f9 01       	movw	r30, r18
    20b2:	e0 0f       	add	r30, r16
    20b4:	f1 1f       	adc	r31, r17
    20b6:	01 90       	ld	r0, Z+
    20b8:	f0 81       	ld	r31, Z
    20ba:	e0 2d       	mov	r30, r0
    20bc:	dc 01       	movw	r26, r24
    20be:	a0 0f       	add	r26, r16
    20c0:	b1 1f       	adc	r27, r17
    20c2:	8d 91       	ld	r24, X+
    20c4:	9c 91       	ld	r25, X
    20c6:	28 c0       	rjmp	.+80     	; 0x2118 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    20c8:	fc 01       	movw	r30, r24
    20ca:	e0 0f       	add	r30, r16
    20cc:	f1 1f       	adc	r31, r17
    20ce:	40 81       	ld	r20, Z
    20d0:	51 81       	ldd	r21, Z+1	; 0x01
    20d2:	e8 81       	ld	r30, Y
    20d4:	f9 81       	ldd	r31, Y+1	; 0x01
    20d6:	e0 0f       	add	r30, r16
    20d8:	f1 1f       	adc	r31, r17
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	ee 85       	ldd	r30, Y+14	; 0x0e
    20e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    20e2:	48 17       	cp	r20, r24
    20e4:	59 07       	cpc	r21, r25
    20e6:	10 f4       	brcc	.+4      	; 0x20ec <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    20e8:	cf 01       	movw	r24, r30
    20ea:	04 c0       	rjmp	.+8      	; 0x20f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    20ec:	8e 0f       	add	r24, r30
    20ee:	9f 1f       	adc	r25, r31
    20f0:	84 1b       	sub	r24, r20
    20f2:	95 0b       	sbc	r25, r21
    20f4:	d9 01       	movw	r26, r18
    20f6:	a0 0f       	add	r26, r16
    20f8:	b1 1f       	adc	r27, r17
    20fa:	2d 91       	ld	r18, X+
    20fc:	3c 91       	ld	r19, X
    20fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2100:	bb 81       	ldd	r27, Y+3	; 0x03
    2102:	a0 0f       	add	r26, r16
    2104:	b1 1f       	adc	r27, r17
    2106:	4d 91       	ld	r20, X+
    2108:	5c 91       	ld	r21, X
    210a:	24 17       	cp	r18, r20
    210c:	35 07       	cpc	r19, r21
    210e:	20 f0       	brcs	.+8      	; 0x2118 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2110:	e4 0f       	add	r30, r20
    2112:	f5 1f       	adc	r31, r21
    2114:	e2 1b       	sub	r30, r18
    2116:	f3 0b       	sbc	r31, r19
    2118:	e8 1b       	sub	r30, r24
    211a:	f9 0b       	sbc	r31, r25
    211c:	a9 f0       	breq	.+42     	; 0x2148 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    211e:	d7 01       	movw	r26, r14
    2120:	2d 91       	ld	r18, X+
    2122:	3c 91       	ld	r19, X
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	28 1b       	sub	r18, r24
    212a:	39 0b       	sbc	r19, r25
    212c:	41 09       	sbc	r20, r1
    212e:	51 09       	sbc	r21, r1
    2130:	a8 ee       	ldi	r26, 0xE8	; 232
    2132:	b3 e0       	ldi	r27, 0x03	; 3
    2134:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__muluhisi3>
    2138:	9f 01       	movw	r18, r30
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	0e 94 a7 11 	call	0x234e	; 0x234e <__divmodsi4>
    2142:	37 fd       	sbrc	r19, 7
    2144:	0a c0       	rjmp	.+20     	; 0x215a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2146:	02 c0       	rjmp	.+4      	; 0x214c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	29 3e       	cpi	r18, 0xE9	; 233
    214e:	b3 e0       	ldi	r27, 0x03	; 3
    2150:	3b 07       	cpc	r19, r27
    2152:	2c f0       	brlt	.+10     	; 0x215e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2154:	28 ee       	ldi	r18, 0xE8	; 232
    2156:	33 e0       	ldi	r19, 0x03	; 3
    2158:	02 c0       	rjmp	.+4      	; 0x215e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	f7 01       	movw	r30, r14
    2160:	21 93       	st	Z+, r18
    2162:	31 93       	st	Z+, r19
    2164:	7f 01       	movw	r14, r30
    2166:	ff ef       	ldi	r31, 0xFF	; 255
    2168:	cf 1a       	sub	r12, r31
    216a:	df 0a       	sbc	r13, r31
    216c:	0e 5f       	subi	r16, 0xFE	; 254
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	86 cf       	rjmp	.-244    	; 0x207e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	e9 e0       	ldi	r30, 0x09	; 9
    2178:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x12>

0000217c <_ZN16PololuQTRSensors8readLineEPjhh>:
    217c:	a0 e0       	ldi	r26, 0x00	; 0
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e4 ec       	ldi	r30, 0xC4	; 196
    2182:	f0 e1       	ldi	r31, 0x10	; 16
    2184:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__prologue_saves__>
    2188:	ec 01       	movw	r28, r24
    218a:	8b 01       	movw	r16, r22
    218c:	82 2e       	mov	r8, r18
    218e:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2192:	28 84       	ldd	r2, Y+8	; 0x08
    2194:	e8 01       	movw	r28, r16
    2196:	41 2c       	mov	r4, r1
    2198:	51 2c       	mov	r5, r1
    219a:	32 01       	movw	r6, r4
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	10 e0       	ldi	r17, 0x00	; 0
    21a0:	c1 2c       	mov	r12, r1
    21a2:	d1 2c       	mov	r13, r1
    21a4:	76 01       	movw	r14, r12
    21a6:	31 2c       	mov	r3, r1
    21a8:	91 2c       	mov	r9, r1
    21aa:	58 ee       	ldi	r21, 0xE8	; 232
    21ac:	a5 2e       	mov	r10, r21
    21ae:	53 e0       	ldi	r21, 0x03	; 3
    21b0:	b5 2e       	mov	r11, r21
    21b2:	92 14       	cp	r9, r2
    21b4:	21 f1       	breq	.+72     	; 0x21fe <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    21b6:	e9 91       	ld	r30, Y+
    21b8:	f9 91       	ld	r31, Y+
    21ba:	88 20       	and	r8, r8
    21bc:	21 f0       	breq	.+8      	; 0x21c6 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    21be:	c5 01       	movw	r24, r10
    21c0:	8e 1b       	sub	r24, r30
    21c2:	9f 0b       	sbc	r25, r31
    21c4:	fc 01       	movw	r30, r24
    21c6:	e9 3c       	cpi	r30, 0xC9	; 201
    21c8:	f1 05       	cpc	r31, r1
    21ca:	24 f4       	brge	.+8      	; 0x21d4 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    21cc:	e3 33       	cpi	r30, 0x33	; 51
    21ce:	f1 05       	cpc	r31, r1
    21d0:	74 f0       	brlt	.+28     	; 0x21ee <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    21d4:	33 24       	eor	r3, r3
    21d6:	33 94       	inc	r3
    21d8:	df 01       	movw	r26, r30
    21da:	a3 01       	movw	r20, r6
    21dc:	92 01       	movw	r18, r4
    21de:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__mulshisi3>
    21e2:	c6 0e       	add	r12, r22
    21e4:	d7 1e       	adc	r13, r23
    21e6:	e8 1e       	adc	r14, r24
    21e8:	f9 1e       	adc	r15, r25
    21ea:	0e 0f       	add	r16, r30
    21ec:	1f 1f       	adc	r17, r31
    21ee:	93 94       	inc	r9
    21f0:	98 ee       	ldi	r25, 0xE8	; 232
    21f2:	49 0e       	add	r4, r25
    21f4:	93 e0       	ldi	r25, 0x03	; 3
    21f6:	59 1e       	adc	r5, r25
    21f8:	61 1c       	adc	r6, r1
    21fa:	71 1c       	adc	r7, r1
    21fc:	da cf       	rjmp	.-76     	; 0x21b2 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    21fe:	31 10       	cpse	r3, r1
    2200:	1e c0       	rjmp	.+60     	; 0x223e <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2202:	49 2d       	mov	r20, r9
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	41 50       	subi	r20, 0x01	; 1
    2208:	51 09       	sbc	r21, r1
    220a:	24 ef       	ldi	r18, 0xF4	; 244
    220c:	31 e0       	ldi	r19, 0x01	; 1
    220e:	42 9f       	mul	r20, r18
    2210:	c0 01       	movw	r24, r0
    2212:	43 9f       	mul	r20, r19
    2214:	90 0d       	add	r25, r0
    2216:	52 9f       	mul	r21, r18
    2218:	90 0d       	add	r25, r0
    221a:	11 24       	eor	r1, r1
    221c:	20 91 d1 01 	lds	r18, 0x01D1
    2220:	30 91 d2 01 	lds	r19, 0x01D2
    2224:	28 17       	cp	r18, r24
    2226:	39 07       	cpc	r19, r25
    2228:	b4 f0       	brlt	.+44     	; 0x2256 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    222a:	88 ee       	ldi	r24, 0xE8	; 232
    222c:	93 e0       	ldi	r25, 0x03	; 3
    222e:	48 9f       	mul	r20, r24
    2230:	90 01       	movw	r18, r0
    2232:	49 9f       	mul	r20, r25
    2234:	30 0d       	add	r19, r0
    2236:	58 9f       	mul	r21, r24
    2238:	30 0d       	add	r19, r0
    223a:	11 24       	eor	r1, r1
    223c:	0e c0       	rjmp	.+28     	; 0x225a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    223e:	98 01       	movw	r18, r16
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	c7 01       	movw	r24, r14
    2246:	b6 01       	movw	r22, r12
    2248:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
    224c:	30 93 d2 01 	sts	0x01D2, r19
    2250:	20 93 d1 01 	sts	0x01D1, r18
    2254:	02 c0       	rjmp	.+4      	; 0x225a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	c9 01       	movw	r24, r18
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	e2 e1       	ldi	r30, 0x12	; 18
    2262:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__epilogue_restores__>

00002266 <_ZN16PololuQTRSensorsD1Ev>:
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	9b 81       	ldd	r25, Y+3	; 0x03
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	11 f0       	breq	.+4      	; 0x2278 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2274:	0e 94 ba 12 	call	0x2574	; 0x2574 <free>
    2278:	8e 81       	ldd	r24, Y+6	; 0x06
    227a:	9f 81       	ldd	r25, Y+7	; 0x07
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	11 f0       	breq	.+4      	; 0x2284 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2280:	0e 94 ba 12 	call	0x2574	; 0x2574 <free>
    2284:	88 81       	ld	r24, Y
    2286:	99 81       	ldd	r25, Y+1	; 0x01
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	11 f0       	breq	.+4      	; 0x2290 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    228c:	0e 94 ba 12 	call	0x2574	; 0x2574 <free>
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	11 f0       	breq	.+4      	; 0x229c <_ZN16PololuQTRSensorsD1Ev+0x36>
    2298:	0e 94 ba 12 	call	0x2574	; 0x2574 <free>
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <__udivmodqi4>:
    22a2:	99 1b       	sub	r25, r25
    22a4:	79 e0       	ldi	r23, 0x09	; 9
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <__udivmodqi4_ep>

000022a8 <__udivmodqi4_loop>:
    22a8:	99 1f       	adc	r25, r25
    22aa:	96 17       	cp	r25, r22
    22ac:	08 f0       	brcs	.+2      	; 0x22b0 <__udivmodqi4_ep>
    22ae:	96 1b       	sub	r25, r22

000022b0 <__udivmodqi4_ep>:
    22b0:	88 1f       	adc	r24, r24
    22b2:	7a 95       	dec	r23
    22b4:	c9 f7       	brne	.-14     	; 0x22a8 <__udivmodqi4_loop>
    22b6:	80 95       	com	r24
    22b8:	08 95       	ret

000022ba <__udivmodhi4>:
    22ba:	aa 1b       	sub	r26, r26
    22bc:	bb 1b       	sub	r27, r27
    22be:	51 e1       	ldi	r21, 0x11	; 17
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <__udivmodhi4_ep>

000022c2 <__udivmodhi4_loop>:
    22c2:	aa 1f       	adc	r26, r26
    22c4:	bb 1f       	adc	r27, r27
    22c6:	a6 17       	cp	r26, r22
    22c8:	b7 07       	cpc	r27, r23
    22ca:	10 f0       	brcs	.+4      	; 0x22d0 <__udivmodhi4_ep>
    22cc:	a6 1b       	sub	r26, r22
    22ce:	b7 0b       	sbc	r27, r23

000022d0 <__udivmodhi4_ep>:
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	5a 95       	dec	r21
    22d6:	a9 f7       	brne	.-22     	; 0x22c2 <__udivmodhi4_loop>
    22d8:	80 95       	com	r24
    22da:	90 95       	com	r25
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	08 95       	ret

000022e2 <__divmodhi4>:
    22e2:	97 fb       	bst	r25, 7
    22e4:	07 2e       	mov	r0, r23
    22e6:	16 f4       	brtc	.+4      	; 0x22ec <__divmodhi4+0xa>
    22e8:	00 94       	com	r0
    22ea:	07 d0       	rcall	.+14     	; 0x22fa <__divmodhi4_neg1>
    22ec:	77 fd       	sbrc	r23, 7
    22ee:	09 d0       	rcall	.+18     	; 0x2302 <__divmodhi4_neg2>
    22f0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
    22f4:	07 fc       	sbrc	r0, 7
    22f6:	05 d0       	rcall	.+10     	; 0x2302 <__divmodhi4_neg2>
    22f8:	3e f4       	brtc	.+14     	; 0x2308 <__divmodhi4_exit>

000022fa <__divmodhi4_neg1>:
    22fa:	90 95       	com	r25
    22fc:	81 95       	neg	r24
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	08 95       	ret

00002302 <__divmodhi4_neg2>:
    2302:	70 95       	com	r23
    2304:	61 95       	neg	r22
    2306:	7f 4f       	sbci	r23, 0xFF	; 255

00002308 <__divmodhi4_exit>:
    2308:	08 95       	ret

0000230a <__udivmodsi4>:
    230a:	a1 e2       	ldi	r26, 0x21	; 33
    230c:	1a 2e       	mov	r1, r26
    230e:	aa 1b       	sub	r26, r26
    2310:	bb 1b       	sub	r27, r27
    2312:	fd 01       	movw	r30, r26
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <__udivmodsi4_ep>

00002316 <__udivmodsi4_loop>:
    2316:	aa 1f       	adc	r26, r26
    2318:	bb 1f       	adc	r27, r27
    231a:	ee 1f       	adc	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	a2 17       	cp	r26, r18
    2320:	b3 07       	cpc	r27, r19
    2322:	e4 07       	cpc	r30, r20
    2324:	f5 07       	cpc	r31, r21
    2326:	20 f0       	brcs	.+8      	; 0x2330 <__udivmodsi4_ep>
    2328:	a2 1b       	sub	r26, r18
    232a:	b3 0b       	sbc	r27, r19
    232c:	e4 0b       	sbc	r30, r20
    232e:	f5 0b       	sbc	r31, r21

00002330 <__udivmodsi4_ep>:
    2330:	66 1f       	adc	r22, r22
    2332:	77 1f       	adc	r23, r23
    2334:	88 1f       	adc	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	1a 94       	dec	r1
    233a:	69 f7       	brne	.-38     	; 0x2316 <__udivmodsi4_loop>
    233c:	60 95       	com	r22
    233e:	70 95       	com	r23
    2340:	80 95       	com	r24
    2342:	90 95       	com	r25
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	bd 01       	movw	r22, r26
    234a:	cf 01       	movw	r24, r30
    234c:	08 95       	ret

0000234e <__divmodsi4>:
    234e:	05 2e       	mov	r0, r21
    2350:	97 fb       	bst	r25, 7
    2352:	1e f4       	brtc	.+6      	; 0x235a <__divmodsi4+0xc>
    2354:	00 94       	com	r0
    2356:	0e 94 be 11 	call	0x237c	; 0x237c <__negsi2>
    235a:	57 fd       	sbrc	r21, 7
    235c:	07 d0       	rcall	.+14     	; 0x236c <__divmodsi4_neg2>
    235e:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
    2362:	07 fc       	sbrc	r0, 7
    2364:	03 d0       	rcall	.+6      	; 0x236c <__divmodsi4_neg2>
    2366:	4e f4       	brtc	.+18     	; 0x237a <__divmodsi4_exit>
    2368:	0c 94 be 11 	jmp	0x237c	; 0x237c <__negsi2>

0000236c <__divmodsi4_neg2>:
    236c:	50 95       	com	r21
    236e:	40 95       	com	r20
    2370:	30 95       	com	r19
    2372:	21 95       	neg	r18
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	4f 4f       	sbci	r20, 0xFF	; 255
    2378:	5f 4f       	sbci	r21, 0xFF	; 255

0000237a <__divmodsi4_exit>:
    237a:	08 95       	ret

0000237c <__negsi2>:
    237c:	90 95       	com	r25
    237e:	80 95       	com	r24
    2380:	70 95       	com	r23
    2382:	61 95       	neg	r22
    2384:	7f 4f       	sbci	r23, 0xFF	; 255
    2386:	8f 4f       	sbci	r24, 0xFF	; 255
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	08 95       	ret

0000238c <__umulhisi3>:
    238c:	a2 9f       	mul	r26, r18
    238e:	b0 01       	movw	r22, r0
    2390:	b3 9f       	mul	r27, r19
    2392:	c0 01       	movw	r24, r0
    2394:	a3 9f       	mul	r26, r19
    2396:	70 0d       	add	r23, r0
    2398:	81 1d       	adc	r24, r1
    239a:	11 24       	eor	r1, r1
    239c:	91 1d       	adc	r25, r1
    239e:	b2 9f       	mul	r27, r18
    23a0:	70 0d       	add	r23, r0
    23a2:	81 1d       	adc	r24, r1
    23a4:	11 24       	eor	r1, r1
    23a6:	91 1d       	adc	r25, r1
    23a8:	08 95       	ret

000023aa <__muluhisi3>:
    23aa:	0e 94 c6 11 	call	0x238c	; 0x238c <__umulhisi3>
    23ae:	a5 9f       	mul	r26, r21
    23b0:	90 0d       	add	r25, r0
    23b2:	b4 9f       	mul	r27, r20
    23b4:	90 0d       	add	r25, r0
    23b6:	a4 9f       	mul	r26, r20
    23b8:	80 0d       	add	r24, r0
    23ba:	91 1d       	adc	r25, r1
    23bc:	11 24       	eor	r1, r1
    23be:	08 95       	ret

000023c0 <__mulshisi3>:
    23c0:	b7 ff       	sbrs	r27, 7
    23c2:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__muluhisi3>

000023c6 <__mulohisi3>:
    23c6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__muluhisi3>
    23ca:	82 1b       	sub	r24, r18
    23cc:	93 0b       	sbc	r25, r19
    23ce:	08 95       	ret

000023d0 <__prologue_saves__>:
    23d0:	2f 92       	push	r2
    23d2:	3f 92       	push	r3
    23d4:	4f 92       	push	r4
    23d6:	5f 92       	push	r5
    23d8:	6f 92       	push	r6
    23da:	7f 92       	push	r7
    23dc:	8f 92       	push	r8
    23de:	9f 92       	push	r9
    23e0:	af 92       	push	r10
    23e2:	bf 92       	push	r11
    23e4:	cf 92       	push	r12
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	ca 1b       	sub	r28, r26
    23fa:	db 0b       	sbc	r29, r27
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	09 94       	ijmp

00002408 <__epilogue_restores__>:
    2408:	2a 88       	ldd	r2, Y+18	; 0x12
    240a:	39 88       	ldd	r3, Y+17	; 0x11
    240c:	48 88       	ldd	r4, Y+16	; 0x10
    240e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2410:	6e 84       	ldd	r6, Y+14	; 0x0e
    2412:	7d 84       	ldd	r7, Y+13	; 0x0d
    2414:	8c 84       	ldd	r8, Y+12	; 0x0c
    2416:	9b 84       	ldd	r9, Y+11	; 0x0b
    2418:	aa 84       	ldd	r10, Y+10	; 0x0a
    241a:	b9 84       	ldd	r11, Y+9	; 0x09
    241c:	c8 84       	ldd	r12, Y+8	; 0x08
    241e:	df 80       	ldd	r13, Y+7	; 0x07
    2420:	ee 80       	ldd	r14, Y+6	; 0x06
    2422:	fd 80       	ldd	r15, Y+5	; 0x05
    2424:	0c 81       	ldd	r16, Y+4	; 0x04
    2426:	1b 81       	ldd	r17, Y+3	; 0x03
    2428:	aa 81       	ldd	r26, Y+2	; 0x02
    242a:	b9 81       	ldd	r27, Y+1	; 0x01
    242c:	ce 0f       	add	r28, r30
    242e:	d1 1d       	adc	r29, r1
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	ed 01       	movw	r28, r26
    243c:	08 95       	ret

0000243e <__tablejump2__>:
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	05 90       	lpm	r0, Z+
    2444:	f4 91       	lpm	r31, Z
    2446:	e0 2d       	mov	r30, r0
    2448:	09 94       	ijmp

0000244a <malloc>:
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	91 05       	cpc	r25, r1
    2452:	10 f4       	brcc	.+4      	; 0x2458 <malloc+0xe>
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	e0 91 40 02 	lds	r30, 0x0240
    245c:	f0 91 41 02 	lds	r31, 0x0241
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	c0 e0       	ldi	r28, 0x00	; 0
    2466:	d0 e0       	ldi	r29, 0x00	; 0
    2468:	30 97       	sbiw	r30, 0x00	; 0
    246a:	11 f1       	breq	.+68     	; 0x24b0 <malloc+0x66>
    246c:	40 81       	ld	r20, Z
    246e:	51 81       	ldd	r21, Z+1	; 0x01
    2470:	48 17       	cp	r20, r24
    2472:	59 07       	cpc	r21, r25
    2474:	c0 f0       	brcs	.+48     	; 0x24a6 <malloc+0x5c>
    2476:	48 17       	cp	r20, r24
    2478:	59 07       	cpc	r21, r25
    247a:	61 f4       	brne	.+24     	; 0x2494 <malloc+0x4a>
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 97       	sbiw	r28, 0x00	; 0
    2482:	19 f0       	breq	.+6      	; 0x248a <malloc+0x40>
    2484:	9b 83       	std	Y+3, r25	; 0x03
    2486:	8a 83       	std	Y+2, r24	; 0x02
    2488:	2b c0       	rjmp	.+86     	; 0x24e0 <malloc+0x96>
    248a:	90 93 41 02 	sts	0x0241, r25
    248e:	80 93 40 02 	sts	0x0240, r24
    2492:	26 c0       	rjmp	.+76     	; 0x24e0 <malloc+0x96>
    2494:	21 15       	cp	r18, r1
    2496:	31 05       	cpc	r19, r1
    2498:	19 f0       	breq	.+6      	; 0x24a0 <malloc+0x56>
    249a:	42 17       	cp	r20, r18
    249c:	53 07       	cpc	r21, r19
    249e:	18 f4       	brcc	.+6      	; 0x24a6 <malloc+0x5c>
    24a0:	9a 01       	movw	r18, r20
    24a2:	be 01       	movw	r22, r28
    24a4:	df 01       	movw	r26, r30
    24a6:	ef 01       	movw	r28, r30
    24a8:	02 80       	ldd	r0, Z+2	; 0x02
    24aa:	f3 81       	ldd	r31, Z+3	; 0x03
    24ac:	e0 2d       	mov	r30, r0
    24ae:	dc cf       	rjmp	.-72     	; 0x2468 <malloc+0x1e>
    24b0:	21 15       	cp	r18, r1
    24b2:	31 05       	cpc	r19, r1
    24b4:	09 f1       	breq	.+66     	; 0x24f8 <malloc+0xae>
    24b6:	28 1b       	sub	r18, r24
    24b8:	39 0b       	sbc	r19, r25
    24ba:	24 30       	cpi	r18, 0x04	; 4
    24bc:	31 05       	cpc	r19, r1
    24be:	90 f4       	brcc	.+36     	; 0x24e4 <malloc+0x9a>
    24c0:	12 96       	adiw	r26, 0x02	; 2
    24c2:	8d 91       	ld	r24, X+
    24c4:	9c 91       	ld	r25, X
    24c6:	13 97       	sbiw	r26, 0x03	; 3
    24c8:	61 15       	cp	r22, r1
    24ca:	71 05       	cpc	r23, r1
    24cc:	21 f0       	breq	.+8      	; 0x24d6 <malloc+0x8c>
    24ce:	fb 01       	movw	r30, r22
    24d0:	93 83       	std	Z+3, r25	; 0x03
    24d2:	82 83       	std	Z+2, r24	; 0x02
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <malloc+0x94>
    24d6:	90 93 41 02 	sts	0x0241, r25
    24da:	80 93 40 02 	sts	0x0240, r24
    24de:	fd 01       	movw	r30, r26
    24e0:	32 96       	adiw	r30, 0x02	; 2
    24e2:	44 c0       	rjmp	.+136    	; 0x256c <malloc+0x122>
    24e4:	fd 01       	movw	r30, r26
    24e6:	e2 0f       	add	r30, r18
    24e8:	f3 1f       	adc	r31, r19
    24ea:	81 93       	st	Z+, r24
    24ec:	91 93       	st	Z+, r25
    24ee:	22 50       	subi	r18, 0x02	; 2
    24f0:	31 09       	sbc	r19, r1
    24f2:	2d 93       	st	X+, r18
    24f4:	3c 93       	st	X, r19
    24f6:	3a c0       	rjmp	.+116    	; 0x256c <malloc+0x122>
    24f8:	20 91 3e 02 	lds	r18, 0x023E
    24fc:	30 91 3f 02 	lds	r19, 0x023F
    2500:	23 2b       	or	r18, r19
    2502:	41 f4       	brne	.+16     	; 0x2514 <malloc+0xca>
    2504:	20 91 10 01 	lds	r18, 0x0110
    2508:	30 91 11 01 	lds	r19, 0x0111
    250c:	30 93 3f 02 	sts	0x023F, r19
    2510:	20 93 3e 02 	sts	0x023E, r18
    2514:	20 91 0e 01 	lds	r18, 0x010E
    2518:	30 91 0f 01 	lds	r19, 0x010F
    251c:	21 15       	cp	r18, r1
    251e:	31 05       	cpc	r19, r1
    2520:	41 f4       	brne	.+16     	; 0x2532 <malloc+0xe8>
    2522:	2d b7       	in	r18, 0x3d	; 61
    2524:	3e b7       	in	r19, 0x3e	; 62
    2526:	40 91 12 01 	lds	r20, 0x0112
    252a:	50 91 13 01 	lds	r21, 0x0113
    252e:	24 1b       	sub	r18, r20
    2530:	35 0b       	sbc	r19, r21
    2532:	e0 91 3e 02 	lds	r30, 0x023E
    2536:	f0 91 3f 02 	lds	r31, 0x023F
    253a:	e2 17       	cp	r30, r18
    253c:	f3 07       	cpc	r31, r19
    253e:	a0 f4       	brcc	.+40     	; 0x2568 <malloc+0x11e>
    2540:	2e 1b       	sub	r18, r30
    2542:	3f 0b       	sbc	r19, r31
    2544:	28 17       	cp	r18, r24
    2546:	39 07       	cpc	r19, r25
    2548:	78 f0       	brcs	.+30     	; 0x2568 <malloc+0x11e>
    254a:	ac 01       	movw	r20, r24
    254c:	4e 5f       	subi	r20, 0xFE	; 254
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	24 17       	cp	r18, r20
    2552:	35 07       	cpc	r19, r21
    2554:	48 f0       	brcs	.+18     	; 0x2568 <malloc+0x11e>
    2556:	4e 0f       	add	r20, r30
    2558:	5f 1f       	adc	r21, r31
    255a:	50 93 3f 02 	sts	0x023F, r21
    255e:	40 93 3e 02 	sts	0x023E, r20
    2562:	81 93       	st	Z+, r24
    2564:	91 93       	st	Z+, r25
    2566:	02 c0       	rjmp	.+4      	; 0x256c <malloc+0x122>
    2568:	e0 e0       	ldi	r30, 0x00	; 0
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	cf 01       	movw	r24, r30
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	08 95       	ret

00002574 <free>:
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	09 f4       	brne	.+2      	; 0x2582 <free+0xe>
    2580:	8c c0       	rjmp	.+280    	; 0x269a <free+0x126>
    2582:	fc 01       	movw	r30, r24
    2584:	32 97       	sbiw	r30, 0x02	; 2
    2586:	13 82       	std	Z+3, r1	; 0x03
    2588:	12 82       	std	Z+2, r1	; 0x02
    258a:	00 91 40 02 	lds	r16, 0x0240
    258e:	10 91 41 02 	lds	r17, 0x0241
    2592:	01 15       	cp	r16, r1
    2594:	11 05       	cpc	r17, r1
    2596:	81 f4       	brne	.+32     	; 0x25b8 <free+0x44>
    2598:	20 81       	ld	r18, Z
    259a:	31 81       	ldd	r19, Z+1	; 0x01
    259c:	82 0f       	add	r24, r18
    259e:	93 1f       	adc	r25, r19
    25a0:	20 91 3e 02 	lds	r18, 0x023E
    25a4:	30 91 3f 02 	lds	r19, 0x023F
    25a8:	28 17       	cp	r18, r24
    25aa:	39 07       	cpc	r19, r25
    25ac:	79 f5       	brne	.+94     	; 0x260c <free+0x98>
    25ae:	f0 93 3f 02 	sts	0x023F, r31
    25b2:	e0 93 3e 02 	sts	0x023E, r30
    25b6:	71 c0       	rjmp	.+226    	; 0x269a <free+0x126>
    25b8:	d8 01       	movw	r26, r16
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	ae 17       	cp	r26, r30
    25c0:	bf 07       	cpc	r27, r31
    25c2:	50 f4       	brcc	.+20     	; 0x25d8 <free+0x64>
    25c4:	12 96       	adiw	r26, 0x02	; 2
    25c6:	2d 91       	ld	r18, X+
    25c8:	3c 91       	ld	r19, X
    25ca:	13 97       	sbiw	r26, 0x03	; 3
    25cc:	ad 01       	movw	r20, r26
    25ce:	21 15       	cp	r18, r1
    25d0:	31 05       	cpc	r19, r1
    25d2:	09 f1       	breq	.+66     	; 0x2616 <free+0xa2>
    25d4:	d9 01       	movw	r26, r18
    25d6:	f3 cf       	rjmp	.-26     	; 0x25be <free+0x4a>
    25d8:	9d 01       	movw	r18, r26
    25da:	da 01       	movw	r26, r20
    25dc:	33 83       	std	Z+3, r19	; 0x03
    25de:	22 83       	std	Z+2, r18	; 0x02
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	86 0f       	add	r24, r22
    25e6:	97 1f       	adc	r25, r23
    25e8:	82 17       	cp	r24, r18
    25ea:	93 07       	cpc	r25, r19
    25ec:	69 f4       	brne	.+26     	; 0x2608 <free+0x94>
    25ee:	ec 01       	movw	r28, r24
    25f0:	28 81       	ld	r18, Y
    25f2:	39 81       	ldd	r19, Y+1	; 0x01
    25f4:	26 0f       	add	r18, r22
    25f6:	37 1f       	adc	r19, r23
    25f8:	2e 5f       	subi	r18, 0xFE	; 254
    25fa:	3f 4f       	sbci	r19, 0xFF	; 255
    25fc:	31 83       	std	Z+1, r19	; 0x01
    25fe:	20 83       	st	Z, r18
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	93 83       	std	Z+3, r25	; 0x03
    2606:	82 83       	std	Z+2, r24	; 0x02
    2608:	45 2b       	or	r20, r21
    260a:	29 f4       	brne	.+10     	; 0x2616 <free+0xa2>
    260c:	f0 93 41 02 	sts	0x0241, r31
    2610:	e0 93 40 02 	sts	0x0240, r30
    2614:	42 c0       	rjmp	.+132    	; 0x269a <free+0x126>
    2616:	13 96       	adiw	r26, 0x03	; 3
    2618:	fc 93       	st	X, r31
    261a:	ee 93       	st	-X, r30
    261c:	12 97       	sbiw	r26, 0x02	; 2
    261e:	ed 01       	movw	r28, r26
    2620:	49 91       	ld	r20, Y+
    2622:	59 91       	ld	r21, Y+
    2624:	9e 01       	movw	r18, r28
    2626:	24 0f       	add	r18, r20
    2628:	35 1f       	adc	r19, r21
    262a:	e2 17       	cp	r30, r18
    262c:	f3 07       	cpc	r31, r19
    262e:	71 f4       	brne	.+28     	; 0x264c <free+0xd8>
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	84 0f       	add	r24, r20
    2636:	95 1f       	adc	r25, r21
    2638:	02 96       	adiw	r24, 0x02	; 2
    263a:	11 96       	adiw	r26, 0x01	; 1
    263c:	9c 93       	st	X, r25
    263e:	8e 93       	st	-X, r24
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	13 96       	adiw	r26, 0x03	; 3
    2646:	9c 93       	st	X, r25
    2648:	8e 93       	st	-X, r24
    264a:	12 97       	sbiw	r26, 0x02	; 2
    264c:	e0 e0       	ldi	r30, 0x00	; 0
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	d8 01       	movw	r26, r16
    2652:	12 96       	adiw	r26, 0x02	; 2
    2654:	8d 91       	ld	r24, X+
    2656:	9c 91       	ld	r25, X
    2658:	13 97       	sbiw	r26, 0x03	; 3
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	19 f0       	breq	.+6      	; 0x2664 <free+0xf0>
    265e:	f8 01       	movw	r30, r16
    2660:	8c 01       	movw	r16, r24
    2662:	f6 cf       	rjmp	.-20     	; 0x2650 <free+0xdc>
    2664:	8d 91       	ld	r24, X+
    2666:	9c 91       	ld	r25, X
    2668:	98 01       	movw	r18, r16
    266a:	2e 5f       	subi	r18, 0xFE	; 254
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	20 91 3e 02 	lds	r18, 0x023E
    2676:	30 91 3f 02 	lds	r19, 0x023F
    267a:	28 17       	cp	r18, r24
    267c:	39 07       	cpc	r19, r25
    267e:	69 f4       	brne	.+26     	; 0x269a <free+0x126>
    2680:	30 97       	sbiw	r30, 0x00	; 0
    2682:	29 f4       	brne	.+10     	; 0x268e <free+0x11a>
    2684:	10 92 41 02 	sts	0x0241, r1
    2688:	10 92 40 02 	sts	0x0240, r1
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <free+0x11e>
    268e:	13 82       	std	Z+3, r1	; 0x03
    2690:	12 82       	std	Z+2, r1	; 0x02
    2692:	10 93 3f 02 	sts	0x023F, r17
    2696:	00 93 3e 02 	sts	0x023E, r16
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <__do_global_dtors>:
    26a4:	10 e0       	ldi	r17, 0x00	; 0
    26a6:	c5 e5       	ldi	r28, 0x55	; 85
    26a8:	d0 e0       	ldi	r29, 0x00	; 0
    26aa:	04 c0       	rjmp	.+8      	; 0x26b4 <__do_global_dtors+0x10>
    26ac:	fe 01       	movw	r30, r28
    26ae:	0e 94 1f 12 	call	0x243e	; 0x243e <__tablejump2__>
    26b2:	21 96       	adiw	r28, 0x01	; 1
    26b4:	c6 35       	cpi	r28, 0x56	; 86
    26b6:	d1 07       	cpc	r29, r17
    26b8:	c9 f7       	brne	.-14     	; 0x26ac <__do_global_dtors+0x8>
    26ba:	f8 94       	cli

000026bc <__stop_program>:
    26bc:	ff cf       	rjmp	.-2      	; 0x26bc <__stop_program>
